import { f as fade, B as Block } from './Button-05bf7cea.js';
import { C as Check } from './Check-1d114215.js';
import { C as Copy } from './Copy-ea46e0bf.js';
import { S as Static } from './Index-2cec2c56.js';
import { E as Empty } from './Empty-2eeff83e.js';
import { B as BlockLabel } from './BlockLabel-09bb0248.js';
import './index-5550136d.js';
import './svelte/svelte.js';

/* home/runner/work/gradio/gradio/js/icons/src/JSON.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$3,
	append: append$1,
	attr: attr$2,
	detach: detach$3,
	init: init$3,
	insert: insert$3,
	noop: noop$1,
	safe_not_equal: safe_not_equal$3,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$3(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr$2(path, "fill", "currentColor");
			attr$2(path, "d", "M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z");
			attr$2(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$2(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr$2(svg, "aria-hidden", "true");
			attr$2(svg, "role", "img");
			attr$2(svg, "class", "iconify iconify--mdi");
			attr$2(svg, "width", "100%");
			attr$2(svg, "height", "100%");
			attr$2(svg, "preserveAspectRatio", "xMidYMid meet");
			attr$2(svg, "viewBox", "0 0 24 24");
		},
		m(target, anchor) {
			insert$3(target, svg, anchor);
			append$1(svg, path);
		},
		p: noop$1,
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) {
				detach$3(svg);
			}
		}
	};
}

let JSON$2 = class JSON extends SvelteComponent$3 {
	constructor(options) {
		super();
		init$3(this, options, null, create_fragment$3, safe_not_equal$3, {});
	}
};

const JSONNode_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/json/shared/JSONNode.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$2,
	append,
	attr: attr$1,
	check_outros: check_outros$2,
	create_component: create_component$2,
	destroy_component: destroy_component$2,
	destroy_each,
	detach: detach$2,
	element: element$1,
	empty: empty$1,
	ensure_array_like,
	group_outros: group_outros$2,
	init: init$2,
	insert: insert$2,
	listen: listen$1,
	mount_component: mount_component$2,
	noop,
	safe_not_equal: safe_not_equal$2,
	set_data,
	space: space$2,
	text,
	toggle_class,
	transition_in: transition_in$2,
	transition_out: transition_out$2
} = window.__gradio__svelte__internal;
function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (72:1) {:else}
function create_else_block_2(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element$1("div");
			t = text(/*value*/ ctx[1]);
			attr$1(div, "class", "json-item svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data(t, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}
		}
	};
}

// (68:37) 
function create_if_block_9(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element$1("div");
			t = text(/*value*/ ctx[1]);
			attr$1(div, "class", "json-item number svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data(t, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}
		}
	};
}

// (64:38) 
function create_if_block_8(ctx) {
	let div;
	let t_value = /*value*/ ctx[1].toLocaleString() + "";
	let t;

	return {
		c() {
			div = element$1("div");
			t = text(t_value);
			attr$1(div, "class", "json-item bool svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t_value !== (t_value = /*value*/ ctx[1].toLocaleString() + "")) set_data(t, t_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}
		}
	};
}

// (60:37) 
function create_if_block_7(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			div = element$1("div");
			t0 = text("\"");
			t1 = text(/*value*/ ctx[1]);
			t2 = text("\"");
			attr$1(div, "class", "json-item string svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data(t1, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}
		}
	};
}

// (58:26) 
function create_if_block_6(ctx) {
	let div;

	return {
		c() {
			div = element$1("div");
			div.textContent = "null";
			attr$1(div, "class", "json-item null svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}
		}
	};
}

// (31:35) 
function create_if_block_3(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_4, create_else_block_1$1];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*collapsed*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty$1();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert$2(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$2();

				transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$2();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$2(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(if_block);
			current = true;
		},
		o(local) {
			transition_out$2(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (8:1) {#if value instanceof Array}
function create_if_block$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*collapsed*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty$1();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert$2(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$2();

				transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$2();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$2(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(if_block);
			current = true;
		},
		o(local) {
			transition_out$2(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (40:2) {:else}
function create_else_block_1$1(ctx) {
	let t0;
	let div;
	let t1;
	let current;
	let each_value_1 = ensure_array_like(Object.entries(/*value*/ ctx[1]));
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out$2(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			t0 = text("{\n\t\t\t");
			div = element$1("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = text("\n\t\t\t}");
			attr$1(div, "class", "children svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, t0, anchor);
			insert$2(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			insert$2(target, t1, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*Object, value, depth*/ 6) {
				each_value_1 = ensure_array_like(Object.entries(/*value*/ ctx[1]));
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in$2(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in$2(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros$2();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros$2();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in$2(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out$2(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(t0);
				detach$2(div);
				detach$2(t1);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (32:2) {#if collapsed}
function create_if_block_4(ctx) {
	let button;
	let t0;
	let t1_value = Object.keys(/*value*/ ctx[1]).length + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			button = element$1("button");
			t0 = text("{+");
			t1 = text(t1_value);
			t2 = text(" items}");
		},
		m(target, anchor) {
			insert$2(target, button, anchor);
			append(button, t0);
			append(button, t1);
			append(button, t2);

			if (!mounted) {
				dispose = listen$1(button, "click", /*click_handler_1*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t1_value !== (t1_value = Object.keys(/*value*/ ctx[1]).length + "")) set_data(t1, t1_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(button);
			}

			mounted = false;
			dispose();
		}
	};
}

// (50:5) {#if i !== Object.keys(value).length - 1}
function create_if_block_5(ctx) {
	let t;

	return {
		c() {
			t = text(",");
		},
		m(target, anchor) {
			insert$2(target, t, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach$2(t);
			}
		}
	};
}

// (43:4) {#each Object.entries(value) as node, i}
function create_each_block_1(ctx) {
	let div;
	let t0_value = /*node*/ ctx[5][0] + "";
	let t0;
	let t1;
	let jsonnode;
	let show_if = /*i*/ ctx[7] !== Object.keys(/*value*/ ctx[1]).length - 1;
	let t2;
	let current;

	jsonnode = new JSONNode({
			props: {
				value: /*node*/ ctx[5][1],
				depth: /*depth*/ ctx[2] + 1,
				key: /*i*/ ctx[7]
			}
		});

	let if_block = show_if && create_if_block_5();

	return {
		c() {
			div = element$1("div");
			t0 = text(t0_value);
			t1 = text(": ");
			create_component$2(jsonnode.$$.fragment);
			if (if_block) if_block.c();
			t2 = space$2();
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
			append(div, t0);
			append(div, t1);
			mount_component$2(jsonnode, div, null);
			if (if_block) if_block.m(div, null);
			append(div, t2);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*value*/ 2) && t0_value !== (t0_value = /*node*/ ctx[5][0] + "")) set_data(t0, t0_value);
			const jsonnode_changes = {};
			if (dirty & /*value*/ 2) jsonnode_changes.value = /*node*/ ctx[5][1];
			if (dirty & /*depth*/ 4) jsonnode_changes.depth = /*depth*/ ctx[2] + 1;
			jsonnode.$set(jsonnode_changes);
			if (dirty & /*value*/ 2) show_if = /*i*/ ctx[7] !== Object.keys(/*value*/ ctx[1]).length - 1;

			if (show_if) {
				if (if_block) ; else {
					if_block = create_if_block_5();
					if_block.c();
					if_block.m(div, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(jsonnode.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(jsonnode.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}

			destroy_component$2(jsonnode);
			if (if_block) if_block.d();
		}
	};
}

// (17:2) {:else}
function create_else_block$1(ctx) {
	let t0;
	let div;
	let t1;
	let current;
	let each_value = ensure_array_like(/*value*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out$2(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			t0 = text("[\n\t\t\t");
			div = element$1("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = text("\n\t\t\t]");
			attr$1(div, "class", "children svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, t0, anchor);
			insert$2(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			insert$2(target, t1, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*value, depth*/ 6) {
				each_value = ensure_array_like(/*value*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in$2(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in$2(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros$2();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros$2();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in$2(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out$2(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(t0);
				detach$2(div);
				detach$2(t1);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (9:2) {#if collapsed}
function create_if_block_1$1(ctx) {
	let button;
	let span;
	let t0;
	let t1_value = /*value*/ ctx[1].length + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			button = element$1("button");
			span = element$1("span");
			t0 = text("expand ");
			t1 = text(t1_value);
			t2 = text(" children");
			attr$1(span, "class", "expand-array svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, button, anchor);
			append(button, span);
			append(span, t0);
			append(span, t1);
			append(span, t2);

			if (!mounted) {
				dispose = listen$1(button, "click", /*click_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t1_value !== (t1_value = /*value*/ ctx[1].length + "")) set_data(t1, t1_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(button);
			}

			mounted = false;
			dispose();
		}
	};
}

// (23:6) {#if i !== value.length - 1}
function create_if_block_2(ctx) {
	let t;

	return {
		c() {
			t = text(",");
		},
		m(target, anchor) {
			insert$2(target, t, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach$2(t);
			}
		}
	};
}

// (20:4) {#each value as node, i}
function create_each_block(ctx) {
	let div;
	let t0;
	let t1;
	let jsonnode;
	let t2;
	let t3;
	let current;

	jsonnode = new JSONNode({
			props: {
				value: /*node*/ ctx[5],
				depth: /*depth*/ ctx[2] + 1
			}
		});

	let if_block = /*i*/ ctx[7] !== /*value*/ ctx[1].length - 1 && create_if_block_2();

	return {
		c() {
			div = element$1("div");
			t0 = text(/*i*/ ctx[7]);
			t1 = text(": ");
			create_component$2(jsonnode.$$.fragment);
			t2 = space$2();
			if (if_block) if_block.c();
			t3 = space$2();
		},
		m(target, anchor) {
			insert$2(target, div, anchor);
			append(div, t0);
			append(div, t1);
			mount_component$2(jsonnode, div, null);
			append(div, t2);
			if (if_block) if_block.m(div, null);
			append(div, t3);
			current = true;
		},
		p(ctx, dirty) {
			const jsonnode_changes = {};
			if (dirty & /*value*/ 2) jsonnode_changes.value = /*node*/ ctx[5];
			if (dirty & /*depth*/ 4) jsonnode_changes.depth = /*depth*/ ctx[2] + 1;
			jsonnode.$set(jsonnode_changes);

			if (/*i*/ ctx[7] !== /*value*/ ctx[1].length - 1) {
				if (if_block) ; else {
					if_block = create_if_block_2();
					if_block.c();
					if_block.m(div, t3);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(jsonnode.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(jsonnode.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(div);
			}

			destroy_component$2(jsonnode);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment$2(ctx) {
	let span;
	let t;
	let div;
	let current_block_type_index;
	let if_block;
	let current;

	const if_block_creators = [
		create_if_block$2,
		create_if_block_3,
		create_if_block_6,
		create_if_block_7,
		create_if_block_8,
		create_if_block_9,
		create_else_block_2
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[1] instanceof Array) return 0;
		if (/*value*/ ctx[1] instanceof Object) return 1;
		if (/*value*/ ctx[1] === null) return 2;
		if (typeof /*value*/ ctx[1] === "string") return 3;
		if (typeof /*value*/ ctx[1] === "boolean") return 4;
		if (typeof /*value*/ ctx[1] === "number") return 5;
		return 6;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			span = element$1("span");
			t = space$2();
			div = element$1("div");
			if_block.c();
			attr$1(span, "class", "spacer svelte-1kspdo");
			toggle_class(span, "mt-10", /*depth*/ ctx[2] === 0);
			attr$1(div, "class", "json-node svelte-1kspdo");
		},
		m(target, anchor) {
			insert$2(target, span, anchor);
			insert$2(target, t, anchor);
			insert$2(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*depth*/ 4) {
				toggle_class(span, "mt-10", /*depth*/ ctx[2] === 0);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$2();

				transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$2();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$2(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(if_block);
			current = true;
		},
		o(local) {
			transition_out$2(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(span);
				detach$2(t);
				detach$2(div);
			}

			if_blocks[current_block_type_index].d();
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { value } = $$props;
	let { depth } = $$props;
	let { collapsed = depth > 4 } = $$props;

	const click_handler = () => {
		$$invalidate(0, collapsed = false);
	};

	const click_handler_1 = () => {
		$$invalidate(0, collapsed = false);
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('depth' in $$props) $$invalidate(2, depth = $$props.depth);
		if ('collapsed' in $$props) $$invalidate(0, collapsed = $$props.collapsed);
	};

	return [collapsed, value, depth, click_handler, click_handler_1];
}

class JSONNode extends SvelteComponent$2 {
	constructor(options) {
		super();
		init$2(this, options, instance$2, create_fragment$2, safe_not_equal$2, { value: 1, depth: 2, collapsed: 0 });
	}
}

const JSON_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/json/shared/JSON.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	add_render_callback,
	attr,
	check_outros: check_outros$1,
	create_component: create_component$1,
	create_in_transition,
	destroy_component: destroy_component$1,
	detach: detach$1,
	element,
	empty,
	group_outros: group_outros$1,
	init: init$1,
	insert: insert$1,
	listen,
	mount_component: mount_component$1,
	null_to_empty,
	safe_not_equal: safe_not_equal$1,
	space: space$1,
	transition_in: transition_in$1,
	transition_out: transition_out$1
} = window.__gradio__svelte__internal;
const { onDestroy } = window.__gradio__svelte__internal;
function create_else_block_1(ctx) {
	let div;
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component$1(empty_1.$$.fragment);
			attr(div, "class", "empty-wrapper svelte-6fc7le");
		},
		m(target, anchor) {
			insert$1(target, div, anchor);
			mount_component$1(empty_1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 32) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(empty_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(empty_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(div);
			}

			destroy_component$1(empty_1);
		}
	};
}

// (36:0) {#if value && value !== '""' && !is_empty(value)}
function create_if_block$1(ctx) {
	let button;
	let current_block_type_index;
	let if_block;
	let button_class_value;
	let button_aria_roledescription_value;
	let button_aria_label_value;
	let t;
	let div;
	let jsonnode;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*copied*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	jsonnode = new JSONNode({
			props: { value: /*value*/ ctx[0], depth: 0 }
		});

	return {
		c() {
			button = element("button");
			if_block.c();
			t = space$1();
			div = element("div");
			create_component$1(jsonnode.$$.fragment);
			attr(button, "title", "copy");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*copied*/ ctx[1] ? "" : "copy-text") + " svelte-6fc7le"));
			attr(button, "aria-roledescription", button_aria_roledescription_value = /*copied*/ ctx[1] ? "Copied value" : "Copy value");
			attr(button, "aria-label", button_aria_label_value = /*copied*/ ctx[1] ? "Copied" : "Copy");
			attr(div, "class", "json-holder svelte-6fc7le");
		},
		m(target, anchor) {
			insert$1(target, button, anchor);
			if_blocks[current_block_type_index].m(button, null);
			insert$1(target, t, anchor);
			insert$1(target, div, anchor);
			mount_component$1(jsonnode, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*handle_copy*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros$1();

				transition_out$1(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$1();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in$1(if_block, 1);
				if_block.m(button, null);
			}

			if (!current || dirty & /*copied*/ 2 && button_class_value !== (button_class_value = "" + (null_to_empty(/*copied*/ ctx[1] ? "" : "copy-text") + " svelte-6fc7le"))) {
				attr(button, "class", button_class_value);
			}

			if (!current || dirty & /*copied*/ 2 && button_aria_roledescription_value !== (button_aria_roledescription_value = /*copied*/ ctx[1] ? "Copied value" : "Copy value")) {
				attr(button, "aria-roledescription", button_aria_roledescription_value);
			}

			if (!current || dirty & /*copied*/ 2 && button_aria_label_value !== (button_aria_label_value = /*copied*/ ctx[1] ? "Copied" : "Copy")) {
				attr(button, "aria-label", button_aria_label_value);
			}

			const jsonnode_changes = {};
			if (dirty & /*value*/ 1) jsonnode_changes.value = /*value*/ ctx[0];
			jsonnode.$set(jsonnode_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(if_block);
			transition_in$1(jsonnode.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(if_block);
			transition_out$1(jsonnode.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(button);
				detach$1(t);
				detach$1(div);
			}

			if_blocks[current_block_type_index].d();
			destroy_component$1(jsonnode);
			mounted = false;
			dispose();
		}
	};
}

// (57:2) <Empty>
function create_default_slot$1(ctx) {
	let jsonicon;
	let current;
	jsonicon = new JSON$2({});

	return {
		c() {
			create_component$1(jsonicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(jsonicon, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$1(jsonicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(jsonicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(jsonicon, detaching);
		}
	};
}

// (48:2) {:else}
function create_else_block(ctx) {
	let copy;
	let current;
	copy = new Copy({});

	return {
		c() {
			create_component$1(copy.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(copy, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$1(copy.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(copy.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(copy, detaching);
		}
	};
}

// (44:2) {#if copied}
function create_if_block_1(ctx) {
	let span;
	let check;
	let span_intro;
	let current;
	check = new Check({});

	return {
		c() {
			span = element("span");
			create_component$1(check.$$.fragment);
		},
		m(target, anchor) {
			insert$1(target, span, anchor);
			mount_component$1(check, span, null);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$1(check.$$.fragment, local);

			if (local) {
				if (!span_intro) {
					add_render_callback(() => {
						span_intro = create_in_transition(span, fade, { duration: 300 });
						span_intro.start();
					});
				}
			}

			current = true;
		},
		o(local) {
			transition_out$1(check.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(span);
			}

			destroy_component$1(check);
		}
	};
}

function create_fragment$1(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*value*/ 1) show_if = null;
		if (show_if == null) show_if = !!(/*value*/ ctx[0] && /*value*/ ctx[0] !== '""' && !is_empty(/*value*/ ctx[0]));
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert$1(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$1();

				transition_out$1(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$1();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$1(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(if_block);
			current = true;
		},
		o(local) {
			transition_out$1(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function is_empty(obj) {
	return obj && Object.keys(obj).length === 0 && Object.getPrototypeOf(obj) === Object.prototype && JSON.stringify(obj) === JSON.stringify({});
}

function instance$1($$self, $$props, $$invalidate) {
	let { value = {} } = $$props;
	let copied = false;
	let timer;

	function copy_feedback() {
		$$invalidate(1, copied = true);
		if (timer) clearTimeout(timer);

		timer = setTimeout(
			() => {
				$$invalidate(1, copied = false);
			},
			1000
		);
	}

	async function handle_copy() {
		if ("clipboard" in navigator) {
			await navigator.clipboard.writeText(JSON.stringify(value, null, 2));
			copy_feedback();
		}
	}

	onDestroy(() => {
		if (timer) clearTimeout(timer);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, copied, handle_copy];
}

class JSON_1 extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, { value: 0 });
	}
}

const JSON$1 = JSON_1;

/* home/runner/work/gradio/gradio/js/json/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	assign,
	check_outros,
	create_component,
	destroy_component,
	detach,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				Icon: JSON$2,
				show_label: /*show_label*/ ctx[6],
				label: /*label*/ ctx[5],
				float: false,
				disable: /*container*/ ctx[7] === false
			}
		});

	return {
		c() {
			create_component(blocklabel.$$.fragment);
		},
		m(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 64) blocklabel_changes.show_label = /*show_label*/ ctx[6];
			if (dirty & /*label*/ 32) blocklabel_changes.label = /*label*/ ctx[5];
			if (dirty & /*container*/ 128) blocklabel_changes.disable = /*container*/ ctx[7] === false;
			blocklabel.$set(blocklabel_changes);
		},
		i(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};
}

// (28:0) <Block  {visible}  test_id="json"  {elem_id}  {elem_classes}  {container}  {scale}  {min_width}  padding={false} >
function create_default_slot(ctx) {
	let t0;
	let statustracker;
	let t1;
	let json;
	let current;
	let if_block = /*label*/ ctx[5] && create_if_block(ctx);

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[10].autoscroll
		},
		{ i18n: /*gradio*/ ctx[10].i18n },
		/*loading_status*/ ctx[4]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });
	json = new JSON$1({ props: { value: /*value*/ ctx[3] } });

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			create_component(statustracker.$$.fragment);
			t1 = space();
			create_component(json.$$.fragment);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			mount_component(statustracker, target, anchor);
			insert(target, t1, anchor);
			mount_component(json, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*label*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*label*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const statustracker_changes = (dirty & /*gradio, loading_status*/ 1040)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 1024 && {
						autoscroll: /*gradio*/ ctx[10].autoscroll
					},
					dirty & /*gradio*/ 1024 && { i18n: /*gradio*/ ctx[10].i18n },
					dirty & /*loading_status*/ 16 && get_spread_object(/*loading_status*/ ctx[4])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const json_changes = {};
			if (dirty & /*value*/ 8) json_changes.value = /*value*/ ctx[3];
			json.$set(json_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(statustracker.$$.fragment, local);
			transition_in(json.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(statustracker.$$.fragment, local);
			transition_out(json.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
			}

			if (if_block) if_block.d(detaching);
			destroy_component(statustracker, detaching);
			destroy_component(json, detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				test_id: "json",
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: /*container*/ ctx[7],
				scale: /*scale*/ ctx[8],
				min_width: /*min_width*/ ctx[9],
				padding: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*container*/ 128) block_changes.container = /*container*/ ctx[7];
			if (dirty & /*scale*/ 256) block_changes.scale = /*scale*/ ctx[8];
			if (dirty & /*min_width*/ 512) block_changes.min_width = /*min_width*/ ctx[9];

			if (dirty & /*$$scope, value, gradio, loading_status, show_label, label, container*/ 5368) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let old_value;
	let { loading_status } = $$props;
	let { label } = $$props;
	let { show_label } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { gradio } = $$props;

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('loading_status' in $$props) $$invalidate(4, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(6, show_label = $$props.show_label);
		if ('container' in $$props) $$invalidate(7, container = $$props.container);
		if ('scale' in $$props) $$invalidate(8, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('gradio' in $$props) $$invalidate(10, gradio = $$props.gradio);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, old_value, gradio*/ 3080) {
			{
				if (value !== old_value) {
					$$invalidate(11, old_value = value);
					gradio.dispatch("change");
				}
			}
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		loading_status,
		label,
		show_label,
		container,
		scale,
		min_width,
		gradio,
		old_value
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			loading_status: 4,
			label: 5,
			show_label: 6,
			container: 7,
			scale: 8,
			min_width: 9,
			gradio: 10
		});
	}
}

export { JSON$1 as BaseJSON, Index as default };
//# sourceMappingURL=Index-f6c46d05.js.map
