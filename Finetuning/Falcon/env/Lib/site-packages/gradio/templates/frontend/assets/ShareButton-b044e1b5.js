import { I as IconButton } from './IconButton-fb69b8dd.js';
import './Index-2cec2c56.js';
import './Button-05bf7cea.js';
import { S as ShareError } from './utils-8f25e669.js';

/* home/runner/work/gradio/gradio/js/icons/src/Community.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	append,
	attr,
	detach,
	init: init$1,
	insert,
	noop,
	safe_not_equal: safe_not_equal$1,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$1(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M23,20a5,5,0,0,0-3.89,1.89L11.8,17.32a4.46,4.46,0,0,0,0-2.64l7.31-4.57A5,5,0,1,0,18,7a4.79,4.79,0,0,0,.2,1.32l-7.31,4.57a5,5,0,1,0,0,6.22l7.31,4.57A4.79,4.79,0,0,0,18,25a5,5,0,1,0,5-5ZM23,4a3,3,0,1,1-3,3A3,3,0,0,1,23,4ZM7,19a3,3,0,1,1,3-3A3,3,0,0,1,7,19Zm16,9a3,3,0,1,1,3-3A3,3,0,0,1,23,28Z");
			attr(path, "fill", "currentColor");
			attr(svg, "id", "icon");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 32 32");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(svg);
			}
		}
	};
}

class Community extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, null, create_fragment$1, safe_not_equal$1, {});
	}
}

/* home/runner/work/gradio/gradio/js/atoms/src/ShareButton.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	create_component,
	destroy_component,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;const { createEventDispatcher } = window.__gradio__svelte__internal;
function create_fragment(ctx) {
	let iconbutton;
	let current;

	iconbutton = new IconButton({
			props: {
				Icon: Community,
				label: /*i18n*/ ctx[2]("common.share"),
				pending: /*pending*/ ctx[3]
			}
		});

	iconbutton.$on("click", /*click_handler*/ ctx[5]);

	return {
		c() {
			create_component(iconbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(iconbutton, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const iconbutton_changes = {};
			if (dirty & /*i18n*/ 4) iconbutton_changes.label = /*i18n*/ ctx[2]("common.share");
			if (dirty & /*pending*/ 8) iconbutton_changes.pending = /*pending*/ ctx[3];
			iconbutton.$set(iconbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(iconbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(iconbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(iconbutton, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { formatter } = $$props;
	let { value } = $$props;
	let { i18n } = $$props;
	let pending = false;

	const click_handler = async () => {
		try {
			$$invalidate(3, pending = true);
			const formatted = await formatter(value);
			dispatch("share", { description: formatted });
		} catch(e) {
			console.error(e);
			let message = e instanceof ShareError ? e.message : "Share failed.";
			dispatch("error", message);
		} finally {
			$$invalidate(3, pending = false);
		}
	};

	$$self.$$set = $$props => {
		if ('formatter' in $$props) $$invalidate(0, formatter = $$props.formatter);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('i18n' in $$props) $$invalidate(2, i18n = $$props.i18n);
	};

	return [formatter, value, i18n, pending, dispatch, click_handler];
}

class ShareButton extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { formatter: 0, value: 1, i18n: 2 });
	}
}

export { ShareButton as S };
//# sourceMappingURL=ShareButton-b044e1b5.js.map
