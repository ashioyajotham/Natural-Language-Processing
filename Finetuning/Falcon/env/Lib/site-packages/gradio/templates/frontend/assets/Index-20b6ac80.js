import { I as ImageUploader, S as StaticImage } from './ImageUploader-0e8da2b3.js';
export { W as Webcam } from './ImageUploader-0e8da2b3.js';
import { B as Block } from './Button-05bf7cea.js';
import { E as Empty } from './Empty-2eeff83e.js';
import { S as Static } from './Index-2cec2c56.js';
import { I as Image } from './Image-6cbf81d1.js';
import { U as UploadText } from './UploadText-7206a31c.js';
import { n as normalise_file } from './index-5550136d.js';
export { I as BaseImage } from './Example.svelte_svelte_type_style_lang-6aeed26b.js';
export { default as BaseExample } from './Example-9f38ca23.js';
import './utils-8f25e669.js';
import './BlockLabel-09bb0248.js';
import './IconButton-fb69b8dd.js';
import './ShareButton-b044e1b5.js';
import './Download-ea83bae3.js';
import './Upload-8f4bfd80.js';
import './DropdownArrow-ebaf45e0.js';
import './Upload-02e4db12.js';
/* empty css                                                     */import './Clear-9760deed.js';
import './svelte/svelte.js';
import './file-url-1a9970c0.js';

/* home/runner/work/gradio/gradio/js/image/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	add_flush_callback,
	assign,
	bind,
	binding_callbacks,
	bubble,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	flush,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_else_block(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				variant: /*_value*/ ctx[22] === null ? "dashed" : "solid",
				border_mode: /*dragging*/ ctx[23] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				height: /*height*/ ctx[9] || undefined,
				width: /*width*/ ctx[10],
				allow_overflow: false,
				container: /*container*/ ctx[12],
				scale: /*scale*/ ctx[13],
				min_width: /*min_width*/ ctx[14],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];
			if (dirty[0] & /*_value*/ 4194304) block_changes.variant = /*_value*/ ctx[22] === null ? "dashed" : "solid";
			if (dirty[0] & /*dragging*/ 8388608) block_changes.border_mode = /*dragging*/ ctx[23] ? "focus" : "base";
			if (dirty[0] & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty[0] & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty[0] & /*height*/ 512) block_changes.height = /*height*/ ctx[9] || undefined;
			if (dirty[0] & /*width*/ 1024) block_changes.width = /*width*/ ctx[10];
			if (dirty[0] & /*container*/ 4096) block_changes.container = /*container*/ ctx[12];
			if (dirty[0] & /*scale*/ 8192) block_changes.scale = /*scale*/ ctx[13];
			if (dirty[0] & /*min_width*/ 16384) block_changes.min_width = /*min_width*/ ctx[14];

			if (dirty[0] & /*_selectable, root, sources, label, show_label, pending, streaming, mirror_webcam, gradio, active_tool, value, dragging, loading_status*/ 29165923 | dirty[1] & /*$$scope*/ 2048) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

// (50:0) {#if !interactive}
function create_if_block(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				variant: "solid",
				border_mode: /*dragging*/ ctx[23] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				height: /*height*/ ctx[9] || undefined,
				width: /*width*/ ctx[10],
				allow_overflow: false,
				container: /*container*/ ctx[12],
				scale: /*scale*/ ctx[13],
				min_width: /*min_width*/ ctx[14],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];
			if (dirty[0] & /*dragging*/ 8388608) block_changes.border_mode = /*dragging*/ ctx[23] ? "focus" : "base";
			if (dirty[0] & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty[0] & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty[0] & /*height*/ 512) block_changes.height = /*height*/ ctx[9] || undefined;
			if (dirty[0] & /*width*/ 1024) block_changes.width = /*width*/ ctx[10];
			if (dirty[0] & /*container*/ 4096) block_changes.container = /*container*/ ctx[12];
			if (dirty[0] & /*scale*/ 8192) block_changes.scale = /*scale*/ ctx[13];
			if (dirty[0] & /*min_width*/ 16384) block_changes.min_width = /*min_width*/ ctx[14];

			if (dirty[0] & /*_value, label, show_label, show_download_button, _selectable, show_share_button, gradio, loading_status*/ 6326498 | dirty[1] & /*$$scope*/ 2048) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

// (136:3) {:else}
function create_else_block_1(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				size: "large",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(empty_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty[1] & /*$$scope*/ 2048) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(empty_1, detaching);
		}
	};
}

// (134:3) {#if sources.includes("upload")}
function create_if_block_1(ctx) {
	let uploadtext;
	let current;

	uploadtext = new UploadText({
			props: {
				i18n: /*gradio*/ ctx[21].i18n,
				type: "image",
				mode: "short"
			}
		});

	return {
		c() {
			create_component(uploadtext.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uploadtext, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const uploadtext_changes = {};
			if (dirty[0] & /*gradio*/ 2097152) uploadtext_changes.i18n = /*gradio*/ ctx[21].i18n;
			uploadtext.$set(uploadtext_changes);
		},
		i(local) {
			if (current) return;
			transition_in(uploadtext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadtext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uploadtext, detaching);
		}
	};
}

// (137:4) <Empty unpadded_box={true} size="large">
function create_default_slot_3(ctx) {
	let image;
	let current;
	image = new Image({});

	return {
		c() {
			create_component(image.$$.fragment);
		},
		m(target, anchor) {
			mount_component(image, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(image.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(image.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(image, detaching);
		}
	};
}

// (104:2) <ImageUploader    bind:active_tool    bind:value    selectable={_selectable}    {root}    {sources}    on:edit={() => gradio.dispatch("edit")}    on:clear={() => {     gradio.dispatch("clear");     gradio.dispatch("change");    }}    on:stream={() => gradio.dispatch("stream")}    on:drag={({ detail }) => (dragging = detail)}    on:upload={() => gradio.dispatch("upload")}    on:select={({ detail }) => gradio.dispatch("select", detail)}    on:share={({ detail }) => gradio.dispatch("share", detail)}    on:error={({ detail }) => {     loading_status = loading_status || {};     loading_status.status = "error";     gradio.dispatch("error", detail);    }}    on:click={() => gradio.dispatch("error", "bad thing happened")}    on:error    {label}    {show_label}    {pending}    {streaming}    {mirror_webcam}    i18n={gradio.i18n}   >
function create_default_slot_2(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block_1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (dirty[0] & /*sources*/ 65536) show_if = null;
		if (show_if == null) show_if = !!/*sources*/ ctx[16].includes("upload");
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, [-1, -1]);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (84:1) <Block   {visible}   variant={_value === null ? "dashed" : "solid"}   border_mode={dragging ? "focus" : "base"}   padding={false}   {elem_id}   {elem_classes}   height={height || undefined}   {width}   allow_overflow={false}   {container}   {scale}   {min_width}  >
function create_default_slot_1(ctx) {
	let statustracker;
	let t;
	let imageuploader;
	let updating_active_tool;
	let updating_value;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[21].autoscroll
		},
		{ i18n: /*gradio*/ ctx[21].i18n },
		/*loading_status*/ ctx[1]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	function imageuploader_active_tool_binding(value) {
		/*imageuploader_active_tool_binding*/ ctx[30](value);
	}

	function imageuploader_value_binding(value) {
		/*imageuploader_value_binding*/ ctx[31](value);
	}

	let imageuploader_props = {
		selectable: /*_selectable*/ ctx[11],
		root: /*root*/ ctx[8],
		sources: /*sources*/ ctx[16],
		label: /*label*/ ctx[5],
		show_label: /*show_label*/ ctx[6],
		pending: /*pending*/ ctx[19],
		streaming: /*streaming*/ ctx[18],
		mirror_webcam: /*mirror_webcam*/ ctx[20],
		i18n: /*gradio*/ ctx[21].i18n,
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*active_tool*/ ctx[24] !== void 0) {
		imageuploader_props.active_tool = /*active_tool*/ ctx[24];
	}

	if (/*value*/ ctx[0] !== void 0) {
		imageuploader_props.value = /*value*/ ctx[0];
	}

	imageuploader = new ImageUploader({ props: imageuploader_props });
	binding_callbacks.push(() => bind(imageuploader, 'active_tool', imageuploader_active_tool_binding));
	binding_callbacks.push(() => bind(imageuploader, 'value', imageuploader_value_binding));
	imageuploader.$on("edit", /*edit_handler*/ ctx[32]);
	imageuploader.$on("clear", /*clear_handler*/ ctx[33]);
	imageuploader.$on("stream", /*stream_handler*/ ctx[34]);
	imageuploader.$on("drag", /*drag_handler*/ ctx[35]);
	imageuploader.$on("upload", /*upload_handler*/ ctx[36]);
	imageuploader.$on("select", /*select_handler_1*/ ctx[37]);
	imageuploader.$on("share", /*share_handler_1*/ ctx[38]);
	imageuploader.$on("error", /*error_handler_2*/ ctx[39]);
	imageuploader.$on("click", /*click_handler*/ ctx[40]);
	imageuploader.$on("error", /*error_handler*/ ctx[41]);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(imageuploader.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			mount_component(imageuploader, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 2097154)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 2097152 && {
						autoscroll: /*gradio*/ ctx[21].autoscroll
					},
					dirty[0] & /*gradio*/ 2097152 && { i18n: /*gradio*/ ctx[21].i18n },
					dirty[0] & /*loading_status*/ 2 && get_spread_object(/*loading_status*/ ctx[1])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const imageuploader_changes = {};
			if (dirty[0] & /*_selectable*/ 2048) imageuploader_changes.selectable = /*_selectable*/ ctx[11];
			if (dirty[0] & /*root*/ 256) imageuploader_changes.root = /*root*/ ctx[8];
			if (dirty[0] & /*sources*/ 65536) imageuploader_changes.sources = /*sources*/ ctx[16];
			if (dirty[0] & /*label*/ 32) imageuploader_changes.label = /*label*/ ctx[5];
			if (dirty[0] & /*show_label*/ 64) imageuploader_changes.show_label = /*show_label*/ ctx[6];
			if (dirty[0] & /*pending*/ 524288) imageuploader_changes.pending = /*pending*/ ctx[19];
			if (dirty[0] & /*streaming*/ 262144) imageuploader_changes.streaming = /*streaming*/ ctx[18];
			if (dirty[0] & /*mirror_webcam*/ 1048576) imageuploader_changes.mirror_webcam = /*mirror_webcam*/ ctx[20];
			if (dirty[0] & /*gradio*/ 2097152) imageuploader_changes.i18n = /*gradio*/ ctx[21].i18n;

			if (dirty[0] & /*gradio, sources*/ 2162688 | dirty[1] & /*$$scope*/ 2048) {
				imageuploader_changes.$$scope = { dirty, ctx };
			}

			if (!updating_active_tool && dirty[0] & /*active_tool*/ 16777216) {
				updating_active_tool = true;
				imageuploader_changes.active_tool = /*active_tool*/ ctx[24];
				add_flush_callback(() => updating_active_tool = false);
			}

			if (!updating_value && dirty[0] & /*value*/ 1) {
				updating_value = true;
				imageuploader_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			imageuploader.$set(imageuploader_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(imageuploader.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(imageuploader.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(imageuploader, detaching);
		}
	};
}

// (51:1) <Block   {visible}   variant={"solid"}   border_mode={dragging ? "focus" : "base"}   padding={false}   {elem_id}   {elem_classes}   height={height || undefined}   {width}   allow_overflow={false}   {container}   {scale}   {min_width}  >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let staticimage;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[21].autoscroll
		},
		{ i18n: /*gradio*/ ctx[21].i18n },
		/*loading_status*/ ctx[1]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	staticimage = new StaticImage({
			props: {
				value: /*_value*/ ctx[22],
				label: /*label*/ ctx[5],
				show_label: /*show_label*/ ctx[6],
				show_download_button: /*show_download_button*/ ctx[7],
				selectable: /*_selectable*/ ctx[11],
				show_share_button: /*show_share_button*/ ctx[15],
				i18n: /*gradio*/ ctx[21].i18n
			}
		});

	staticimage.$on("select", /*select_handler*/ ctx[27]);
	staticimage.$on("share", /*share_handler*/ ctx[28]);
	staticimage.$on("error", /*error_handler_1*/ ctx[29]);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(staticimage.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			mount_component(staticimage, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 2097154)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 2097152 && {
						autoscroll: /*gradio*/ ctx[21].autoscroll
					},
					dirty[0] & /*gradio*/ 2097152 && { i18n: /*gradio*/ ctx[21].i18n },
					dirty[0] & /*loading_status*/ 2 && get_spread_object(/*loading_status*/ ctx[1])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const staticimage_changes = {};
			if (dirty[0] & /*_value*/ 4194304) staticimage_changes.value = /*_value*/ ctx[22];
			if (dirty[0] & /*label*/ 32) staticimage_changes.label = /*label*/ ctx[5];
			if (dirty[0] & /*show_label*/ 64) staticimage_changes.show_label = /*show_label*/ ctx[6];
			if (dirty[0] & /*show_download_button*/ 128) staticimage_changes.show_download_button = /*show_download_button*/ ctx[7];
			if (dirty[0] & /*_selectable*/ 2048) staticimage_changes.selectable = /*_selectable*/ ctx[11];
			if (dirty[0] & /*show_share_button*/ 32768) staticimage_changes.show_share_button = /*show_share_button*/ ctx[15];
			if (dirty[0] & /*gradio*/ 2097152) staticimage_changes.i18n = /*gradio*/ ctx[21].i18n;
			staticimage.$set(staticimage_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(staticimage.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(staticimage.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(staticimage, detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*interactive*/ ctx[17]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let _value;
	let url;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let { label } = $$props;
	let { show_label } = $$props;
	let { show_download_button } = $$props;
	let { root } = $$props;
	let { proxy_url } = $$props;
	let { height } = $$props;
	let { width } = $$props;
	let { _selectable = false } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { show_share_button = false } = $$props;
	let { sources = ["upload", "clipboard", "webcam"] } = $$props;
	let { interactive } = $$props;
	let { streaming } = $$props;
	let { pending } = $$props;
	let { mirror_webcam } = $$props;
	let { gradio } = $$props;
	let dragging;
	let active_tool = null;
	const select_handler = ({ detail }) => gradio.dispatch("select", detail);
	const share_handler = ({ detail }) => gradio.dispatch("share", detail);
	const error_handler_1 = ({ detail }) => gradio.dispatch("error", detail);

	function imageuploader_active_tool_binding(value) {
		active_tool = value;
		$$invalidate(24, active_tool);
	}

	function imageuploader_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	const edit_handler = () => gradio.dispatch("edit");

	const clear_handler = () => {
		gradio.dispatch("clear");
		gradio.dispatch("change");
	};

	const stream_handler = () => gradio.dispatch("stream");
	const drag_handler = ({ detail }) => $$invalidate(23, dragging = detail);
	const upload_handler = () => gradio.dispatch("upload");
	const select_handler_1 = ({ detail }) => gradio.dispatch("select", detail);
	const share_handler_1 = ({ detail }) => gradio.dispatch("share", detail);

	const error_handler_2 = ({ detail }) => {
		$$invalidate(1, loading_status = loading_status || {});
		$$invalidate(1, loading_status.status = "error", loading_status);
		gradio.dispatch("error", detail);
	};

	const click_handler = () => gradio.dispatch("error", "bad thing happened");

	function error_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(6, show_label = $$props.show_label);
		if ('show_download_button' in $$props) $$invalidate(7, show_download_button = $$props.show_download_button);
		if ('root' in $$props) $$invalidate(8, root = $$props.root);
		if ('proxy_url' in $$props) $$invalidate(25, proxy_url = $$props.proxy_url);
		if ('height' in $$props) $$invalidate(9, height = $$props.height);
		if ('width' in $$props) $$invalidate(10, width = $$props.width);
		if ('_selectable' in $$props) $$invalidate(11, _selectable = $$props._selectable);
		if ('container' in $$props) $$invalidate(12, container = $$props.container);
		if ('scale' in $$props) $$invalidate(13, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(14, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(1, loading_status = $$props.loading_status);
		if ('show_share_button' in $$props) $$invalidate(15, show_share_button = $$props.show_share_button);
		if ('sources' in $$props) $$invalidate(16, sources = $$props.sources);
		if ('interactive' in $$props) $$invalidate(17, interactive = $$props.interactive);
		if ('streaming' in $$props) $$invalidate(18, streaming = $$props.streaming);
		if ('pending' in $$props) $$invalidate(19, pending = $$props.pending);
		if ('mirror_webcam' in $$props) $$invalidate(20, mirror_webcam = $$props.mirror_webcam);
		if ('gradio' in $$props) $$invalidate(21, gradio = $$props.gradio);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value, root, proxy_url*/ 33554689) {
			$$invalidate(22, _value = normalise_file(value, root, proxy_url));
		}

		if ($$self.$$.dirty[0] & /*_value*/ 4194304) {
			$$invalidate(26, url = _value?.url);
		}

		if ($$self.$$.dirty[0] & /*url, gradio*/ 69206016) {
			url && gradio.dispatch("change");
		}
	};

	return [
		value,
		loading_status,
		elem_id,
		elem_classes,
		visible,
		label,
		show_label,
		show_download_button,
		root,
		height,
		width,
		_selectable,
		container,
		scale,
		min_width,
		show_share_button,
		sources,
		interactive,
		streaming,
		pending,
		mirror_webcam,
		gradio,
		_value,
		dragging,
		active_tool,
		proxy_url,
		url,
		select_handler,
		share_handler,
		error_handler_1,
		imageuploader_active_tool_binding,
		imageuploader_value_binding,
		edit_handler,
		clear_handler,
		stream_handler,
		drag_handler,
		upload_handler,
		select_handler_1,
		share_handler_1,
		error_handler_2,
		click_handler,
		error_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				elem_id: 2,
				elem_classes: 3,
				visible: 4,
				value: 0,
				label: 5,
				show_label: 6,
				show_download_button: 7,
				root: 8,
				proxy_url: 25,
				height: 9,
				width: 10,
				_selectable: 11,
				container: 12,
				scale: 13,
				min_width: 14,
				loading_status: 1,
				show_share_button: 15,
				sources: 16,
				interactive: 17,
				streaming: 18,
				pending: 19,
				mirror_webcam: 20,
				gradio: 21
			},
			null,
			[-1, -1]
		);
	}

	get elem_id() {
		return this.$$.ctx[2];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[3];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[4];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get label() {
		return this.$$.ctx[5];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get show_label() {
		return this.$$.ctx[6];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get show_download_button() {
		return this.$$.ctx[7];
	}

	set show_download_button(show_download_button) {
		this.$$set({ show_download_button });
		flush();
	}

	get root() {
		return this.$$.ctx[8];
	}

	set root(root) {
		this.$$set({ root });
		flush();
	}

	get proxy_url() {
		return this.$$.ctx[25];
	}

	set proxy_url(proxy_url) {
		this.$$set({ proxy_url });
		flush();
	}

	get height() {
		return this.$$.ctx[9];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get width() {
		return this.$$.ctx[10];
	}

	set width(width) {
		this.$$set({ width });
		flush();
	}

	get _selectable() {
		return this.$$.ctx[11];
	}

	set _selectable(_selectable) {
		this.$$set({ _selectable });
		flush();
	}

	get container() {
		return this.$$.ctx[12];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[13];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[14];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[1];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get show_share_button() {
		return this.$$.ctx[15];
	}

	set show_share_button(show_share_button) {
		this.$$set({ show_share_button });
		flush();
	}

	get sources() {
		return this.$$.ctx[16];
	}

	set sources(sources) {
		this.$$set({ sources });
		flush();
	}

	get interactive() {
		return this.$$.ctx[17];
	}

	set interactive(interactive) {
		this.$$set({ interactive });
		flush();
	}

	get streaming() {
		return this.$$.ctx[18];
	}

	set streaming(streaming) {
		this.$$set({ streaming });
		flush();
	}

	get pending() {
		return this.$$.ctx[19];
	}

	set pending(pending) {
		this.$$set({ pending });
		flush();
	}

	get mirror_webcam() {
		return this.$$.ctx[20];
	}

	set mirror_webcam(mirror_webcam) {
		this.$$set({ mirror_webcam });
		flush();
	}

	get gradio() {
		return this.$$.ctx[21];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}
}

export { ImageUploader as BaseImageUploader, StaticImage as BaseStaticImage, Index as default };
//# sourceMappingURL=Index-20b6ac80.js.map
