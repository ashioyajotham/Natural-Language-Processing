import { B as Block } from './Button-05bf7cea.js';
import { I as Info } from './Info-8a698008.js';
import { S as Static } from './Index-2cec2c56.js';
import './index-5550136d.js';
import './svelte/svelte.js';

const Checkbox_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/checkbox/shared/Checkbox.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	append,
	attr,
	detach: detach$1,
	element,
	init: init$1,
	insert: insert$1,
	listen,
	noop,
	run_all,
	safe_not_equal: safe_not_equal$1,
	set_data: set_data$1,
	space: space$1,
	text: text$1,
	toggle_class
} = window.__gradio__svelte__internal;
const { createEventDispatcher } = window.__gradio__svelte__internal;
function create_fragment$1(ctx) {
	let label_1;
	let input;
	let t0;
	let span;
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			label_1 = element("label");
			input = element("input");
			t0 = space$1();
			span = element("span");
			t1 = text$1(/*label*/ ctx[1]);
			input.disabled = /*disabled*/ ctx[2];
			attr(input, "type", "checkbox");
			attr(input, "name", "test");
			attr(input, "data-testid", "checkbox");
			attr(input, "class", "svelte-3pzdsv");
			attr(span, "class", "ml-2 svelte-3pzdsv");
			attr(label_1, "class", "svelte-3pzdsv");
			toggle_class(label_1, "disabled", /*disabled*/ ctx[2]);
		},
		m(target, anchor) {
			insert$1(target, label_1, anchor);
			append(label_1, input);
			input.checked = /*value*/ ctx[0];
			append(label_1, t0);
			append(label_1, span);
			append(span, t1);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[6]),
					listen(input, "keydown", /*handle_enter*/ ctx[3]),
					listen(input, "input", /*handle_input*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*disabled*/ 4) {
				input.disabled = /*disabled*/ ctx[2];
			}

			if (dirty & /*value*/ 1) {
				input.checked = /*value*/ ctx[0];
			}

			if (dirty & /*label*/ 2) set_data$1(t1, /*label*/ ctx[1]);

			if (dirty & /*disabled*/ 4) {
				toggle_class(label_1, "disabled", /*disabled*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$1(label_1);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let disabled;
	let { value = false } = $$props;
	let { label = "Checkbox" } = $$props;
	let { interactive } = $$props;
	const dispatch = createEventDispatcher();

	async function handle_enter(event) {
		if (event.key === "Enter") {
			$$invalidate(0, value = !value);

			dispatch("select", {
				index: 0,
				value: event.currentTarget.checked,
				selected: event.currentTarget.checked
			});
		}
	}

	async function handle_input(event) {
		$$invalidate(0, value = event.currentTarget.checked);

		dispatch("select", {
			index: 0,
			value: event.currentTarget.checked,
			selected: event.currentTarget.checked
		});
	}

	function input_change_handler() {
		value = this.checked;
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('interactive' in $$props) $$invalidate(5, interactive = $$props.interactive);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			// When the value changes, dispatch the change event via handle_change()
			// See the docs for an explanation: https://svelte.dev/docs/svelte-components#script-3-$-marks-a-statement-as-reactive
			(dispatch("change", value));
		}

		if ($$self.$$.dirty & /*interactive*/ 32) {
			$$invalidate(2, disabled = !interactive);
		}
	};

	return [
		value,
		label,
		disabled,
		handle_enter,
		handle_input,
		interactive,
		input_change_handler
	];
}

class Checkbox extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, { value: 0, label: 1, interactive: 5 });
	}
}

const BaseCheckbox = Checkbox;

/* home/runner/work/gradio/gradio/js/checkbox/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	add_flush_callback,
	assign,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;const { afterUpdate } = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let info_1;
	let current;

	info_1 = new Info({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(info_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(info_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const info_1_changes = {};

			if (dirty & /*$$scope, info*/ 65568) {
				info_1_changes.$$scope = { dirty, ctx };
			}

			info_1.$set(info_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(info_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(info_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(info_1, detaching);
		}
	};
}

// (42:2) <Info>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*info*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*info*/ 32) set_data(t, /*info*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (34:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let t1;
	let basecheckbox;
	let updating_value;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[10].autoscroll
		},
		{ i18n: /*gradio*/ ctx[10].i18n },
		/*loading_status*/ ctx[9]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });
	let if_block = /*info*/ ctx[5] && create_if_block(ctx);

	function basecheckbox_value_binding(value) {
		/*basecheckbox_value_binding*/ ctx[14](value);
	}

	let basecheckbox_props = {
		label: /*label*/ ctx[4],
		interactive: /*interactive*/ ctx[11]
	};

	if (/*value*/ ctx[0] !== void 0) {
		basecheckbox_props.value = /*value*/ ctx[0];
	}

	basecheckbox = new BaseCheckbox({ props: basecheckbox_props });
	binding_callbacks.push(() => bind(basecheckbox, 'value', basecheckbox_value_binding));
	basecheckbox.$on("change", /*handle_change*/ ctx[12]);
	basecheckbox.$on("select", /*select_handler*/ ctx[15]);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			create_component(basecheckbox.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t0, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, t1, anchor);
			mount_component(basecheckbox, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 1536)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 1024 && {
						autoscroll: /*gradio*/ ctx[10].autoscroll
					},
					dirty & /*gradio*/ 1024 && { i18n: /*gradio*/ ctx[10].i18n },
					dirty & /*loading_status*/ 512 && get_spread_object(/*loading_status*/ ctx[9])
				])
			: {};

			statustracker.$set(statustracker_changes);

			if (/*info*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*info*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(t1.parentNode, t1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const basecheckbox_changes = {};
			if (dirty & /*label*/ 16) basecheckbox_changes.label = /*label*/ ctx[4];
			if (dirty & /*interactive*/ 2048) basecheckbox_changes.interactive = /*interactive*/ ctx[11];

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				basecheckbox_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			basecheckbox.$set(basecheckbox_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block);
			transition_in(basecheckbox.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block);
			transition_out(basecheckbox.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
			}

			destroy_component(statustracker, detaching);
			if (if_block) if_block.d(detaching);
			destroy_component(basecheckbox, detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[3],
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				container: /*container*/ ctx[6],
				scale: /*scale*/ ctx[7],
				min_width: /*min_width*/ ctx[8],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 8) block_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) block_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*container*/ 64) block_changes.container = /*container*/ ctx[6];
			if (dirty & /*scale*/ 128) block_changes.scale = /*scale*/ ctx[7];
			if (dirty & /*min_width*/ 256) block_changes.min_width = /*min_width*/ ctx[8];

			if (dirty & /*$$scope, label, interactive, value, gradio, info, loading_status*/ 69169) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = false } = $$props;
	let { value_is_output = false } = $$props;
	let { label = "Checkbox" } = $$props;
	let { info = undefined } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { loading_status } = $$props;
	let { gradio } = $$props;
	let { interactive } = $$props;

	function handle_change() {
		gradio.dispatch("change");

		if (!value_is_output) {
			gradio.dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(13, value_is_output = false);
	});

	function basecheckbox_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	const select_handler = e => gradio.dispatch("select", e.detail);

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('value_is_output' in $$props) $$invalidate(13, value_is_output = $$props.value_is_output);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('info' in $$props) $$invalidate(5, info = $$props.info);
		if ('container' in $$props) $$invalidate(6, container = $$props.container);
		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(8, min_width = $$props.min_width);
		if ('loading_status' in $$props) $$invalidate(9, loading_status = $$props.loading_status);
		if ('gradio' in $$props) $$invalidate(10, gradio = $$props.gradio);
		if ('interactive' in $$props) $$invalidate(11, interactive = $$props.interactive);
	};

	return [
		value,
		elem_id,
		elem_classes,
		visible,
		label,
		info,
		container,
		scale,
		min_width,
		loading_status,
		gradio,
		interactive,
		handle_change,
		value_is_output,
		basecheckbox_value_binding,
		select_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			value: 0,
			value_is_output: 13,
			label: 4,
			info: 5,
			container: 6,
			scale: 7,
			min_width: 8,
			loading_status: 9,
			gradio: 10,
			interactive: 11
		});
	}
}

export { BaseCheckbox, Index as default };
//# sourceMappingURL=Index-85874b00.js.map
