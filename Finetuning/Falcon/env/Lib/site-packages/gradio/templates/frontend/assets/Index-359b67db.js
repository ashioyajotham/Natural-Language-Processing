import { B as Block } from './Button-05bf7cea.js';
import { B as BlockTitle } from './BlockTitle-2fcd9935.js';
import { S as Static } from './Index-2cec2c56.js';
import './index-5550136d.js';
import './svelte/svelte.js';
import './Info-8a698008.js';

const Index_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/slider/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	assign,
	attr,
	binding_callbacks,
	create_component,
	destroy_component,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	to_number,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;const { afterUpdate } = window.__gradio__svelte__internal;
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 32) set_data(t, /*label*/ ctx[5]);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (63:0) <Block {visible} {elem_id} {elem_classes} {container} {scale} {min_width}>
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let div1;
	let div0;
	let label_1;
	let blocktitle;
	let t1;
	let input0;
	let input0_aria_label_value;
	let t2;
	let input1;
	let input1_aria_label_value;
	let current;
	let mounted;
	let dispose;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[1].autoscroll },
		{ i18n: /*gradio*/ ctx[1].i18n },
		/*loading_status*/ ctx[14]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	blocktitle = new BlockTitle({
			props: {
				show_label: /*show_label*/ ctx[13],
				info: /*info*/ ctx[6],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			label_1 = element("label");
			create_component(blocktitle.$$.fragment);
			t1 = space();
			input0 = element("input");
			t2 = space();
			input1 = element("input");
			attr(label_1, "for", /*id*/ ctx[18]);
			attr(input0, "aria-label", input0_aria_label_value = `number input for ${/*label*/ ctx[5]}`);
			attr(input0, "data-testid", "number-input");
			attr(input0, "type", "number");
			attr(input0, "min", /*minimum*/ ctx[10]);
			attr(input0, "max", /*maximum*/ ctx[11]);
			attr(input0, "step", /*step*/ ctx[12]);
			input0.disabled = /*disabled*/ ctx[17];
			attr(input0, "class", "svelte-3iwdd6");
			attr(div0, "class", "head svelte-3iwdd6");
			attr(div1, "class", "wrap svelte-3iwdd6");
			attr(input1, "type", "range");
			attr(input1, "id", /*id*/ ctx[18]);
			attr(input1, "name", "cowbell");
			attr(input1, "min", /*minimum*/ ctx[10]);
			attr(input1, "max", /*maximum*/ ctx[11]);
			attr(input1, "step", /*step*/ ctx[12]);
			input1.disabled = /*disabled*/ ctx[17];
			attr(input1, "aria-label", input1_aria_label_value = `range slider for ${/*label*/ ctx[5]}`);
			attr(input1, "class", "svelte-3iwdd6");
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, label_1);
			mount_component(blocktitle, label_1, null);
			append(div0, t1);
			append(div0, input0);
			set_input_value(input0, /*value*/ ctx[0]);
			/*input0_binding*/ ctx[24](input0);
			insert(target, t2, anchor);
			insert(target, input1, anchor);
			set_input_value(input1, /*value*/ ctx[0]);
			/*input1_binding*/ ctx[26](input1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[23]),
					listen(input0, "blur", /*clamp*/ ctx[20]),
					listen(input0, "pointerup", /*handle_release*/ ctx[19]),
					listen(input1, "change", /*input1_change_input_handler*/ ctx[25]),
					listen(input1, "input", /*input1_change_input_handler*/ ctx[25]),
					listen(input1, "pointerup", /*handle_release*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 16386)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 2 && { autoscroll: /*gradio*/ ctx[1].autoscroll },
					dirty & /*gradio*/ 2 && { i18n: /*gradio*/ ctx[1].i18n },
					dirty & /*loading_status*/ 16384 && get_spread_object(/*loading_status*/ ctx[14])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const blocktitle_changes = {};
			if (dirty & /*show_label*/ 8192) blocktitle_changes.show_label = /*show_label*/ ctx[13];
			if (dirty & /*info*/ 64) blocktitle_changes.info = /*info*/ ctx[6];

			if (dirty & /*$$scope, label*/ 1073741856) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (!current || dirty & /*label*/ 32 && input0_aria_label_value !== (input0_aria_label_value = `number input for ${/*label*/ ctx[5]}`)) {
				attr(input0, "aria-label", input0_aria_label_value);
			}

			if (!current || dirty & /*minimum*/ 1024) {
				attr(input0, "min", /*minimum*/ ctx[10]);
			}

			if (!current || dirty & /*maximum*/ 2048) {
				attr(input0, "max", /*maximum*/ ctx[11]);
			}

			if (!current || dirty & /*step*/ 4096) {
				attr(input0, "step", /*step*/ ctx[12]);
			}

			if (!current || dirty & /*disabled*/ 131072) {
				input0.disabled = /*disabled*/ ctx[17];
			}

			if (dirty & /*value*/ 1 && to_number(input0.value) !== /*value*/ ctx[0]) {
				set_input_value(input0, /*value*/ ctx[0]);
			}

			if (!current || dirty & /*minimum*/ 1024) {
				attr(input1, "min", /*minimum*/ ctx[10]);
			}

			if (!current || dirty & /*maximum*/ 2048) {
				attr(input1, "max", /*maximum*/ ctx[11]);
			}

			if (!current || dirty & /*step*/ 4096) {
				attr(input1, "step", /*step*/ ctx[12]);
			}

			if (!current || dirty & /*disabled*/ 131072) {
				input1.disabled = /*disabled*/ ctx[17];
			}

			if (!current || dirty & /*label*/ 32 && input1_aria_label_value !== (input1_aria_label_value = `range slider for ${/*label*/ ctx[5]}`)) {
				attr(input1, "aria-label", input1_aria_label_value);
			}

			if (dirty & /*value*/ 1) {
				set_input_value(input1, /*value*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(div1);
				detach(t2);
				detach(input1);
			}

			destroy_component(statustracker, detaching);
			destroy_component(blocktitle);
			/*input0_binding*/ ctx[24](null);
			/*input1_binding*/ ctx[26](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				container: /*container*/ ctx[7],
				scale: /*scale*/ ctx[8],
				min_width: /*min_width*/ ctx[9],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];
			if (dirty & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty & /*container*/ 128) block_changes.container = /*container*/ ctx[7];
			if (dirty & /*scale*/ 256) block_changes.scale = /*scale*/ ctx[8];
			if (dirty & /*min_width*/ 512) block_changes.min_width = /*min_width*/ ctx[9];

			if (dirty & /*$$scope, minimum, maximum, step, disabled, label, value, rangeInput, numberInput, show_label, info, gradio, loading_status*/ 1074003043) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

let _id = 0;

function instance($$self, $$props, $$invalidate) {
	let disabled;
	let { gradio } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = 0 } = $$props;
	let { label = gradio.i18n("slider.slider") } = $$props;
	let { info = undefined } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { minimum } = $$props;
	let { maximum } = $$props;
	let { step } = $$props;
	let { show_label } = $$props;
	let { interactive } = $$props;
	let { loading_status } = $$props;
	let { value_is_output = false } = $$props;
	let rangeInput;
	let numberInput;
	const id = `range_id_${_id++}`;

	function handle_change() {
		gradio.dispatch("change");

		if (!value_is_output) {
			gradio.dispatch("input");
		}
	}

	afterUpdate(() => {
		$$invalidate(21, value_is_output = false);
		setSlider();
	});

	function handle_release(e) {
		gradio.dispatch("release", value);
	}

	function clamp() {
		gradio.dispatch("release", value);
		$$invalidate(0, value = Math.min(Math.max(value, minimum), maximum));
	}

	function setSlider() {
		setSliderRange();
		rangeInput.addEventListener("input", setSliderRange);
		numberInput.addEventListener("input", setSliderRange);
	}

	function setSliderRange() {
		$$invalidate(15, rangeInput.style.backgroundSize = (Number(rangeInput.value) - Number(rangeInput.min)) / (Number(rangeInput.max) - Number(rangeInput.min)) * 100 + "% 100%", rangeInput);
	}

	function input0_input_handler() {
		value = to_number(this.value);
		$$invalidate(0, value);
	}

	function input0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			numberInput = $$value;
			$$invalidate(16, numberInput);
		});
	}

	function input1_change_input_handler() {
		value = to_number(this.value);
		$$invalidate(0, value);
	}

	function input1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			rangeInput = $$value;
			$$invalidate(15, rangeInput);
		});
	}

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(1, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
		if ('info' in $$props) $$invalidate(6, info = $$props.info);
		if ('container' in $$props) $$invalidate(7, container = $$props.container);
		if ('scale' in $$props) $$invalidate(8, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('minimum' in $$props) $$invalidate(10, minimum = $$props.minimum);
		if ('maximum' in $$props) $$invalidate(11, maximum = $$props.maximum);
		if ('step' in $$props) $$invalidate(12, step = $$props.step);
		if ('show_label' in $$props) $$invalidate(13, show_label = $$props.show_label);
		if ('interactive' in $$props) $$invalidate(22, interactive = $$props.interactive);
		if ('loading_status' in $$props) $$invalidate(14, loading_status = $$props.loading_status);
		if ('value_is_output' in $$props) $$invalidate(21, value_is_output = $$props.value_is_output);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*interactive*/ 4194304) {
			$$invalidate(17, disabled = !interactive);
		}

		if ($$self.$$.dirty & /*value*/ 1) {
			// When the value changes, dispatch the change event via handle_change()
			// See the docs for an explanation: https://svelte.dev/docs/svelte-components#script-3-$-marks-a-statement-as-reactive
			(handle_change());
		}
	};

	return [
		value,
		gradio,
		elem_id,
		elem_classes,
		visible,
		label,
		info,
		container,
		scale,
		min_width,
		minimum,
		maximum,
		step,
		show_label,
		loading_status,
		rangeInput,
		numberInput,
		disabled,
		id,
		handle_release,
		clamp,
		value_is_output,
		interactive,
		input0_input_handler,
		input0_binding,
		input1_change_input_handler,
		input1_binding
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 1,
			elem_id: 2,
			elem_classes: 3,
			visible: 4,
			value: 0,
			label: 5,
			info: 6,
			container: 7,
			scale: 8,
			min_width: 9,
			minimum: 10,
			maximum: 11,
			step: 12,
			show_label: 13,
			interactive: 22,
			loading_status: 14,
			value_is_output: 21
		});
	}
}

export { Index as default };
//# sourceMappingURL=Index-359b67db.js.map
