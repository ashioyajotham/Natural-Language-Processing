import './Index-2cec2c56.js';
import { U as Upload } from './Upload-8f4bfd80.js';
import './Button-05bf7cea.js';

/* home/runner/work/gradio/gradio/js/atoms/src/UploadText.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let span;
	let t0;
	let t1_value = /*i18n*/ ctx[1]("common.or") + "";
	let t1;
	let t2;
	let t3;
	let t4_value = (/*message*/ ctx[2] || /*i18n*/ ctx[1]("upload_text.click_to_upload")) + "";
	let t4;

	return {
		c() {
			span = element("span");
			t0 = text("- ");
			t1 = text(t1_value);
			t2 = text(" -");
			t3 = space();
			t4 = text(t4_value);
			attr(span, "class", "or svelte-b0hvie");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
			append(span, t2);
			insert(target, t3, anchor);
			insert(target, t4, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*i18n*/ 2 && t1_value !== (t1_value = /*i18n*/ ctx[1]("common.or") + "")) set_data(t1, t1_value);
			if (dirty & /*message, i18n*/ 6 && t4_value !== (t4_value = (/*message*/ ctx[2] || /*i18n*/ ctx[1]("upload_text.click_to_upload")) + "")) set_data(t4, t4_value);
		},
		d(detaching) {
			if (detaching) {
				detach(span);
				detach(t3);
				detach(t4);
			}
		}
	};
}

function create_fragment(ctx) {
	let div;
	let span;
	let uploadicon;
	let t0;
	let t1_value = /*i18n*/ ctx[1](/*defs*/ ctx[5][/*type*/ ctx[0]] || /*defs*/ ctx[5].file) + "";
	let t1;
	let t2;
	let current;
	uploadicon = new Upload({});
	let if_block = /*mode*/ ctx[3] !== "short" && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			span = element("span");
			create_component(uploadicon.$$.fragment);
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			attr(span, "class", "icon-wrap svelte-b0hvie");
			toggle_class(span, "hovered", /*hovered*/ ctx[4]);
			attr(div, "class", "wrap svelte-b0hvie");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			mount_component(uploadicon, span, null);
			append(div, t0);
			append(div, t1);
			append(div, t2);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*hovered*/ 16) {
				toggle_class(span, "hovered", /*hovered*/ ctx[4]);
			}

			if ((!current || dirty & /*i18n, type*/ 3) && t1_value !== (t1_value = /*i18n*/ ctx[1](/*defs*/ ctx[5][/*type*/ ctx[0]] || /*defs*/ ctx[5].file) + "")) set_data(t1, t1_value);

			if (/*mode*/ ctx[3] !== "short") {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(uploadicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component(uploadicon);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { type = "file" } = $$props;
	let { i18n } = $$props;
	let { message = undefined } = $$props;
	let { mode = "full" } = $$props;
	let { hovered = false } = $$props;

	const defs = {
		image: "upload_text.drop_image",
		video: "upload_text.drop_video",
		audio: "upload_text.drop_audio",
		file: "upload_text.drop_file",
		csv: "upload_text.drop_csv"
	};

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('i18n' in $$props) $$invalidate(1, i18n = $$props.i18n);
		if ('message' in $$props) $$invalidate(2, message = $$props.message);
		if ('mode' in $$props) $$invalidate(3, mode = $$props.mode);
		if ('hovered' in $$props) $$invalidate(4, hovered = $$props.hovered);
	};

	return [type, i18n, message, mode, hovered, defs];
}

class UploadText extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			i18n: 1,
			message: 2,
			mode: 3,
			hovered: 4
		});
	}
}

export { UploadText as U };
//# sourceMappingURL=UploadText-7206a31c.js.map
