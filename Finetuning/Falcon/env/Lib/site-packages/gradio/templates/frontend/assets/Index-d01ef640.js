import { M as Markdown } from './Index.svelte_svelte_type_style_lang-09b631ef.js';
import { S as Static } from './Index-2cec2c56.js';
import { B as Block } from './Button-05bf7cea.js';
export { default as BaseExample } from './Example-05a677e3.js';
export { M as MarkdownCode } from './Example.svelte_svelte_type_style_lang-b83dcc5a.js';
import './utils-8f25e669.js';
import './index-5550136d.js';
import './svelte/svelte.js';

/* home/runner/work/gradio/gradio/js/markdown/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	assign,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	get_spread_object,
	get_spread_update,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let div;
	let markdown;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[8].autoscroll },
		{ i18n: /*gradio*/ ctx[8].i18n },
		/*loading_status*/ ctx[4],
		{ variant: "center" }
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	markdown = new Markdown({
			props: {
				min_height: /*loading_status*/ ctx[4] && /*loading_status*/ ctx[4].status !== "complete",
				value: /*value*/ ctx[3],
				elem_classes: /*elem_classes*/ ctx[1],
				visible: /*visible*/ ctx[2],
				rtl: /*rtl*/ ctx[5],
				latex_delimiters: /*latex_delimiters*/ ctx[9],
				sanitize_html: /*sanitize_html*/ ctx[6],
				line_breaks: /*line_breaks*/ ctx[7]
			}
		});

	markdown.$on("change", /*change_handler*/ ctx[11]);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			div = element("div");
			create_component(markdown.$$.fragment);
			attr(div, "class", "svelte-1ed2p3z");
			toggle_class(div, "pending", /*loading_status*/ ctx[4]?.status === "pending");
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);
			mount_component(markdown, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 272)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 256 && { autoscroll: /*gradio*/ ctx[8].autoscroll },
					dirty & /*gradio*/ 256 && { i18n: /*gradio*/ ctx[8].i18n },
					dirty & /*loading_status*/ 16 && get_spread_object(/*loading_status*/ ctx[4]),
					statustracker_spread_levels[3]
				])
			: {};

			statustracker.$set(statustracker_changes);
			const markdown_changes = {};
			if (dirty & /*loading_status*/ 16) markdown_changes.min_height = /*loading_status*/ ctx[4] && /*loading_status*/ ctx[4].status !== "complete";
			if (dirty & /*value*/ 8) markdown_changes.value = /*value*/ ctx[3];
			if (dirty & /*elem_classes*/ 2) markdown_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*visible*/ 4) markdown_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*rtl*/ 32) markdown_changes.rtl = /*rtl*/ ctx[5];
			if (dirty & /*latex_delimiters*/ 512) markdown_changes.latex_delimiters = /*latex_delimiters*/ ctx[9];
			if (dirty & /*sanitize_html*/ 64) markdown_changes.sanitize_html = /*sanitize_html*/ ctx[6];
			if (dirty & /*line_breaks*/ 128) markdown_changes.line_breaks = /*line_breaks*/ ctx[7];
			markdown.$set(markdown_changes);

			if (!current || dirty & /*loading_status*/ 16) {
				toggle_class(div, "pending", /*loading_status*/ ctx[4]?.status === "pending");
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(markdown.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(markdown.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
				detach(div);
			}

			destroy_component(statustracker, detaching);
			destroy_component(markdown);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[2],
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				container: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 4) block_changes.visible = /*visible*/ ctx[2];
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) block_changes.elem_classes = /*elem_classes*/ ctx[1];

			if (dirty & /*$$scope, loading_status, value, elem_classes, visible, rtl, latex_delimiters, sanitize_html, line_breaks, gradio*/ 5118) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { label } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = "" } = $$props;
	let { loading_status } = $$props;
	let { rtl = false } = $$props;
	let { sanitize_html = true } = $$props;
	let { line_breaks = false } = $$props;
	let { gradio } = $$props;
	let { latex_delimiters } = $$props;
	const change_handler = () => gradio.dispatch("change");

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(10, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(3, value = $$props.value);
		if ('loading_status' in $$props) $$invalidate(4, loading_status = $$props.loading_status);
		if ('rtl' in $$props) $$invalidate(5, rtl = $$props.rtl);
		if ('sanitize_html' in $$props) $$invalidate(6, sanitize_html = $$props.sanitize_html);
		if ('line_breaks' in $$props) $$invalidate(7, line_breaks = $$props.line_breaks);
		if ('gradio' in $$props) $$invalidate(8, gradio = $$props.gradio);
		if ('latex_delimiters' in $$props) $$invalidate(9, latex_delimiters = $$props.latex_delimiters);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*label, gradio*/ 1280) {
			(gradio.dispatch("change"));
		}
	};

	return [
		elem_id,
		elem_classes,
		visible,
		value,
		loading_status,
		rtl,
		sanitize_html,
		line_breaks,
		gradio,
		latex_delimiters,
		label,
		change_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 10,
			elem_id: 0,
			elem_classes: 1,
			visible: 2,
			value: 3,
			loading_status: 4,
			rtl: 5,
			sanitize_html: 6,
			line_breaks: 7,
			gradio: 8,
			latex_delimiters: 9
		});
	}
}

export { Markdown as BaseMarkdown, Index as default };
//# sourceMappingURL=Index-d01ef640.js.map
