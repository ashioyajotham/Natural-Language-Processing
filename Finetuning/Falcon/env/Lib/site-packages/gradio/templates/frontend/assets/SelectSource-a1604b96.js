import './Index-2cec2c56.js';
import { U as Upload } from './Upload-8f4bfd80.js';
import './Button-05bf7cea.js';

/* home/runner/work/gradio/gradio/js/icons/src/Microphone.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$5,
	append: append$5,
	attr: attr$5,
	detach: detach$5,
	init: init$5,
	insert: insert$5,
	noop: noop$4,
	safe_not_equal: safe_not_equal$5,
	svg_element: svg_element$4
} = window.__gradio__svelte__internal;
function create_fragment$5(ctx) {
	let svg;
	let path0;
	let path1;
	let line0;
	let line1;

	return {
		c() {
			svg = svg_element$4("svg");
			path0 = svg_element$4("path");
			path1 = svg_element$4("path");
			line0 = svg_element$4("line");
			line1 = svg_element$4("line");
			attr$5(path0, "d", "M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z");
			attr$5(path1, "d", "M19 10v2a7 7 0 0 1-14 0v-2");
			attr$5(line0, "x1", "12");
			attr$5(line0, "y1", "19");
			attr$5(line0, "x2", "12");
			attr$5(line0, "y2", "23");
			attr$5(line1, "x1", "8");
			attr$5(line1, "y1", "23");
			attr$5(line1, "x2", "16");
			attr$5(line1, "y2", "23");
			attr$5(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$5(svg, "width", "100%");
			attr$5(svg, "height", "100%");
			attr$5(svg, "viewBox", "0 0 24 24");
			attr$5(svg, "fill", "none");
			attr$5(svg, "stroke", "currentColor");
			attr$5(svg, "stroke-width", "2");
			attr$5(svg, "stroke-linecap", "round");
			attr$5(svg, "stroke-linejoin", "round");
			attr$5(svg, "class", "feather feather-mic");
		},
		m(target, anchor) {
			insert$5(target, svg, anchor);
			append$5(svg, path0);
			append$5(svg, path1);
			append$5(svg, line0);
			append$5(svg, line1);
		},
		p: noop$4,
		i: noop$4,
		o: noop$4,
		d(detaching) {
			if (detaching) {
				detach$5(svg);
			}
		}
	};
}

class Microphone extends SvelteComponent$5 {
	constructor(options) {
		super();
		init$5(this, options, null, create_fragment$5, safe_not_equal$5, {});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Pause.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$4,
	append: append$4,
	attr: attr$4,
	detach: detach$4,
	init: init$4,
	insert: insert$4,
	noop: noop$3,
	safe_not_equal: safe_not_equal$4,
	svg_element: svg_element$3
} = window.__gradio__svelte__internal;
function create_fragment$4(ctx) {
	let svg;
	let rect0;
	let rect1;

	return {
		c() {
			svg = svg_element$3("svg");
			rect0 = svg_element$3("rect");
			rect1 = svg_element$3("rect");
			attr$4(rect0, "x", "6");
			attr$4(rect0, "y", "4");
			attr$4(rect0, "width", "4");
			attr$4(rect0, "height", "16");
			attr$4(rect1, "x", "14");
			attr$4(rect1, "y", "4");
			attr$4(rect1, "width", "4");
			attr$4(rect1, "height", "16");
			attr$4(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$4(svg, "width", "100%");
			attr$4(svg, "height", "100%");
			attr$4(svg, "viewBox", "0 0 24 24");
			attr$4(svg, "fill", "currentColor");
			attr$4(svg, "stroke", "currentColor");
			attr$4(svg, "stroke-width", "1.5");
			attr$4(svg, "stroke-linecap", "round");
			attr$4(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert$4(target, svg, anchor);
			append$4(svg, rect0);
			append$4(svg, rect1);
		},
		p: noop$3,
		i: noop$3,
		o: noop$3,
		d(detaching) {
			if (detaching) {
				detach$4(svg);
			}
		}
	};
}

class Pause extends SvelteComponent$4 {
	constructor(options) {
		super();
		init$4(this, options, null, create_fragment$4, safe_not_equal$4, {});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Play.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$3,
	append: append$3,
	attr: attr$3,
	detach: detach$3,
	init: init$3,
	insert: insert$3,
	noop: noop$2,
	safe_not_equal: safe_not_equal$3,
	svg_element: svg_element$2
} = window.__gradio__svelte__internal;
function create_fragment$3(ctx) {
	let svg;
	let polygon;

	return {
		c() {
			svg = svg_element$2("svg");
			polygon = svg_element$2("polygon");
			attr$3(polygon, "points", "5 3 19 12 5 21 5 3");
			attr$3(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$3(svg, "width", "100%");
			attr$3(svg, "height", "100%");
			attr$3(svg, "viewBox", "0 0 24 24");
			attr$3(svg, "fill", "currentColor");
			attr$3(svg, "stroke", "currentColor");
			attr$3(svg, "stroke-width", "1.5");
			attr$3(svg, "stroke-linecap", "round");
			attr$3(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert$3(target, svg, anchor);
			append$3(svg, polygon);
		},
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) {
				detach$3(svg);
			}
		}
	};
}

class Play extends SvelteComponent$3 {
	constructor(options) {
		super();
		init$3(this, options, null, create_fragment$3, safe_not_equal$3, {});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Trim.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$2,
	append: append$2,
	attr: attr$2,
	detach: detach$2,
	init: init$2,
	insert: insert$2,
	noop: noop$1,
	safe_not_equal: safe_not_equal$2,
	svg_element: svg_element$1
} = window.__gradio__svelte__internal;
function create_fragment$2(ctx) {
	let svg;
	let circle0;
	let circle1;
	let line0;
	let line1;
	let line2;

	return {
		c() {
			svg = svg_element$1("svg");
			circle0 = svg_element$1("circle");
			circle1 = svg_element$1("circle");
			line0 = svg_element$1("line");
			line1 = svg_element$1("line");
			line2 = svg_element$1("line");
			attr$2(circle0, "cx", "6");
			attr$2(circle0, "cy", "6");
			attr$2(circle0, "r", "3");
			attr$2(circle1, "cx", "6");
			attr$2(circle1, "cy", "18");
			attr$2(circle1, "r", "3");
			attr$2(line0, "x1", "20");
			attr$2(line0, "y1", "4");
			attr$2(line0, "x2", "8.12");
			attr$2(line0, "y2", "15.88");
			attr$2(line1, "x1", "14.47");
			attr$2(line1, "y1", "14.48");
			attr$2(line1, "x2", "20");
			attr$2(line1, "y2", "20");
			attr$2(line2, "x1", "8.12");
			attr$2(line2, "y1", "8.12");
			attr$2(line2, "x2", "12");
			attr$2(line2, "y2", "12");
			attr$2(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$2(svg, "width", "20");
			attr$2(svg, "height", "20");
			attr$2(svg, "viewBox", "0 0 24 24");
			attr$2(svg, "fill", "none");
			attr$2(svg, "stroke", "currentColor");
			attr$2(svg, "stroke-width", "2");
			attr$2(svg, "stroke-linecap", "round");
			attr$2(svg, "stroke-linejoin", "round");
			attr$2(svg, "class", "feather feather-scissors");
		},
		m(target, anchor) {
			insert$2(target, svg, anchor);
			append$2(svg, circle0);
			append$2(svg, circle1);
			append$2(svg, line0);
			append$2(svg, line1);
			append$2(svg, line2);
		},
		p: noop$1,
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) {
				detach$2(svg);
			}
		}
	};
}

class Trim extends SvelteComponent$2 {
	constructor(options) {
		super();
		init$2(this, options, null, create_fragment$2, safe_not_equal$2, {});
	}
}

/* home/runner/work/gradio/gradio/js/icons/src/Video.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	append: append$1,
	attr: attr$1,
	detach: detach$1,
	init: init$1,
	insert: insert$1,
	noop,
	safe_not_equal: safe_not_equal$1,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$1(ctx) {
	let svg;
	let polygon;
	let rect;

	return {
		c() {
			svg = svg_element("svg");
			polygon = svg_element("polygon");
			rect = svg_element("rect");
			attr$1(polygon, "points", "23 7 16 12 23 17 23 7");
			attr$1(rect, "x", "1");
			attr$1(rect, "y", "5");
			attr$1(rect, "width", "15");
			attr$1(rect, "height", "14");
			attr$1(rect, "rx", "2");
			attr$1(rect, "ry", "2");
			attr$1(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$1(svg, "width", "100%");
			attr$1(svg, "height", "100%");
			attr$1(svg, "viewBox", "0 0 24 24");
			attr$1(svg, "fill", "none");
			attr$1(svg, "stroke", "currentColor");
			attr$1(svg, "stroke-width", "1.5");
			attr$1(svg, "stroke-linecap", "round");
			attr$1(svg, "stroke-linejoin", "round");
			attr$1(svg, "class", "feather feather-video");
		},
		m(target, anchor) {
			insert$1(target, svg, anchor);
			append$1(svg, polygon);
			append$1(svg, rect);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$1(svg);
			}
		}
	};
}

class Video extends SvelteComponent$1 {
	constructor(options) {
		super();
		init$1(this, options, null, create_fragment$1, safe_not_equal$1, {});
	}
}

/* home/runner/work/gradio/gradio/js/atoms/src/SelectSource.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let span;
	let show_if_2 = /*sources*/ ctx[1].includes("upload");
	let t0;
	let show_if_1 = /*sources*/ ctx[1].includes("microphone");
	let t1;
	let show_if = /*sources*/ ctx[1].includes("webcam");
	let current;
	let if_block0 = show_if_2 && create_if_block_3(ctx);
	let if_block1 = show_if_1 && create_if_block_2(ctx);
	let if_block2 = show_if && create_if_block_1(ctx);

	return {
		c() {
			span = element("span");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			attr(span, "class", "source-selection svelte-2z6t5p");
			attr(span, "data-testid", "source-select");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t0);
			if (if_block1) if_block1.m(span, null);
			append(span, t1);
			if (if_block2) if_block2.m(span, null);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*sources*/ 2) show_if_2 = /*sources*/ ctx[1].includes("upload");

			if (show_if_2) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*sources*/ 2) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(span, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (dirty & /*sources*/ 2) show_if_1 = /*sources*/ ctx[1].includes("microphone");

			if (show_if_1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*sources*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(span, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (dirty & /*sources*/ 2) show_if = /*sources*/ ctx[1].includes("webcam");

			if (show_if) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*sources*/ 2) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(span, null);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(span);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

// (9:2) {#if sources.includes("upload")}
function create_if_block_3(ctx) {
	let button;
	let upload;
	let current;
	let mounted;
	let dispose;
	upload = new Upload({});

	return {
		c() {
			button = element("button");
			create_component(upload.$$.fragment);
			attr(button, "class", "icon svelte-2z6t5p");
			attr(button, "aria-label", "Upload file");
			toggle_class(button, "selected", /*active_source*/ ctx[0] === "upload");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(upload, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*active_source*/ 1) {
				toggle_class(button, "selected", /*active_source*/ ctx[0] === "upload");
			}
		},
		i(local) {
			if (current) return;
			transition_in(upload.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(upload.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(button);
			}

			destroy_component(upload);
			mounted = false;
			dispose();
		}
	};
}

// (21:2) {#if sources.includes("microphone")}
function create_if_block_2(ctx) {
	let button;
	let microphone;
	let current;
	let mounted;
	let dispose;
	microphone = new Microphone({});

	return {
		c() {
			button = element("button");
			create_component(microphone.$$.fragment);
			attr(button, "class", "icon svelte-2z6t5p");
			attr(button, "aria-label", "Record audio");
			toggle_class(button, "selected", /*active_source*/ ctx[0] === "microphone");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(microphone, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_1*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*active_source*/ 1) {
				toggle_class(button, "selected", /*active_source*/ ctx[0] === "microphone");
			}
		},
		i(local) {
			if (current) return;
			transition_in(microphone.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(microphone.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(button);
			}

			destroy_component(microphone);
			mounted = false;
			dispose();
		}
	};
}

// (33:2) {#if sources.includes("webcam")}
function create_if_block_1(ctx) {
	let button;
	let video;
	let current;
	let mounted;
	let dispose;
	video = new Video({});

	return {
		c() {
			button = element("button");
			create_component(video.$$.fragment);
			attr(button, "class", "icon svelte-2z6t5p");
			attr(button, "aria-label", "Record video");
			toggle_class(button, "selected", /*active_source*/ ctx[0] === "webcam");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			mount_component(video, button, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler_2*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*active_source*/ 1) {
				toggle_class(button, "selected", /*active_source*/ ctx[0] === "webcam");
			}
		},
		i(local) {
			if (current) return;
			transition_in(video.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(video.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(button);
			}

			destroy_component(video);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*sources*/ ctx[1].length > 1 && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*sources*/ ctx[1].length > 1) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*sources*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if (if_block) if_block.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { sources } = $$props;
	let { active_source } = $$props;

	let { handle_clear = () => {
		
	} } = $$props;

	const click_handler = () => {
		handle_clear();
		$$invalidate(0, active_source = "upload");
	};

	const click_handler_1 = () => {
		handle_clear();
		$$invalidate(0, active_source = "microphone");
	};

	const click_handler_2 = () => {
		handle_clear();
		$$invalidate(0, active_source = "webcam");
	};

	$$self.$$set = $$props => {
		if ('sources' in $$props) $$invalidate(1, sources = $$props.sources);
		if ('active_source' in $$props) $$invalidate(0, active_source = $$props.active_source);
		if ('handle_clear' in $$props) $$invalidate(2, handle_clear = $$props.handle_clear);
	};

	return [
		active_source,
		sources,
		handle_clear,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class SelectSource extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			sources: 1,
			active_source: 0,
			handle_clear: 2
		});
	}
}

export { Pause as P, SelectSource as S, Trim as T, Video as V, Play as a };
//# sourceMappingURL=SelectSource-a1604b96.js.map
