import { g as get_next_color } from './color-20ad9c0d.js';
import { c as colors, B as Block } from './Button-05bf7cea.js';
import { B as BlockLabel } from './BlockLabel-09bb0248.js';
import { E as Empty } from './Empty-2eeff83e.js';
import { S as Static } from './Index-2cec2c56.js';
import './index-5550136d.js';
import './svelte/svelte.js';

/* home/runner/work/gradio/gradio/js/icons/src/TextHighlight.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$4,
	append: append$2,
	attr: attr$3,
	detach: detach$4,
	init: init$4,
	insert: insert$4,
	noop: noop$2,
	safe_not_equal: safe_not_equal$4,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$4(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr$3(path0, "fill", "currentColor");
			attr$3(path0, "d", "M12 15H5a3 3 0 0 1-3-3v-2a3 3 0 0 1 3-3h5V5a1 1 0 0 0-1-1H3V2h6a3 3 0 0 1 3 3zM5 9a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h5V9zm15 14v2a1 1 0 0 0 1 1h5v-4h-5a1 1 0 0 0-1 1z");
			attr$3(path1, "fill", "currentColor");
			attr$3(path1, "d", "M2 30h28V2Zm26-2h-7a3 3 0 0 1-3-3v-2a3 3 0 0 1 3-3h5v-2a1 1 0 0 0-1-1h-6v-2h6a3 3 0 0 1 3 3Z");
			attr$3(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$3(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr$3(svg, "aria-hidden", "true");
			attr$3(svg, "role", "img");
			attr$3(svg, "class", "iconify iconify--carbon");
			attr$3(svg, "width", "100%");
			attr$3(svg, "height", "100%");
			attr$3(svg, "preserveAspectRatio", "xMidYMid meet");
			attr$3(svg, "viewBox", "0 0 32 32");
		},
		m(target, anchor) {
			insert$4(target, svg, anchor);
			append$2(svg, path0);
			append$2(svg, path1);
		},
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) {
				detach$4(svg);
			}
		}
	};
}

class TextHighlight extends SvelteComponent$4 {
	constructor(options) {
		super();
		init$4(this, options, null, create_fragment$4, safe_not_equal$4, {});
	}
}

function name_to_rgba(name, a, ctx) {
  if (!ctx) {
    var canvas = document.createElement("canvas");
    ctx = canvas.getContext("2d");
  }
  ctx.fillStyle = name;
  ctx.fillRect(0, 0, 1, 1);
  const [r, g, b] = ctx.getImageData(0, 0, 1, 1).data;
  ctx.clearRect(0, 0, 1, 1);
  return `rgba(${r}, ${g}, ${b}, ${255 / a})`;
}
function correct_color_map(color_map, _color_map, browser, ctx) {
  for (const col in color_map) {
    const _c = color_map[col].trim();
    if (_c in colors) {
      _color_map[col] = colors[_c];
    } else {
      _color_map[col] = {
        primary: browser ? name_to_rgba(color_map[col], 1, ctx) : color_map[col],
        secondary: browser ? name_to_rgba(color_map[col], 0.5, ctx) : color_map[col]
      };
    }
  }
}
function merge_elements(value, mergeMode) {
  let result = [];
  let tempStr = null;
  let tempVal = null;
  for (const val of value) {
    if (mergeMode === "empty" && val.class_or_confidence === null || mergeMode === "equal" && tempVal === val.class_or_confidence) {
      tempStr = tempStr ? tempStr + val.token : val.token;
    } else {
      if (tempStr !== null) {
        result.push({
          token: tempStr,
          class_or_confidence: tempVal
        });
      }
      tempStr = val.token;
      tempVal = val.class_or_confidence;
    }
  }
  if (tempStr !== null) {
    result.push({
      token: tempStr,
      class_or_confidence: tempVal
    });
  }
  return result;
}

const StaticHighlightedtext_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/highlightedtext/shared/StaticHighlightedtext.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$3,
	append: append$1,
	attr: attr$2,
	destroy_each: destroy_each$1,
	detach: detach$3,
	element: element$2,
	empty: empty$3,
	ensure_array_like: ensure_array_like$1,
	init: init$3,
	insert: insert$3,
	listen: listen$2,
	noop: noop$1,
	run_all: run_all$2,
	safe_not_equal: safe_not_equal$3,
	set_data: set_data$1,
	set_style: set_style$2,
	space: space$2,
	text: text$1,
	toggle_class: toggle_class$1
} = window.__gradio__svelte__internal;const { createEventDispatcher: createEventDispatcher$1 } = window.__gradio__svelte__internal;
function get_each_context_3$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];

	const constants_0 = typeof /*v*/ child_ctx[17].class_or_confidence === "string"
	? parseInt(/*v*/ child_ctx[17].class_or_confidence)
	: /*v*/ child_ctx[17].class_or_confidence;

	child_ctx[26] = constants_0;
	return child_ctx;
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	child_ctx[19] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[22] = i;
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i][0];
	child_ctx[24] = list[i][1];
	child_ctx[19] = i;
	return child_ctx;
}

// (131:1) {:else}
function create_else_block$3(ctx) {
	let t;
	let div;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_5$1();
	let each_value_3 = ensure_array_like$1(/*value*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3$1(get_each_context_3$1(ctx, each_value_3, i));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space$2();
			div = element$2("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr$2(div, "class", "textfield svelte-ju12zg");
			attr$2(div, "data-testid", "highlighted-text:textfield");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert$3(target, t, anchor);
			insert$3(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block_5$1();
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value, parseInt*/ 1) {
				each_value_3 = ensure_array_like$1(/*value*/ ctx[0]);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3$1(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(t);
				detach$3(div);
			}

			if (if_block) if_block.d(detaching);
			destroy_each$1(each_blocks, detaching);
		}
	};
}

// (60:1) {#if mode === "categories"}
function create_if_block$3(ctx) {
	let t;
	let div;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_4$2(ctx);
	let each_value = ensure_array_like$1(/*value*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space$2();
			div = element$2("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr$2(div, "class", "textfield svelte-ju12zg");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert$3(target, t, anchor);
			insert$3(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4$2(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*splitTextByNewline, value, active, selectable, _color_map, dispatch, show_legend*/ 111) {
				each_value = ensure_array_like$1(/*value*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(t);
				detach$3(div);
			}

			if (if_block) if_block.d(detaching);
			destroy_each$1(each_blocks, detaching);
		}
	};
}

// (132:2) {#if show_legend}
function create_if_block_5$1(ctx) {
	let div;

	return {
		c() {
			div = element$2("div");
			div.innerHTML = `<span>-1</span> <span>0</span> <span>+1</span>`;
			attr$2(div, "class", "color-legend svelte-ju12zg");
			attr$2(div, "data-testid", "highlighted-text:color-legend");
		},
		m(target, anchor) {
			insert$3(target, div, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach$3(div);
			}
		}
	};
}

// (140:3) {#each value as v}
function create_each_block_3$1(ctx) {
	let span1;
	let span0;
	let t0_value = /*v*/ ctx[17].token + "";
	let t0;
	let t1;
	let span1_style_value;

	return {
		c() {
			span1 = element$2("span");
			span0 = element$2("span");
			t0 = text$1(t0_value);
			t1 = space$2();
			attr$2(span0, "class", "text svelte-ju12zg");
			attr$2(span1, "class", "textspan score-text svelte-ju12zg");

			attr$2(span1, "style", span1_style_value = "background-color: rgba(" + (/*score*/ ctx[26] && /*score*/ ctx[26] < 0
			? "128, 90, 213," + -/*score*/ ctx[26]
			: "239, 68, 60," + /*score*/ ctx[26]) + ")");
		},
		m(target, anchor) {
			insert$3(target, span1, anchor);
			append$1(span1, span0);
			append$1(span0, t0);
			append$1(span1, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*v*/ ctx[17].token + "")) set_data$1(t0, t0_value);

			if (dirty & /*value*/ 1 && span1_style_value !== (span1_style_value = "background-color: rgba(" + (/*score*/ ctx[26] && /*score*/ ctx[26] < 0
			? "128, 90, 213," + -/*score*/ ctx[26]
			: "239, 68, 60," + /*score*/ ctx[26]) + ")")) {
				attr$2(span1, "style", span1_style_value);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(span1);
			}
		}
	};
}

// (61:2) {#if show_legend}
function create_if_block_4$2(ctx) {
	let div;
	let each_value_2 = ensure_array_like$1(Object.entries(/*_color_map*/ ctx[5]));
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
	}

	return {
		c() {
			div = element$2("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr$2(div, "class", "category-legend svelte-ju12zg");
			attr$2(div, "data-testid", "highlighted-text:category-legend");
		},
		m(target, anchor) {
			insert$3(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p(ctx, dirty) {
			if (dirty & /*Object, _color_map, handle_mouseover, handle_mouseout*/ 416) {
				each_value_2 = ensure_array_like$1(Object.entries(/*_color_map*/ ctx[5]));
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(div);
			}

			destroy_each$1(each_blocks, detaching);
		}
	};
}

// (66:4) {#each Object.entries(_color_map) as [category, color], i}
function create_each_block_2$1(ctx) {
	let div;
	let t0_value = /*category*/ ctx[23] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function mouseover_handler() {
		return /*mouseover_handler*/ ctx[10](/*category*/ ctx[23]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[11](/*category*/ ctx[23]);
	}

	return {
		c() {
			div = element$2("div");
			t0 = text$1(t0_value);
			t1 = space$2();
			attr$2(div, "class", "category-label svelte-ju12zg");
			attr$2(div, "style", "background-color:" + /*color*/ ctx[24].secondary);
		},
		m(target, anchor) {
			insert$3(target, div, anchor);
			append$1(div, t0);
			append$1(div, t1);

			if (!mounted) {
				dispose = [
					listen$2(div, "mouseover", mouseover_handler),
					listen$2(div, "focus", focus_handler),
					listen$2(div, "mouseout", /*mouseout_handler*/ ctx[12]),
					listen$2(div, "blur", /*blur_handler*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) {
				detach$3(div);
			}

			mounted = false;
			run_all$2(dispose);
		}
	};
}

// (85:5) {#if line.trim() !== ""}
function create_if_block_2$2(ctx) {
	let span1;
	let span0;
	let t0_value = /*line*/ ctx[20] + "";
	let t0;
	let t1;
	let mounted;
	let dispose;
	let if_block = !/*show_legend*/ ctx[1] && /*v*/ ctx[17].class_or_confidence !== null && create_if_block_3$2(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[14](/*i*/ ctx[19], /*v*/ ctx[17]);
	}

	return {
		c() {
			span1 = element$2("span");
			span0 = element$2("span");
			t0 = text$1(t0_value);
			t1 = space$2();
			if (if_block) if_block.c();
			attr$2(span0, "class", "text svelte-ju12zg");
			toggle_class$1(span0, "no-label", /*v*/ ctx[17].class_or_confidence === null || !/*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence]);
			attr$2(span1, "class", "textspan svelte-ju12zg");
			toggle_class$1(span1, "no-cat", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence);
			toggle_class$1(span1, "hl", /*v*/ ctx[17].class_or_confidence !== null);
			toggle_class$1(span1, "selectable", /*selectable*/ ctx[2]);

			set_style$2(span1, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
			? ""
			: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].secondary);
		},
		m(target, anchor) {
			insert$3(target, span1, anchor);
			append$1(span1, span0);
			append$1(span0, t0);
			append$1(span1, t1);
			if (if_block) if_block.m(span1, null);

			if (!mounted) {
				dispose = listen$2(span1, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*line*/ ctx[20] + "")) set_data$1(t0, t0_value);

			if (dirty & /*value, _color_map*/ 33) {
				toggle_class$1(span0, "no-label", /*v*/ ctx[17].class_or_confidence === null || !/*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence]);
			}

			if (!/*show_legend*/ ctx[1] && /*v*/ ctx[17].class_or_confidence !== null) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3$2(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value, active*/ 9) {
				toggle_class$1(span1, "no-cat", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence);
			}

			if (dirty & /*value*/ 1) {
				toggle_class$1(span1, "hl", /*v*/ ctx[17].class_or_confidence !== null);
			}

			if (dirty & /*selectable*/ 4) {
				toggle_class$1(span1, "selectable", /*selectable*/ ctx[2]);
			}

			if (dirty & /*value, active*/ 9) {
				set_style$2(span1, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
				? ""
				: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].secondary);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(span1);
			}

			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (111:7) {#if !show_legend && v.class_or_confidence !== null}
function create_if_block_3$2(ctx) {
	let t0;
	let span;
	let t1_value = /*v*/ ctx[17].class_or_confidence + "";
	let t1;

	return {
		c() {
			t0 = text$1(" \n\t\t\t\t\t\t\t\t");
			span = element$2("span");
			t1 = text$1(t1_value);
			attr$2(span, "class", "label svelte-ju12zg");

			set_style$2(span, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
			? ""
			: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].primary);
		},
		m(target, anchor) {
			insert$3(target, t0, anchor);
			insert$3(target, span, anchor);
			append$1(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1 && t1_value !== (t1_value = /*v*/ ctx[17].class_or_confidence + "")) set_data$1(t1, t1_value);

			if (dirty & /*value, active*/ 9) {
				set_style$2(span, "background-color", /*v*/ ctx[17].class_or_confidence === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*v*/ ctx[17].class_or_confidence
				? ""
				: /*_color_map*/ ctx[5][/*v*/ ctx[17].class_or_confidence].primary);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(t0);
				detach$3(span);
			}
		}
	};
}

// (125:5) {#if j < splitTextByNewline(v.token).length - 1}
function create_if_block_1$2(ctx) {
	let br;

	return {
		c() {
			br = element$2("br");
		},
		m(target, anchor) {
			insert$3(target, br, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach$3(br);
			}
		}
	};
}

// (84:4) {#each splitTextByNewline(v.token) as line, j}
function create_each_block_1$1(ctx) {
	let show_if_1 = /*line*/ ctx[20].trim() !== "";
	let t;
	let show_if = /*j*/ ctx[22] < splitTextByNewline$1(/*v*/ ctx[17].token).length - 1;
	let if_block1_anchor;
	let if_block0 = show_if_1 && create_if_block_2$2(ctx);
	let if_block1 = show_if && create_if_block_1$2();

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space$2();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty$3();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert$3(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert$3(target, if_block1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1) show_if_1 = /*line*/ ctx[20].trim() !== "";

			if (show_if_1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2$2(ctx);
					if_block0.c();
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*value*/ 1) show_if = /*j*/ ctx[22] < splitTextByNewline$1(/*v*/ ctx[17].token).length - 1;

			if (show_if) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$2();
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(t);
				detach$3(if_block1_anchor);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d(detaching);
		}
	};
}

// (83:3) {#each value as v, i}
function create_each_block$1(ctx) {
	let each_1_anchor;
	let each_value_1 = ensure_array_like$1(splitTextByNewline$1(/*v*/ ctx[17].token));
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty$3();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert$3(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*splitTextByNewline, value, active, selectable, _color_map, dispatch, show_legend*/ 111) {
				each_value_1 = ensure_array_like$1(splitTextByNewline$1(/*v*/ ctx[17].token));
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(each_1_anchor);
			}

			destroy_each$1(each_blocks, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[4] === "categories") return create_if_block$3;
		return create_else_block$3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element$2("div");
			if_block.c();
			attr$2(div, "class", "container svelte-ju12zg");
		},
		m(target, anchor) {
			insert$3(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) {
				detach$3(div);
			}

			if_block.d();
		}
	};
}

function splitTextByNewline$1(text) {
	return text.split("\n");
}

function instance$3($$self, $$props, $$invalidate) {
	const browser = typeof document !== "undefined";
	let { value = [] } = $$props;
	let { show_legend = false } = $$props;
	let { color_map = {} } = $$props;
	let { selectable = false } = $$props;
	let ctx;
	let _color_map = {};
	let active = "";
	const dispatch = createEventDispatcher$1();
	let mode;

	function handle_mouseover(label) {
		$$invalidate(3, active = label);
	}

	function handle_mouseout() {
		$$invalidate(3, active = "");
	}

	const mouseover_handler = category => handle_mouseover(category);
	const focus_handler = category => handle_mouseover(category);
	const mouseout_handler = () => handle_mouseout();
	const blur_handler = () => handle_mouseout();

	const click_handler = (i, v) => {
		dispatch("select", {
			index: i,
			value: [v.token, v.class_or_confidence]
		});
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(1, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(9, color_map = $$props.color_map);
		if ('selectable' in $$props) $$invalidate(2, selectable = $$props.selectable);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color_map, value*/ 513) {
			{
				if (!color_map) {
					$$invalidate(9, color_map = {});
				}

				if (value.length > 0) {
					for (let entry of value) {
						if (entry.class_or_confidence !== null) {
							if (typeof entry.class_or_confidence === "string") {
								$$invalidate(4, mode = "categories");

								if (!(entry.class_or_confidence in color_map)) {
									let color = get_next_color(Object.keys(color_map).length);
									$$invalidate(9, color_map[entry.class_or_confidence] = color, color_map);
								}
							} else {
								$$invalidate(4, mode = "scores");
							}
						}
					}
				}

				correct_color_map(color_map, _color_map, browser, ctx);
			}
		}
	};

	return [
		value,
		show_legend,
		selectable,
		active,
		mode,
		_color_map,
		dispatch,
		handle_mouseover,
		handle_mouseout,
		color_map,
		mouseover_handler,
		focus_handler,
		mouseout_handler,
		blur_handler,
		click_handler
	];
}

class StaticHighlightedtext extends SvelteComponent$3 {
	constructor(options) {
		super();

		init$3(this, options, instance$3, create_fragment$3, safe_not_equal$3, {
			value: 0,
			show_legend: 1,
			color_map: 9,
			selectable: 2
		});
	}
}

const StaticHighlightedText = StaticHighlightedtext;

const LabelInput_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/highlightedtext/shared/LabelInput.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$2,
	attr: attr$1,
	detach: detach$2,
	element: element$1,
	empty: empty$2,
	init: init$2,
	insert: insert$2,
	listen: listen$1,
	noop,
	run_all: run_all$1,
	safe_not_equal: safe_not_equal$2,
	set_style: set_style$1
} = window.__gradio__svelte__internal;
function create_else_block$2(ctx) {
	let input;
	let input_style_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element$1("input");
			attr$1(input, "class", "label-input svelte-1cag2po");
			input.autofocus = true;
			attr$1(input, "type", "number");
			attr$1(input, "step", "0.1");

			attr$1(input, "style", input_style_value = "background-color: rgba(" + (typeof /*category*/ ctx[1] === "number" && /*category*/ ctx[1] < 0
			? "128, 90, 213," + -/*category*/ ctx[1]
			: "239, 68, 60," + /*category*/ ctx[1]) + ")");

			input.value = /*category*/ ctx[1];
			set_style$1(input, "width", `7ch`);
		},
		m(target, anchor) {
			insert$2(target, input, anchor);
			input.focus();

			if (!mounted) {
				dispose = [
					listen$1(input, "input", /*handleInput*/ ctx[8]),
					listen$1(input, "blur", /*blur_handler_1*/ ctx[14]),
					listen$1(input, "keydown", /*keydown_handler_1*/ ctx[15])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*category*/ 2 && input_style_value !== (input_style_value = "background-color: rgba(" + (typeof /*category*/ ctx[1] === "number" && /*category*/ ctx[1] < 0
			? "128, 90, 213," + -/*category*/ ctx[1]
			: "239, 68, 60," + /*category*/ ctx[1]) + ")")) {
				attr$1(input, "style", input_style_value);
			}

			if (dirty & /*category*/ 2 && input.value !== /*category*/ ctx[1]) {
				input.value = /*category*/ ctx[1];
			}

			const style_changed = dirty & /*category*/ 2;

			if (dirty & /*category*/ 2 || style_changed) {
				set_style$1(input, "width", `7ch`);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$2(input);
			}

			mounted = false;
			run_all$1(dispose);
		}
	};
}

// (43:0) {#if !isScoresMode}
function create_if_block$2(ctx) {
	let input;
	let input_id_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element$1("input");
			attr$1(input, "class", "label-input svelte-1cag2po");
			input.autofocus = true;
			attr$1(input, "id", input_id_value = `label-input-${/*indexOfLabel*/ ctx[3]}`);
			attr$1(input, "type", "text");
			attr$1(input, "placeholder", "label");
			input.value = /*category*/ ctx[1];

			set_style$1(input, "background-color", /*category*/ ctx[1] === null || /*active*/ ctx[2] && /*active*/ ctx[2] !== /*category*/ ctx[1]
			? ""
			: /*_color_map*/ ctx[6][/*category*/ ctx[1]].primary);

			set_style$1(input, "width", /*_input_value*/ ctx[7]
			? /*_input_value*/ ctx[7].toString()?.length + 4 + "ch"
			: "8ch");
		},
		m(target, anchor) {
			insert$2(target, input, anchor);
			input.focus();

			if (!mounted) {
				dispose = [
					listen$1(input, "input", /*handleInput*/ ctx[8]),
					listen$1(input, "blur", /*blur_handler*/ ctx[12]),
					listen$1(input, "keydown", /*keydown_handler*/ ctx[13]),
					listen$1(input, "focus", clearPlaceHolderOnFocus)
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*indexOfLabel*/ 8 && input_id_value !== (input_id_value = `label-input-${/*indexOfLabel*/ ctx[3]}`)) {
				attr$1(input, "id", input_id_value);
			}

			if (dirty & /*category*/ 2 && input.value !== /*category*/ ctx[1]) {
				input.value = /*category*/ ctx[1];
			}

			if (dirty & /*category, active, _color_map*/ 70) {
				set_style$1(input, "background-color", /*category*/ ctx[1] === null || /*active*/ ctx[2] && /*active*/ ctx[2] !== /*category*/ ctx[1]
				? ""
				: /*_color_map*/ ctx[6][/*category*/ ctx[1]].primary);
			}

			if (dirty & /*_input_value*/ 128) {
				set_style$1(input, "width", /*_input_value*/ ctx[7]
				? /*_input_value*/ ctx[7].toString()?.length + 4 + "ch"
				: "8ch");
			}
		},
		d(detaching) {
			if (detaching) {
				detach$2(input);
			}

			mounted = false;
			run_all$1(dispose);
		}
	};
}

function create_fragment$2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (!/*isScoresMode*/ ctx[5]) return create_if_block$2;
		return create_else_block$2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty$2();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert$2(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach$2(if_block_anchor);
			}

			if_block.d(detaching);
		}
	};
}

function clearPlaceHolderOnFocus(e) {
	let target = e.target;
	if (target && target.placeholder) target.placeholder = "";
}

function instance$2($$self, $$props, $$invalidate) {
	let { value } = $$props;
	let { category } = $$props;
	let { active } = $$props;
	let { labelToEdit } = $$props;
	let { indexOfLabel } = $$props;
	let { text } = $$props;
	let { handleValueChange } = $$props;
	let { isScoresMode = false } = $$props;
	let { _color_map } = $$props;
	let _input_value = category;

	function handleInput(e) {
		let target = e.target;

		if (target) {
			$$invalidate(7, _input_value = target.value);
		}
	}

	function updateLabelValue(e, elementIndex, text) {
		let target = e.target;

		$$invalidate(10, value = [
			...value.slice(0, elementIndex),
			{
				token: text,
				class_or_confidence: target.value === ""
				? null
				: isScoresMode ? Number(target.value) : target.value
			},
			...value.slice(elementIndex + 1)
		]);

		handleValueChange();
	}

	const blur_handler = e => updateLabelValue(e, indexOfLabel, text);

	const keydown_handler = e => {
		if (e.key === "Enter") {
			updateLabelValue(e, indexOfLabel, text);
			$$invalidate(0, labelToEdit = -1);
		}
	};

	const blur_handler_1 = e => updateLabelValue(e, indexOfLabel, text);

	const keydown_handler_1 = e => {
		if (e.key === "Enter") {
			updateLabelValue(e, indexOfLabel, text);
			$$invalidate(0, labelToEdit = -1);
		}
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(10, value = $$props.value);
		if ('category' in $$props) $$invalidate(1, category = $$props.category);
		if ('active' in $$props) $$invalidate(2, active = $$props.active);
		if ('labelToEdit' in $$props) $$invalidate(0, labelToEdit = $$props.labelToEdit);
		if ('indexOfLabel' in $$props) $$invalidate(3, indexOfLabel = $$props.indexOfLabel);
		if ('text' in $$props) $$invalidate(4, text = $$props.text);
		if ('handleValueChange' in $$props) $$invalidate(11, handleValueChange = $$props.handleValueChange);
		if ('isScoresMode' in $$props) $$invalidate(5, isScoresMode = $$props.isScoresMode);
		if ('_color_map' in $$props) $$invalidate(6, _color_map = $$props._color_map);
	};

	return [
		labelToEdit,
		category,
		active,
		indexOfLabel,
		text,
		isScoresMode,
		_color_map,
		_input_value,
		handleInput,
		updateLabelValue,
		value,
		handleValueChange,
		blur_handler,
		keydown_handler,
		blur_handler_1,
		keydown_handler_1
	];
}

class LabelInput extends SvelteComponent$2 {
	constructor(options) {
		super();

		init$2(this, options, instance$2, create_fragment$2, safe_not_equal$2, {
			value: 10,
			category: 1,
			active: 2,
			labelToEdit: 0,
			indexOfLabel: 3,
			text: 4,
			handleValueChange: 11,
			isScoresMode: 5,
			_color_map: 6
		});
	}
}

const InteractiveHighlightedtext_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/highlightedtext/shared/InteractiveHighlightedtext.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	add_flush_callback: add_flush_callback$1,
	append,
	attr,
	bind: bind$1,
	binding_callbacks: binding_callbacks$1,
	check_outros: check_outros$1,
	create_component: create_component$1,
	destroy_component: destroy_component$1,
	destroy_each,
	detach: detach$1,
	element,
	empty: empty$1,
	ensure_array_like,
	group_outros: group_outros$1,
	init: init$1,
	insert: insert$1,
	listen,
	mount_component: mount_component$1,
	run_all,
	safe_not_equal: safe_not_equal$1,
	set_data,
	set_style,
	space: space$1,
	text,
	toggle_class,
	transition_in: transition_in$1,
	transition_out: transition_out$1
} = window.__gradio__svelte__internal;const { createEventDispatcher, onMount } = window.__gradio__svelte__internal;
function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i].token;
	child_ctx[46] = list[i].class_or_confidence;
	child_ctx[48] = i;

	const constants_0 = typeof /*class_or_confidence*/ child_ctx[46] === "string"
	? parseInt(/*class_or_confidence*/ child_ctx[46])
	: /*class_or_confidence*/ child_ctx[46];

	child_ctx[54] = constants_0;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[45] = list[i].token;
	child_ctx[46] = list[i].class_or_confidence;
	child_ctx[48] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[49] = list[i];
	child_ctx[51] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[46] = list[i][0];
	child_ctx[52] = list[i][1];
	child_ctx[48] = i;
	return child_ctx;
}

// (254:1) {:else}
function create_else_block$1(ctx) {
	let t;
	let div;
	let current;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_10();
	let each_value_3 = ensure_array_like(/*value*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out = i => transition_out$1(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			if (if_block) if_block.c();
			t = space$1();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "textfield svelte-1ozsnjl");
			attr(div, "data-testid", "highlighted-text:textfield");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert$1(target, t, anchor);
			insert$1(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block_10();
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*removeHighlightedText, value, activeElementIndex, active, labelToEdit, _color_map, handleValueChange*/ 889) {
				each_value_3 = ensure_array_like(/*value*/ ctx[0]);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in$1(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						transition_in$1(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros$1();

				for (i = each_value_3.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros$1();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in$1(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out$1(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
				detach$1(div);
			}

			if (if_block) if_block.d(detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (130:1) {#if mode === "categories"}
function create_if_block$1(ctx) {
	let t;
	let div;
	let current;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_6(ctx);
	let each_value = ensure_array_like(/*value*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out$1(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			if (if_block) if_block.c();
			t = space$1();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "textfield svelte-1ozsnjl");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert$1(target, t, anchor);
			insert$1(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_6(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*value, removeHighlightedText, active, selectable, _color_map, handleSelect, labelToEdit, handleKeydownSelection, activeElementIndex, handleValueChange, show_legend*/ 13183) {
				each_value = ensure_array_like(/*value*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in$1(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in$1(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros$1();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros$1();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in$1(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out$1(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
				detach$1(div);
			}

			if (if_block) if_block.d(detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (255:2) {#if show_legend}
function create_if_block_10(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<span>-1</span> <span>0</span> <span>+1</span>`;
			attr(div, "class", "color-legend svelte-1ozsnjl");
			attr(div, "data-testid", "highlighted-text:color-legend");
		},
		m(target, anchor) {
			insert$1(target, div, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach$1(div);
			}
		}
	};
}

// (292:6) {#if class_or_confidence && labelToEdit === i}
function create_if_block_9(ctx) {
	let labelinput;
	let updating_value;
	let current;

	function labelinput_value_binding_1(value) {
		/*labelinput_value_binding_1*/ ctx[32](value);
	}

	let labelinput_props = {
		labelToEdit: /*labelToEdit*/ ctx[6],
		_color_map: /*_color_map*/ ctx[3],
		category: /*class_or_confidence*/ ctx[46],
		active: /*active*/ ctx[5],
		indexOfLabel: /*i*/ ctx[48],
		text: /*token*/ ctx[45],
		handleValueChange: /*handleValueChange*/ ctx[9],
		isScoresMode: true
	};

	if (/*value*/ ctx[0] !== void 0) {
		labelinput_props.value = /*value*/ ctx[0];
	}

	labelinput = new LabelInput({ props: labelinput_props });
	binding_callbacks$1.push(() => bind$1(labelinput, 'value', labelinput_value_binding_1));

	return {
		c() {
			create_component$1(labelinput.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(labelinput, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const labelinput_changes = {};
			if (dirty[0] & /*labelToEdit*/ 64) labelinput_changes.labelToEdit = /*labelToEdit*/ ctx[6];
			if (dirty[0] & /*_color_map*/ 8) labelinput_changes._color_map = /*_color_map*/ ctx[3];
			if (dirty[0] & /*value*/ 1) labelinput_changes.category = /*class_or_confidence*/ ctx[46];
			if (dirty[0] & /*active*/ 32) labelinput_changes.active = /*active*/ ctx[5];
			if (dirty[0] & /*value*/ 1) labelinput_changes.text = /*token*/ ctx[45];

			if (!updating_value && dirty[0] & /*value*/ 1) {
				updating_value = true;
				labelinput_changes.value = /*value*/ ctx[0];
				add_flush_callback$1(() => updating_value = false);
			}

			labelinput.$set(labelinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(labelinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(labelinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(labelinput, detaching);
		}
	};
}

// (306:5) {#if class_or_confidence && activeElementIndex === i}
function create_if_block_8(ctx) {
	let span;
	let mounted;
	let dispose;

	function click_handler_5() {
		return /*click_handler_5*/ ctx[37](/*i*/ ctx[48]);
	}

	function keydown_handler_5(...args) {
		return /*keydown_handler_5*/ ctx[38](/*i*/ ctx[48], ...args);
	}

	return {
		c() {
			span = element("span");
			span.textContent = "×";
			attr(span, "class", "label-clear-button svelte-1ozsnjl");
			attr(span, "role", "button");
			attr(span, "aria-roledescription", "Remove label from text");
			attr(span, "tabindex", "0");
		},
		m(target, anchor) {
			insert$1(target, span, anchor);

			if (!mounted) {
				dispose = [
					listen(span, "click", click_handler_5),
					listen(span, "keydown", keydown_handler_5)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) {
				detach$1(span);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

// (264:3) {#each value as { token, class_or_confidence }
function create_each_block_3(ctx) {
	let span2;
	let span1;
	let span0;
	let t0_value = /*token*/ ctx[45] + "";
	let t0;
	let t1;
	let span1_style_value;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*class_or_confidence*/ ctx[46] && /*labelToEdit*/ ctx[6] === /*i*/ ctx[48] && create_if_block_9(ctx);

	function mouseover_handler_3() {
		return /*mouseover_handler_3*/ ctx[33](/*i*/ ctx[48]);
	}

	function focus_handler_3() {
		return /*focus_handler_3*/ ctx[34](/*i*/ ctx[48]);
	}

	function click_handler_4() {
		return /*click_handler_4*/ ctx[35](/*i*/ ctx[48]);
	}

	function keydown_handler_4(...args) {
		return /*keydown_handler_4*/ ctx[36](/*i*/ ctx[48], ...args);
	}

	let if_block1 = /*class_or_confidence*/ ctx[46] && /*activeElementIndex*/ ctx[4] === /*i*/ ctx[48] && create_if_block_8(ctx);

	return {
		c() {
			span2 = element("span");
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space$1();
			if (if_block0) if_block0.c();
			t2 = space$1();
			if (if_block1) if_block1.c();
			t3 = space$1();
			attr(span0, "class", "text svelte-1ozsnjl");
			attr(span1, "class", "textspan score-text svelte-1ozsnjl");
			attr(span1, "role", "button");
			attr(span1, "tabindex", "0");

			attr(span1, "style", span1_style_value = "background-color: rgba(" + (/*score*/ ctx[54] && /*score*/ ctx[54] < 0
			? "128, 90, 213," + -/*score*/ ctx[54]
			: "239, 68, 60," + /*score*/ ctx[54]) + ")");

			toggle_class(span1, "no-cat", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]);
			toggle_class(span1, "hl", /*class_or_confidence*/ ctx[46] !== null);
			attr(span2, "class", "score-text-container svelte-1ozsnjl");
		},
		m(target, anchor) {
			insert$1(target, span2, anchor);
			append(span2, span1);
			append(span1, span0);
			append(span0, t0);
			append(span1, t1);
			if (if_block0) if_block0.m(span1, null);
			append(span2, t2);
			if (if_block1) if_block1.m(span2, null);
			append(span2, t3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span1, "mouseover", mouseover_handler_3),
					listen(span1, "focus", focus_handler_3),
					listen(span1, "click", click_handler_4),
					listen(span1, "keydown", keydown_handler_4)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty[0] & /*value*/ 1) && t0_value !== (t0_value = /*token*/ ctx[45] + "")) set_data(t0, t0_value);

			if (/*class_or_confidence*/ ctx[46] && /*labelToEdit*/ ctx[6] === /*i*/ ctx[48]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*value, labelToEdit*/ 65) {
						transition_in$1(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					transition_in$1(if_block0, 1);
					if_block0.m(span1, null);
				}
			} else if (if_block0) {
				group_outros$1();

				transition_out$1(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros$1();
			}

			if (!current || dirty[0] & /*value*/ 1 && span1_style_value !== (span1_style_value = "background-color: rgba(" + (/*score*/ ctx[54] && /*score*/ ctx[54] < 0
			? "128, 90, 213," + -/*score*/ ctx[54]
			: "239, 68, 60," + /*score*/ ctx[54]) + ")")) {
				attr(span1, "style", span1_style_value);
			}

			if (!current || dirty[0] & /*value, active*/ 33) {
				toggle_class(span1, "no-cat", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]);
			}

			if (!current || dirty[0] & /*value*/ 1) {
				toggle_class(span1, "hl", /*class_or_confidence*/ ctx[46] !== null);
			}

			if (/*class_or_confidence*/ ctx[46] && /*activeElementIndex*/ ctx[4] === /*i*/ ctx[48]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8(ctx);
					if_block1.c();
					if_block1.m(span2, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(if_block0);
			current = true;
		},
		o(local) {
			transition_out$1(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(span2);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (131:2) {#if show_legend}
function create_if_block_6(ctx) {
	let div;
	let if_block = /*_color_map*/ ctx[3] && create_if_block_7(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "class_or_confidence-legend svelte-1ozsnjl");
			attr(div, "data-testid", "highlighted-text:class_or_confidence-legend");
		},
		m(target, anchor) {
			insert$1(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (/*_color_map*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_7(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$1(div);
			}

			if (if_block) if_block.d();
		}
	};
}

// (136:4) {#if _color_map}
function create_if_block_7(ctx) {
	let each_1_anchor;
	let each_value_2 = ensure_array_like(Object.entries(/*_color_map*/ ctx[3]));
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty$1();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert$1(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*_color_map, handle_mouseover, handle_mouseout*/ 3080) {
				each_value_2 = ensure_array_like(Object.entries(/*_color_map*/ ctx[3]));
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) {
				detach$1(each_1_anchor);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

// (137:5) {#each Object.entries(_color_map) as [class_or_confidence, color], i}
function create_each_block_2(ctx) {
	let div;
	let t0_value = /*class_or_confidence*/ ctx[46] + "";
	let t0;
	let t1;
	let div_style_value;
	let mounted;
	let dispose;

	function mouseover_handler() {
		return /*mouseover_handler*/ ctx[15](/*class_or_confidence*/ ctx[46]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[16](/*class_or_confidence*/ ctx[46]);
	}

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space$1();
			attr(div, "role", "button");
			attr(div, "aria-roledescription", "Categories of highlighted text. Hover to see text with this class_or_confidence highlighted.");
			attr(div, "tabindex", "0");
			attr(div, "class", "class_or_confidence-label svelte-1ozsnjl");
			attr(div, "style", div_style_value = "background-color:" + /*color*/ ctx[52].secondary);
		},
		m(target, anchor) {
			insert$1(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (!mounted) {
				dispose = [
					listen(div, "mouseover", mouseover_handler),
					listen(div, "focus", focus_handler),
					listen(div, "mouseout", /*mouseout_handler*/ ctx[17]),
					listen(div, "blur", /*blur_handler*/ ctx[18])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*_color_map*/ 8 && t0_value !== (t0_value = /*class_or_confidence*/ ctx[46] + "")) set_data(t0, t0_value);

			if (dirty[0] & /*_color_map*/ 8 && div_style_value !== (div_style_value = "background-color:" + /*color*/ ctx[52].secondary)) {
				attr(div, "style", div_style_value);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$1(div);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

// (159:5) {#if line.trim() !== ""}
function create_if_block_2$1(ctx) {
	let span2;
	let span1;
	let span0;
	let t0_value = /*line*/ ctx[49] + "";
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;

	function focus_handler_1() {
		return /*focus_handler_1*/ ctx[20](/*i*/ ctx[48]);
	}

	function mouseover_handler_1() {
		return /*mouseover_handler_1*/ ctx[21](/*i*/ ctx[48]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[22](/*i*/ ctx[48]);
	}

	let if_block0 = !/*show_legend*/ ctx[1] && /*class_or_confidence*/ ctx[46] !== null && /*labelToEdit*/ ctx[6] !== /*i*/ ctx[48] && create_if_block_5(ctx);
	let if_block1 = /*labelToEdit*/ ctx[6] === /*i*/ ctx[48] && /*class_or_confidence*/ ctx[46] !== null && create_if_block_4$1(ctx);

	function click_handler_2() {
		return /*click_handler_2*/ ctx[26](/*class_or_confidence*/ ctx[46], /*i*/ ctx[48], /*token*/ ctx[45]);
	}

	function keydown_handler_2(...args) {
		return /*keydown_handler_2*/ ctx[27](/*class_or_confidence*/ ctx[46], /*i*/ ctx[48], /*token*/ ctx[45], ...args);
	}

	function focus_handler_2() {
		return /*focus_handler_2*/ ctx[28](/*i*/ ctx[48]);
	}

	function mouseover_handler_2() {
		return /*mouseover_handler_2*/ ctx[29](/*i*/ ctx[48]);
	}

	let if_block2 = /*class_or_confidence*/ ctx[46] !== null && create_if_block_3$1(ctx);

	return {
		c() {
			span2 = element("span");
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space$1();
			if (if_block0) if_block0.c();
			t2 = space$1();
			if (if_block1) if_block1.c();
			t3 = space$1();
			if (if_block2) if_block2.c();
			attr(span0, "class", "text svelte-1ozsnjl");
			attr(span0, "role", "button");
			attr(span0, "tabindex", "0");
			toggle_class(span0, "no-label", /*class_or_confidence*/ ctx[46] === null);
			attr(span1, "role", "button");
			attr(span1, "tabindex", "0");
			attr(span1, "class", "textspan svelte-1ozsnjl");
			toggle_class(span1, "no-cat", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]);
			toggle_class(span1, "hl", /*class_or_confidence*/ ctx[46] !== null);
			toggle_class(span1, "selectable", /*selectable*/ ctx[2]);

			set_style(span1, "background-color", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]
			? ""
			: /*class_or_confidence*/ ctx[46] && /*_color_map*/ ctx[3][/*class_or_confidence*/ ctx[46]]
				? /*_color_map*/ ctx[3][/*class_or_confidence*/ ctx[46]].secondary
				: "");

			attr(span2, "class", "text-class_or_confidence-container svelte-1ozsnjl");
		},
		m(target, anchor) {
			insert$1(target, span2, anchor);
			append(span2, span1);
			append(span1, span0);
			append(span0, t0);
			append(span1, t1);
			if (if_block0) if_block0.m(span1, null);
			append(span1, t2);
			if (if_block1) if_block1.m(span1, null);
			append(span2, t3);
			if (if_block2) if_block2.m(span2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span0, "keydown", /*keydown_handler*/ ctx[19]),
					listen(span0, "focus", focus_handler_1),
					listen(span0, "mouseover", mouseover_handler_1),
					listen(span0, "click", click_handler),
					listen(span1, "click", click_handler_2),
					listen(span1, "keydown", keydown_handler_2),
					listen(span1, "focus", focus_handler_2),
					listen(span1, "mouseover", mouseover_handler_2)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty[0] & /*value*/ 1) && t0_value !== (t0_value = /*line*/ ctx[49] + "")) set_data(t0, t0_value);

			if (!current || dirty[0] & /*value*/ 1) {
				toggle_class(span0, "no-label", /*class_or_confidence*/ ctx[46] === null);
			}

			if (!/*show_legend*/ ctx[1] && /*class_or_confidence*/ ctx[46] !== null && /*labelToEdit*/ ctx[6] !== /*i*/ ctx[48]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(span1, t2);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*labelToEdit*/ ctx[6] === /*i*/ ctx[48] && /*class_or_confidence*/ ctx[46] !== null) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*labelToEdit, value*/ 65) {
						transition_in$1(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_4$1(ctx);
					if_block1.c();
					transition_in$1(if_block1, 1);
					if_block1.m(span1, null);
				}
			} else if (if_block1) {
				group_outros$1();

				transition_out$1(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros$1();
			}

			if (!current || dirty[0] & /*value, active*/ 33) {
				toggle_class(span1, "no-cat", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]);
			}

			if (!current || dirty[0] & /*value*/ 1) {
				toggle_class(span1, "hl", /*class_or_confidence*/ ctx[46] !== null);
			}

			if (!current || dirty[0] & /*selectable*/ 4) {
				toggle_class(span1, "selectable", /*selectable*/ ctx[2]);
			}

			if (dirty[0] & /*value, active, _color_map*/ 41) {
				set_style(span1, "background-color", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]
				? ""
				: /*class_or_confidence*/ ctx[46] && /*_color_map*/ ctx[3][/*class_or_confidence*/ ctx[46]]
					? /*_color_map*/ ctx[3][/*class_or_confidence*/ ctx[46]].secondary
					: "");
			}

			if (/*class_or_confidence*/ ctx[46] !== null) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3$1(ctx);
					if_block2.c();
					if_block2.m(span2, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(if_block1);
			current = true;
		},
		o(local) {
			transition_out$1(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(span2);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (201:8) {#if !show_legend && class_or_confidence !== null && labelToEdit !== i}
function create_if_block_5(ctx) {
	let span;
	let t_value = /*class_or_confidence*/ ctx[46] + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[23](/*i*/ ctx[48]);
	}

	function keydown_handler_1() {
		return /*keydown_handler_1*/ ctx[24](/*i*/ ctx[48]);
	}

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "id", `label-tag-${/*i*/ ctx[48]}`);
			attr(span, "class", "label svelte-1ozsnjl");
			attr(span, "role", "button");
			attr(span, "tabindex", "0");

			set_style(span, "background-color", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]
			? ""
			: /*_color_map*/ ctx[3][/*class_or_confidence*/ ctx[46]].primary);
		},
		m(target, anchor) {
			insert$1(target, span, anchor);
			append(span, t);

			if (!mounted) {
				dispose = [
					listen(span, "click", click_handler_1),
					listen(span, "keydown", keydown_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*value*/ 1 && t_value !== (t_value = /*class_or_confidence*/ ctx[46] + "")) set_data(t, t_value);

			if (dirty[0] & /*value, active, _color_map*/ 41) {
				set_style(span, "background-color", /*class_or_confidence*/ ctx[46] === null || /*active*/ ctx[5] && /*active*/ ctx[5] !== /*class_or_confidence*/ ctx[46]
				? ""
				: /*_color_map*/ ctx[3][/*class_or_confidence*/ ctx[46]].primary);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$1(span);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

// (217:8) {#if labelToEdit === i && class_or_confidence !== null}
function create_if_block_4$1(ctx) {
	let t;
	let labelinput;
	let updating_value;
	let current;

	function labelinput_value_binding(value) {
		/*labelinput_value_binding*/ ctx[25](value);
	}

	let labelinput_props = {
		labelToEdit: /*labelToEdit*/ ctx[6],
		category: /*class_or_confidence*/ ctx[46],
		active: /*active*/ ctx[5],
		_color_map: /*_color_map*/ ctx[3],
		indexOfLabel: /*i*/ ctx[48],
		text: /*token*/ ctx[45],
		handleValueChange: /*handleValueChange*/ ctx[9]
	};

	if (/*value*/ ctx[0] !== void 0) {
		labelinput_props.value = /*value*/ ctx[0];
	}

	labelinput = new LabelInput({ props: labelinput_props });
	binding_callbacks$1.push(() => bind$1(labelinput, 'value', labelinput_value_binding));

	return {
		c() {
			t = text(" \n\t\t\t\t\t\t\t\t\t");
			create_component$1(labelinput.$$.fragment);
		},
		m(target, anchor) {
			insert$1(target, t, anchor);
			mount_component$1(labelinput, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const labelinput_changes = {};
			if (dirty[0] & /*labelToEdit*/ 64) labelinput_changes.labelToEdit = /*labelToEdit*/ ctx[6];
			if (dirty[0] & /*value*/ 1) labelinput_changes.category = /*class_or_confidence*/ ctx[46];
			if (dirty[0] & /*active*/ 32) labelinput_changes.active = /*active*/ ctx[5];
			if (dirty[0] & /*_color_map*/ 8) labelinput_changes._color_map = /*_color_map*/ ctx[3];
			if (dirty[0] & /*value*/ 1) labelinput_changes.text = /*token*/ ctx[45];

			if (!updating_value && dirty[0] & /*value*/ 1) {
				updating_value = true;
				labelinput_changes.value = /*value*/ ctx[0];
				add_flush_callback$1(() => updating_value = false);
			}

			labelinput.$set(labelinput_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(labelinput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(labelinput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
			}

			destroy_component$1(labelinput, detaching);
		}
	};
}

// (231:7) {#if class_or_confidence !== null}
function create_if_block_3$1(ctx) {
	let span;
	let mounted;
	let dispose;

	function click_handler_3() {
		return /*click_handler_3*/ ctx[30](/*i*/ ctx[48]);
	}

	function keydown_handler_3(...args) {
		return /*keydown_handler_3*/ ctx[31](/*i*/ ctx[48], ...args);
	}

	return {
		c() {
			span = element("span");
			span.textContent = "×";
			attr(span, "class", "label-clear-button svelte-1ozsnjl");
			attr(span, "role", "button");
			attr(span, "aria-roledescription", "Remove label from text");
			attr(span, "tabindex", "0");
		},
		m(target, anchor) {
			insert$1(target, span, anchor);

			if (!mounted) {
				dispose = [
					listen(span, "click", click_handler_3),
					listen(span, "keydown", keydown_handler_3)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) {
				detach$1(span);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

// (248:5) {#if j < splitTextByNewline(token).length - 1}
function create_if_block_1$1(ctx) {
	let br;

	return {
		c() {
			br = element("br");
		},
		m(target, anchor) {
			insert$1(target, br, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach$1(br);
			}
		}
	};
}

// (158:4) {#each splitTextByNewline(token) as line, j}
function create_each_block_1(ctx) {
	let show_if_1 = /*line*/ ctx[49].trim() !== "";
	let t;
	let show_if = /*j*/ ctx[51] < splitTextByNewline(/*token*/ ctx[45]).length - 1;
	let if_block1_anchor;
	let current;
	let if_block0 = show_if_1 && create_if_block_2$1(ctx);
	let if_block1 = show_if && create_if_block_1$1();

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space$1();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty$1();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert$1(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert$1(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*value*/ 1) show_if_1 = /*line*/ ctx[49].trim() !== "";

			if (show_if_1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*value*/ 1) {
						transition_in$1(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2$1(ctx);
					if_block0.c();
					transition_in$1(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros$1();

				transition_out$1(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros$1();
			}

			if (dirty[0] & /*value*/ 1) show_if = /*j*/ ctx[51] < splitTextByNewline(/*token*/ ctx[45]).length - 1;

			if (show_if) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1$1();
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(if_block0);
			current = true;
		},
		o(local) {
			transition_out$1(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
				detach$1(if_block1_anchor);
			}

			if (if_block0) if_block0.d(detaching);
			if (if_block1) if_block1.d(detaching);
		}
	};
}

// (157:3) {#each value as { token, class_or_confidence }
function create_each_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = ensure_array_like(splitTextByNewline(/*token*/ ctx[45]));
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out$1(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty$1();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert$1(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*value, removeHighlightedText, active, selectable, _color_map, handleSelect, labelToEdit, handleKeydownSelection, activeElementIndex, handleValueChange, show_legend*/ 13183) {
				each_value_1 = ensure_array_like(splitTextByNewline(/*token*/ ctx[45]));
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in$1(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in$1(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros$1();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros$1();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in$1(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out$1(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(each_1_anchor);
			}

			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[7] === "categories") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "container svelte-1ozsnjl");
		},
		m(target, anchor) {
			insert$1(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$1();

				transition_out$1(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$1();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$1(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(if_block);
			current = true;
		},
		o(local) {
			transition_out$1(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(div);
			}

			if_blocks[current_block_type_index].d();
		}
	};
}

function splitTextByNewline(text) {
	return text.split("\n");
}

function instance$1($$self, $$props, $$invalidate) {
	const browser = typeof document !== "undefined";
	let { value = [] } = $$props;
	let { show_legend = false } = $$props;
	let { color_map = {} } = $$props;
	let { selectable = false } = $$props;
	let activeElementIndex = -1;
	let ctx;
	let _color_map = {};
	let active = "";
	let selection;
	let labelToEdit = -1;

	onMount(() => {
		const mouseUpHandler = () => {
			selection = window.getSelection();
			handleSelectionComplete();
			window.removeEventListener("mouseup", mouseUpHandler);
		};

		window.addEventListener("mousedown", () => {
			window.addEventListener("mouseup", mouseUpHandler);
		});
	});

	async function handleTextSelected(startIndex, endIndex) {
		if (selection?.toString() && activeElementIndex !== -1 && value[activeElementIndex].token.toString().includes(selection.toString())) {
			const tempFlag = Symbol();
			const str = value[activeElementIndex].token;

			const [before, selected, after] = [
				str.substring(0, startIndex),
				str.substring(startIndex, endIndex),
				str.substring(endIndex)
			];

			let tempValue = [
				...value.slice(0, activeElementIndex),
				{ token: before, class_or_confidence: null },
				{
					token: selected,
					class_or_confidence: mode === "scores" ? 1 : "label",
					flag: tempFlag
				},
				{ token: after, class_or_confidence: null },
				...value.slice(activeElementIndex + 1)
			];

			// store the index of the new highlighted text element and remove the flag
			$$invalidate(6, labelToEdit = tempValue.findIndex(({ flag }) => flag === tempFlag));

			// tempValue[labelToEdit].pop();
			// remove elements with empty labels
			tempValue = tempValue.filter(item => item.token.trim() !== "");

			$$invalidate(0, value = tempValue.map(({ flag, ...rest }) => rest));
			handleValueChange();
			document.getElementById(`label-input-${labelToEdit}`)?.focus();
		}
	}

	const dispatch = createEventDispatcher();

	function removeHighlightedText(index) {
		if (!value || index < 0 || index >= value.length) return;
		$$invalidate(0, value[index].class_or_confidence = null, value);
		$$invalidate(0, value = merge_elements(value, "equal"));
		handleValueChange();
		window.getSelection()?.empty();
	}

	function handleValueChange() {
		dispatch("change", value);
		$$invalidate(6, labelToEdit = -1);

		// reset legend color maps
		if (show_legend) {
			$$invalidate(14, color_map = {});
			$$invalidate(3, _color_map = {});
		}
	}

	let mode;

	function handle_mouseover(label) {
		$$invalidate(5, active = label);
	}

	function handle_mouseout() {
		$$invalidate(5, active = "");
	}

	async function handleKeydownSelection(event) {
		selection = window.getSelection();

		if (event.key === "Enter") {
			handleSelectionComplete();
		}
	}

	function handleSelectionComplete() {
		if (selection && selection?.toString().trim() !== "") {
			const textBeginningIndex = selection.getRangeAt(0).startOffset;
			const textEndIndex = selection.getRangeAt(0).endOffset;
			handleTextSelected(textBeginningIndex, textEndIndex);
		}
	}

	function handleSelect(i, text, class_or_confidence) {
		dispatch("select", {
			index: i,
			value: [text, class_or_confidence]
		});
	}

	const mouseover_handler = class_or_confidence => handle_mouseover(class_or_confidence);
	const focus_handler = class_or_confidence => handle_mouseover(class_or_confidence);
	const mouseout_handler = () => handle_mouseout();
	const blur_handler = () => handle_mouseout();
	const keydown_handler = e => handleKeydownSelection(e);
	const focus_handler_1 = i => $$invalidate(4, activeElementIndex = i);
	const mouseover_handler_1 = i => $$invalidate(4, activeElementIndex = i);
	const click_handler = i => $$invalidate(6, labelToEdit = i);
	const click_handler_1 = i => $$invalidate(6, labelToEdit = i);
	const keydown_handler_1 = i => $$invalidate(6, labelToEdit = i);

	function labelinput_value_binding(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	const click_handler_2 = (class_or_confidence, i, token) => {
		if (class_or_confidence !== null) {
			handleSelect(i, token, class_or_confidence);
		}
	};

	const keydown_handler_2 = (class_or_confidence, i, token, e) => {
		if (class_or_confidence !== null) {
			$$invalidate(6, labelToEdit = i);
			handleSelect(i, token, class_or_confidence);
		} else {
			handleKeydownSelection(e);
		}
	};

	const focus_handler_2 = i => $$invalidate(4, activeElementIndex = i);
	const mouseover_handler_2 = i => $$invalidate(4, activeElementIndex = i);
	const click_handler_3 = i => removeHighlightedText(i);

	const keydown_handler_3 = (i, event) => {
		if (event.key === "Enter") {
			removeHighlightedText(i);
		}
	};

	function labelinput_value_binding_1(value$1) {
		value = value$1;
		$$invalidate(0, value);
	}

	const mouseover_handler_3 = i => $$invalidate(4, activeElementIndex = i);
	const focus_handler_3 = i => $$invalidate(4, activeElementIndex = i);
	const click_handler_4 = i => $$invalidate(6, labelToEdit = i);

	const keydown_handler_4 = (i, e) => {
		if (e.key === "Enter") {
			$$invalidate(6, labelToEdit = i);
		}
	};

	const click_handler_5 = i => removeHighlightedText(i);

	const keydown_handler_5 = (i, event) => {
		if (event.key === "Enter") {
			removeHighlightedText(i);
		}
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(1, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(14, color_map = $$props.color_map);
		if ('selectable' in $$props) $$invalidate(2, selectable = $$props.selectable);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*color_map, value, _color_map*/ 16393) {
			{
				if (!color_map) {
					$$invalidate(14, color_map = {});
				}

				if (value.length > 0) {
					for (let entry of value) {
						if (entry.class_or_confidence !== null) {
							if (typeof entry.class_or_confidence === "string") {
								$$invalidate(7, mode = "categories");

								if (!(entry.class_or_confidence in color_map)) {
									let color = get_next_color(Object.keys(color_map).length);
									$$invalidate(14, color_map[entry.class_or_confidence] = color, color_map);
								}
							} else {
								$$invalidate(7, mode = "scores");
							}
						}
					}
				}

				correct_color_map(color_map, _color_map, browser, ctx);
			}
		}
	};

	return [
		value,
		show_legend,
		selectable,
		_color_map,
		activeElementIndex,
		active,
		labelToEdit,
		mode,
		removeHighlightedText,
		handleValueChange,
		handle_mouseover,
		handle_mouseout,
		handleKeydownSelection,
		handleSelect,
		color_map,
		mouseover_handler,
		focus_handler,
		mouseout_handler,
		blur_handler,
		keydown_handler,
		focus_handler_1,
		mouseover_handler_1,
		click_handler,
		click_handler_1,
		keydown_handler_1,
		labelinput_value_binding,
		click_handler_2,
		keydown_handler_2,
		focus_handler_2,
		mouseover_handler_2,
		click_handler_3,
		keydown_handler_3,
		labelinput_value_binding_1,
		mouseover_handler_3,
		focus_handler_3,
		click_handler_4,
		keydown_handler_4,
		click_handler_5,
		keydown_handler_5
	];
}

class InteractiveHighlightedtext extends SvelteComponent$1 {
	constructor(options) {
		super();

		init$1(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal$1,
			{
				value: 0,
				show_legend: 1,
				color_map: 14,
				selectable: 2
			},
			null,
			[-1, -1]
		);
	}
}

const InteractiveHighlightedText = InteractiveHighlightedtext;

/* home/runner/work/gradio/gradio/js/highlightedtext/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	add_flush_callback,
	assign,
	bind,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_else_block_1(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: /*interactive*/ ctx[12] ? "dashed" : "solid",
				test_id: "highlighted-text",
				visible: /*visible*/ ctx[5],
				elem_id: /*elem_id*/ ctx[3],
				elem_classes: /*elem_classes*/ ctx[4],
				padding: false,
				container: /*container*/ ctx[8],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block_changes = {};
			if (dirty & /*interactive*/ 4096) block_changes.variant = /*interactive*/ ctx[12] ? "dashed" : "solid";
			if (dirty & /*visible*/ 32) block_changes.visible = /*visible*/ ctx[5];
			if (dirty & /*elem_id*/ 8) block_changes.elem_id = /*elem_id*/ ctx[3];
			if (dirty & /*elem_classes*/ 16) block_changes.elem_classes = /*elem_classes*/ ctx[4];
			if (dirty & /*container*/ 256) block_changes.container = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty & /*$$scope, _selectable, show_legend, color_map, value, gradio, label, container, loading_status*/ 534983) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

// (41:0) {#if !interactive}
function create_if_block(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: "solid",
				test_id: "highlighted-text",
				visible: /*visible*/ ctx[5],
				elem_id: /*elem_id*/ ctx[3],
				elem_classes: /*elem_classes*/ ctx[4],
				padding: false,
				container: /*container*/ ctx[8],
				scale: /*scale*/ ctx[9],
				min_width: /*min_width*/ ctx[10],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block_changes = {};
			if (dirty & /*visible*/ 32) block_changes.visible = /*visible*/ ctx[5];
			if (dirty & /*elem_id*/ 8) block_changes.elem_id = /*elem_id*/ ctx[3];
			if (dirty & /*elem_classes*/ 16) block_changes.elem_classes = /*elem_classes*/ ctx[4];
			if (dirty & /*container*/ 256) block_changes.container = /*container*/ ctx[8];
			if (dirty & /*scale*/ 512) block_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*min_width*/ 1024) block_changes.min_width = /*min_width*/ ctx[10];

			if (dirty & /*$$scope, _selectable, value, show_legend, color_map, gradio, label, container, loading_status*/ 534983) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

// (98:2) {#if label}
function create_if_block_4(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				Icon: TextHighlight,
				label: /*label*/ ctx[7],
				float: false,
				disable: /*container*/ ctx[8] === false
			}
		});

	return {
		c() {
			create_component(blocklabel.$$.fragment);
		},
		m(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*label*/ 128) blocklabel_changes.label = /*label*/ ctx[7];
			if (dirty & /*container*/ 256) blocklabel_changes.disable = /*container*/ ctx[8] === false;
			blocklabel.$set(blocklabel_changes);
		},
		i(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};
}

// (115:2) {:else}
function create_else_block_2(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(empty_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 524288) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(empty_1, detaching);
		}
	};
}

// (107:2) {#if value}
function create_if_block_3(ctx) {
	let interactivehighlightedtext;
	let updating_value;
	let current;

	function interactivehighlightedtext_value_binding(value) {
		/*interactivehighlightedtext_value_binding*/ ctx[17](value);
	}

	let interactivehighlightedtext_props = {
		selectable: /*_selectable*/ ctx[11],
		show_legend: /*show_legend*/ ctx[6],
		color_map: /*color_map*/ ctx[1]
	};

	if (/*value*/ ctx[0] !== void 0) {
		interactivehighlightedtext_props.value = /*value*/ ctx[0];
	}

	interactivehighlightedtext = new InteractiveHighlightedText({ props: interactivehighlightedtext_props });
	binding_callbacks.push(() => bind(interactivehighlightedtext, 'value', interactivehighlightedtext_value_binding));
	interactivehighlightedtext.$on("change", /*change_handler*/ ctx[18]);

	return {
		c() {
			create_component(interactivehighlightedtext.$$.fragment);
		},
		m(target, anchor) {
			mount_component(interactivehighlightedtext, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const interactivehighlightedtext_changes = {};
			if (dirty & /*_selectable*/ 2048) interactivehighlightedtext_changes.selectable = /*_selectable*/ ctx[11];
			if (dirty & /*show_legend*/ 64) interactivehighlightedtext_changes.show_legend = /*show_legend*/ ctx[6];
			if (dirty & /*color_map*/ 2) interactivehighlightedtext_changes.color_map = /*color_map*/ ctx[1];

			if (!updating_value && dirty & /*value*/ 1) {
				updating_value = true;
				interactivehighlightedtext_changes.value = /*value*/ ctx[0];
				add_flush_callback(() => updating_value = false);
			}

			interactivehighlightedtext.$set(interactivehighlightedtext_changes);
		},
		i(local) {
			if (current) return;
			transition_in(interactivehighlightedtext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(interactivehighlightedtext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(interactivehighlightedtext, detaching);
		}
	};
}

// (116:3) <Empty>
function create_default_slot_3(ctx) {
	let texthighlight;
	let current;
	texthighlight = new TextHighlight({});

	return {
		c() {
			create_component(texthighlight.$$.fragment);
		},
		m(target, anchor) {
			mount_component(texthighlight, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(texthighlight.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(texthighlight.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(texthighlight, detaching);
		}
	};
}

// (82:1) <Block   variant={interactive ? "dashed" : "solid"}   test_id="highlighted-text"   {visible}   {elem_id}   {elem_classes}   padding={false}   {container}   {scale}   {min_width}  >
function create_default_slot_2(ctx) {
	let statustracker;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[2].autoscroll },
		/*loading_status*/ ctx[13],
		{ i18n: /*gradio*/ ctx[2].i18n }
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });
	let if_block0 = /*label*/ ctx[7] && create_if_block_4(ctx);
	const if_block_creators = [create_if_block_3, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*value*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 8196)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 4 && { autoscroll: /*gradio*/ ctx[2].autoscroll },
					dirty & /*loading_status*/ 8192 && get_spread_object(/*loading_status*/ ctx[13]),
					dirty & /*gradio*/ 4 && { i18n: /*gradio*/ ctx[2].i18n }
				])
			: {};

			statustracker.$set(statustracker_changes);

			if (/*label*/ ctx[7]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
				detach(if_block1_anchor);
			}

			destroy_component(statustracker, detaching);
			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (58:2) {#if label}
function create_if_block_2(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				Icon: TextHighlight,
				label: /*label*/ ctx[7],
				float: false,
				disable: /*container*/ ctx[8] === false
			}
		});

	return {
		c() {
			create_component(blocklabel.$$.fragment);
		},
		m(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*label*/ 128) blocklabel_changes.label = /*label*/ ctx[7];
			if (dirty & /*container*/ 256) blocklabel_changes.disable = /*container*/ ctx[8] === false;
			blocklabel.$set(blocklabel_changes);
		},
		i(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};
}

// (75:2) {:else}
function create_else_block(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(empty_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(empty_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 524288) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(empty_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(empty_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(empty_1, detaching);
		}
	};
}

// (67:2) {#if value}
function create_if_block_1(ctx) {
	let statichighlightedtext;
	let current;

	statichighlightedtext = new StaticHighlightedText({
			props: {
				selectable: /*_selectable*/ ctx[11],
				value: /*value*/ ctx[0],
				show_legend: /*show_legend*/ ctx[6],
				color_map: /*color_map*/ ctx[1]
			}
		});

	statichighlightedtext.$on("select", /*select_handler*/ ctx[16]);

	return {
		c() {
			create_component(statichighlightedtext.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statichighlightedtext, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statichighlightedtext_changes = {};
			if (dirty & /*_selectable*/ 2048) statichighlightedtext_changes.selectable = /*_selectable*/ ctx[11];
			if (dirty & /*value*/ 1) statichighlightedtext_changes.value = /*value*/ ctx[0];
			if (dirty & /*show_legend*/ 64) statichighlightedtext_changes.show_legend = /*show_legend*/ ctx[6];
			if (dirty & /*color_map*/ 2) statichighlightedtext_changes.color_map = /*color_map*/ ctx[1];
			statichighlightedtext.$set(statichighlightedtext_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statichighlightedtext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statichighlightedtext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(statichighlightedtext, detaching);
		}
	};
}

// (76:3) <Empty>
function create_default_slot_1(ctx) {
	let texthighlight;
	let current;
	texthighlight = new TextHighlight({});

	return {
		c() {
			create_component(texthighlight.$$.fragment);
		},
		m(target, anchor) {
			mount_component(texthighlight, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(texthighlight.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(texthighlight.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(texthighlight, detaching);
		}
	};
}

// (42:1) <Block   variant={"solid"}   test_id="highlighted-text"   {visible}   {elem_id}   {elem_classes}   padding={false}   {container}   {scale}   {min_width}  >
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[2].autoscroll },
		{ i18n: /*gradio*/ ctx[2].i18n },
		/*loading_status*/ ctx[13]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });
	let if_block0 = /*label*/ ctx[7] && create_if_block_2(ctx);
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*value*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 8196)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 4 && { autoscroll: /*gradio*/ ctx[2].autoscroll },
					dirty & /*gradio*/ 4 && { i18n: /*gradio*/ ctx[2].i18n },
					dirty & /*loading_status*/ 8192 && get_spread_object(/*loading_status*/ ctx[13])
				])
			: {};

			statustracker.$set(statustracker_changes);

			if (/*label*/ ctx[7]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 128) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
				detach(if_block1_anchor);
			}

			destroy_component(statustracker, detaching);
			if (if_block0) if_block0.d(detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*interactive*/ ctx[12]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { gradio } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value } = $$props;
	let old_value;
	let { show_legend } = $$props;
	let { color_map = {} } = $$props;
	let { label = gradio.i18n("highlighted_text.highlighted_text") } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { _selectable = false } = $$props;
	let { combine_adjacent = false } = $$props;
	let { interactive } = $$props;
	let { loading_status } = $$props;
	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	function interactivehighlightedtext_value_binding(value$1) {
		value = value$1;
		($$invalidate(0, value), $$invalidate(14, combine_adjacent));
	}

	const change_handler = () => gradio.dispatch("change");

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(2, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(3, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(4, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(5, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(6, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(1, color_map = $$props.color_map);
		if ('label' in $$props) $$invalidate(7, label = $$props.label);
		if ('container' in $$props) $$invalidate(8, container = $$props.container);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(10, min_width = $$props.min_width);
		if ('_selectable' in $$props) $$invalidate(11, _selectable = $$props._selectable);
		if ('combine_adjacent' in $$props) $$invalidate(14, combine_adjacent = $$props.combine_adjacent);
		if ('interactive' in $$props) $$invalidate(12, interactive = $$props.interactive);
		if ('loading_status' in $$props) $$invalidate(13, loading_status = $$props.loading_status);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color_map*/ 2) {
			if (!color_map && Object.keys(color_map).length) {
				$$invalidate(1, color_map);
			}
		}

		if ($$self.$$.dirty & /*value, combine_adjacent*/ 16385) {
			if (value && combine_adjacent) {
				$$invalidate(0, value = merge_elements(value, "equal"));
			}
		}

		if ($$self.$$.dirty & /*value, old_value, gradio*/ 32773) {
			{
				if (value !== old_value) {
					$$invalidate(15, old_value = value);
					gradio.dispatch("change");
				}
			}
		}
	};

	return [
		value,
		color_map,
		gradio,
		elem_id,
		elem_classes,
		visible,
		show_legend,
		label,
		container,
		scale,
		min_width,
		_selectable,
		interactive,
		loading_status,
		combine_adjacent,
		old_value,
		select_handler,
		interactivehighlightedtext_value_binding,
		change_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			gradio: 2,
			elem_id: 3,
			elem_classes: 4,
			visible: 5,
			value: 0,
			show_legend: 6,
			color_map: 1,
			label: 7,
			container: 8,
			scale: 9,
			min_width: 10,
			_selectable: 11,
			combine_adjacent: 14,
			interactive: 12,
			loading_status: 13
		});
	}
}

export { InteractiveHighlightedText as BaseInteractiveHighlightedText, StaticHighlightedText as BaseStaticHighlightedText, Index as default };
//# sourceMappingURL=Index-5efeb121.js.map
