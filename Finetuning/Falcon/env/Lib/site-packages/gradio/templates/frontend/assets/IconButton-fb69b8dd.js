import './Button-05bf7cea.js';

/* home/runner/work/gradio/gradio/js/atoms/src/IconButton.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	attr,
	bubble,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*label*/ ctx[1]);
			attr(span, "class", "svelte-p87ime");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) {
				detach(span);
			}
		}
	};
}

function create_fragment(ctx) {
	let button;
	let t;
	let div;
	let icon;
	let current;
	let mounted;
	let dispose;
	let if_block = /*show_label*/ ctx[2] && create_if_block(ctx);
	icon = new /*Icon*/ ctx[0]({});

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			div = element("div");
			create_component(icon.$$.fragment);
			attr(div, "class", "svelte-p87ime");
			toggle_class(div, "small", /*size*/ ctx[4] === "small");
			toggle_class(div, "large", /*size*/ ctx[4] === "large");
			button.disabled = /*disabled*/ ctx[7];
			attr(button, "aria-label", /*label*/ ctx[1]);
			attr(button, "aria-haspopup", /*hasPopup*/ ctx[8]);
			attr(button, "title", /*label*/ ctx[1]);
			attr(button, "class", "svelte-p87ime");
			toggle_class(button, "pending", /*pending*/ ctx[3]);
			toggle_class(button, "padded", /*padded*/ ctx[5]);
			toggle_class(button, "highlight", /*highlight*/ ctx[6]);
			toggle_class(button, "transparent", /*transparent*/ ctx[9]);

			set_style(button, "color", !/*disabled*/ ctx[7] && /*_color*/ ctx[11]
			? /*_color*/ ctx[11]
			: "var(--block-label-text-color)");

			set_style(button, "--bg-color", !/*disabled*/ ctx[7] ? /*background*/ ctx[10] : "auto");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);
			append(button, div);
			mount_component(icon, div, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*click_handler*/ ctx[13]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*show_label*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*size*/ 16) {
				toggle_class(div, "small", /*size*/ ctx[4] === "small");
			}

			if (!current || dirty & /*size*/ 16) {
				toggle_class(div, "large", /*size*/ ctx[4] === "large");
			}

			if (!current || dirty & /*disabled*/ 128) {
				button.disabled = /*disabled*/ ctx[7];
			}

			if (!current || dirty & /*label*/ 2) {
				attr(button, "aria-label", /*label*/ ctx[1]);
			}

			if (!current || dirty & /*hasPopup*/ 256) {
				attr(button, "aria-haspopup", /*hasPopup*/ ctx[8]);
			}

			if (!current || dirty & /*label*/ 2) {
				attr(button, "title", /*label*/ ctx[1]);
			}

			if (!current || dirty & /*pending*/ 8) {
				toggle_class(button, "pending", /*pending*/ ctx[3]);
			}

			if (!current || dirty & /*padded*/ 32) {
				toggle_class(button, "padded", /*padded*/ ctx[5]);
			}

			if (!current || dirty & /*highlight*/ 64) {
				toggle_class(button, "highlight", /*highlight*/ ctx[6]);
			}

			if (!current || dirty & /*transparent*/ 512) {
				toggle_class(button, "transparent", /*transparent*/ ctx[9]);
			}

			if (dirty & /*disabled, _color*/ 2176) {
				set_style(button, "color", !/*disabled*/ ctx[7] && /*_color*/ ctx[11]
				? /*_color*/ ctx[11]
				: "var(--block-label-text-color)");
			}

			if (dirty & /*disabled, background*/ 1152) {
				set_style(button, "--bg-color", !/*disabled*/ ctx[7] ? /*background*/ ctx[10] : "auto");
			}
		},
		i(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(button);
			}

			if (if_block) if_block.d();
			destroy_component(icon);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let _color;
	let { Icon } = $$props;
	let { label = "" } = $$props;
	let { show_label = false } = $$props;
	let { pending = false } = $$props;
	let { size = "small" } = $$props;
	let { padded = true } = $$props;
	let { highlight = false } = $$props;
	let { disabled = false } = $$props;
	let { hasPopup = false } = $$props;
	let { color = "var(--block-label-text-color)" } = $$props;
	let { transparent = false } = $$props;
	let { background = "var(--background-fill-primary)" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('Icon' in $$props) $$invalidate(0, Icon = $$props.Icon);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
		if ('pending' in $$props) $$invalidate(3, pending = $$props.pending);
		if ('size' in $$props) $$invalidate(4, size = $$props.size);
		if ('padded' in $$props) $$invalidate(5, padded = $$props.padded);
		if ('highlight' in $$props) $$invalidate(6, highlight = $$props.highlight);
		if ('disabled' in $$props) $$invalidate(7, disabled = $$props.disabled);
		if ('hasPopup' in $$props) $$invalidate(8, hasPopup = $$props.hasPopup);
		if ('color' in $$props) $$invalidate(12, color = $$props.color);
		if ('transparent' in $$props) $$invalidate(9, transparent = $$props.transparent);
		if ('background' in $$props) $$invalidate(10, background = $$props.background);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*highlight, color*/ 4160) {
			$$invalidate(11, _color = highlight ? "var(--color-accent)" : color);
		}
	};

	return [
		Icon,
		label,
		show_label,
		pending,
		size,
		padded,
		highlight,
		disabled,
		hasPopup,
		transparent,
		background,
		_color,
		color,
		click_handler
	];
}

class IconButton extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			Icon: 0,
			label: 1,
			show_label: 2,
			pending: 3,
			size: 4,
			padded: 5,
			highlight: 6,
			disabled: 7,
			hasPopup: 8,
			color: 12,
			transparent: 9,
			background: 10
		});
	}
}

export { IconButton as I };
//# sourceMappingURL=IconButton-fb69b8dd.js.map
