import { a as TABS } from './Tabs-71f34096.js';
import Index$1 from './Index-24a33ce1.js';
import './Index-2cec2c56.js';
import './index-5550136d.js';
import './svelte/svelte.js';

const TabItem_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/tabitem/shared/TabItem.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	attr,
	component_subscribe,
	create_component: create_component$1,
	create_slot: create_slot$1,
	destroy_component: destroy_component$1,
	detach,
	element,
	get_all_dirty_from_scope: get_all_dirty_from_scope$1,
	get_slot_changes: get_slot_changes$1,
	init: init$1,
	insert,
	mount_component: mount_component$1,
	safe_not_equal: safe_not_equal$1,
	set_style,
	transition_in: transition_in$1,
	transition_out: transition_out$1,
	update_slot_base: update_slot_base$1
} = window.__gradio__svelte__internal;
const { getContext, onMount, createEventDispatcher, tick } = window.__gradio__svelte__internal;
function create_default_slot$1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot$1(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base$1(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope$1(/*$$scope*/ ctx[9])
						: get_slot_changes$1(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out$1(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let div;
	let column;
	let div_class_value;
	let current;

	column = new Index$1({
			props: {
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			create_component$1(column.$$.fragment);
			attr(div, "id", /*elem_id*/ ctx[0]);
			attr(div, "class", div_class_value = "tabitem " + /*elem_classes*/ ctx[1].join(' ') + " svelte-19hvt5v");

			set_style(div, "display", /*$selected_tab*/ ctx[3] === /*id*/ ctx[2]
			? "block"
			: "none");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component$1(column, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const column_changes = {};

			if (dirty & /*$$scope*/ 512) {
				column_changes.$$scope = { dirty, ctx };
			}

			column.$set(column_changes);

			if (!current || dirty & /*elem_id*/ 1) {
				attr(div, "id", /*elem_id*/ ctx[0]);
			}

			if (!current || dirty & /*elem_classes*/ 2 && div_class_value !== (div_class_value = "tabitem " + /*elem_classes*/ ctx[1].join(' ') + " svelte-19hvt5v")) {
				attr(div, "class", div_class_value);
			}

			if (dirty & /*$selected_tab, id*/ 12) {
				set_style(div, "display", /*$selected_tab*/ ctx[3] === /*id*/ ctx[2]
				? "block"
				: "none");
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(column.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(column.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			destroy_component$1(column);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $selected_tab_index;
	let $selected_tab;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { name } = $$props;
	let { id = {} } = $$props;
	const dispatch = createEventDispatcher();
	const { register_tab, unregister_tab, selected_tab, selected_tab_index } = getContext(TABS);
	component_subscribe($$self, selected_tab, value => $$invalidate(3, $selected_tab = value));
	component_subscribe($$self, selected_tab_index, value => $$invalidate(7, $selected_tab_index = value));
	let tab_index = register_tab({ name, id, elem_id });

	onMount(() => {
		return () => unregister_tab({ name, id, elem_id });
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('name' in $$props) $$invalidate(6, name = $$props.name);
		if ('id' in $$props) $$invalidate(2, id = $$props.id);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selected_tab_index, name*/ 192) {
			$selected_tab_index === tab_index && tick().then(() => dispatch("select", { value: name, index: tab_index }));
		}
	};

	return [
		elem_id,
		elem_classes,
		id,
		$selected_tab,
		selected_tab,
		selected_tab_index,
		name,
		$selected_tab_index,
		slots,
		$$scope
	];
}

class TabItem extends SvelteComponent$1 {
	constructor(options) {
		super();

		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, {
			elem_id: 0,
			elem_classes: 1,
			name: 6,
			id: 2
		});
	}
}

/* home/runner/work/gradio/gradio/js/tabitem/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	create_component,
	create_slot,
	destroy_component,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out,
	update_slot_base
} = window.__gradio__svelte__internal;
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let tabitem;
	let current;

	tabitem = new TabItem({
			props: {
				elem_id: /*elem_id*/ ctx[0],
				elem_classes: /*elem_classes*/ ctx[1],
				name: /*label*/ ctx[2],
				id: /*id*/ ctx[3],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	tabitem.$on("select", /*select_handler*/ ctx[6]);

	return {
		c() {
			create_component(tabitem.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tabitem, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const tabitem_changes = {};
			if (dirty & /*elem_id*/ 1) tabitem_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*elem_classes*/ 2) tabitem_changes.elem_classes = /*elem_classes*/ ctx[1];
			if (dirty & /*label*/ 4) tabitem_changes.name = /*label*/ ctx[2];
			if (dirty & /*id*/ 8) tabitem_changes.id = /*id*/ ctx[3];

			if (dirty & /*$$scope*/ 128) {
				tabitem_changes.$$scope = { dirty, ctx };
			}

			tabitem.$set(tabitem_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tabitem.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tabitem.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tabitem, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { label } = $$props;
	let { id } = $$props;
	let { gradio } = $$props;
	const select_handler = ({ detail }) => gradio.dispatch("select", detail);

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(1, elem_classes = $$props.elem_classes);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
		if ('gradio' in $$props) $$invalidate(4, gradio = $$props.gradio);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [elem_id, elem_classes, label, id, gradio, slots, select_handler, $$scope];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			elem_classes: 1,
			label: 2,
			id: 3,
			gradio: 4
		});
	}
}

export { Index as default };
//# sourceMappingURL=Index-83f3dcd3.js.map
