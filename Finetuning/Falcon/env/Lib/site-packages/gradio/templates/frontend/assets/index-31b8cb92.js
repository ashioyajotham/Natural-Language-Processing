import { U as Upload } from './Upload-02e4db12.js';
import { M as ModifyUpload } from './ModifyUpload-772201f4.js';
import { B as Block } from './Button-05bf7cea.js';
import { B as BlockLabel } from './BlockLabel-09bb0248.js';
import { S as Static } from './Index-2cec2c56.js';
import { T as Trim, P as Pause, a as Play, V as Video$2, S as SelectSource } from './SelectSource-a1604b96.js';
import { W as Webcam } from './ImageUploader-0e8da2b3.js';
import { p as prepare_files, u as upload, n as normalise_file } from './index-5550136d.js';
import './Example.svelte_svelte_type_style_lang-6aeed26b.js';
import { l as loadFfmpeg, t as trimVideo, V as Video$1, p as prettyBytes, a as playable } from './Example-25a38da7.js';
export { E as BaseExample, b as loaded } from './Example-25a38da7.js';
import { U as Undo } from './Undo-6c110254.js';
import { I as IconButton } from './IconButton-fb69b8dd.js';
import { E as Empty } from './Empty-2eeff83e.js';
import { S as ShareButton } from './ShareButton-b044e1b5.js';
import { D as Download } from './Download-ea83bae3.js';
import { u as uploadToHuggingFace } from './utils-8f25e669.js';
import { U as UploadText } from './UploadText-7206a31c.js';
/* empty css                                                     */import './Clear-9760deed.js';
import './Upload-8f4bfd80.js';
import './Image-6cbf81d1.js';
import './DropdownArrow-ebaf45e0.js';
import './svelte/svelte.js';
import './file-url-1a9970c0.js';

/* home/runner/work/gradio/gradio/js/icons/src/Maximise.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$6,
	append: append$5,
	attr: attr$5,
	detach: detach$6,
	init: init$6,
	insert: insert$6,
	noop: noop$4,
	safe_not_equal: safe_not_equal$6,
	svg_element
} = window.__gradio__svelte__internal;
function create_fragment$6(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr$5(path, "d", "M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3");
			attr$5(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr$5(svg, "width", "100%");
			attr$5(svg, "height", "100%");
			attr$5(svg, "viewBox", "0 0 24 24");
			attr$5(svg, "fill", "none");
			attr$5(svg, "stroke", "currentColor");
			attr$5(svg, "stroke-width", "1.5");
			attr$5(svg, "stroke-linecap", "round");
			attr$5(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert$6(target, svg, anchor);
			append$5(svg, path);
		},
		p: noop$4,
		i: noop$4,
		o: noop$4,
		d(detaching) {
			if (detaching) {
				detach$6(svg);
			}
		}
	};
}

class Maximise extends SvelteComponent$6 {
	constructor(options) {
		super();
		init$6(this, options, null, create_fragment$6, safe_not_equal$6, {});
	}
}

const VideoTimeline_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/shared/VideoTimeline.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$5,
	append: append$4,
	attr: attr$4,
	destroy_block,
	detach: detach$5,
	element: element$4,
	ensure_array_like,
	init: init$5,
	insert: insert$5,
	listen: listen$2,
	noop: noop$3,
	run_all: run_all$2,
	safe_not_equal: safe_not_equal$5,
	set_style,
	space: space$5,
	src_url_equal: src_url_equal$1,
	update_keyed_each
} = window.__gradio__svelte__internal;
const { onMount: onMount$1, onDestroy } = window.__gradio__svelte__internal;
function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[22] = i;
	return child_ctx;
}

// (128:1) {:else}
function create_else_block$5(ctx) {
	let div1;
	let button0;
	let t0;
	let div0;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t2;
	let button1;
	let mounted;
	let dispose;
	let each_value = ensure_array_like(/*thumbnails*/ ctx[1]);
	const get_key = ctx => /*i*/ ctx[22];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div1 = element$4("div");
			button0 = element$4("button");
			t0 = space$5();
			div0 = element$4("div");
			t1 = space$5();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space$5();
			button1 = element$4("button");
			attr$4(button0, "class", "handle left svelte-10c4beq");
			set_style(button0, "left", /*leftHandlePosition*/ ctx[2] + "%");
			attr$4(div0, "class", "opaque-layer svelte-10c4beq");
			set_style(div0, "left", /*leftHandlePosition*/ ctx[2] + "%");
			set_style(div0, "right", 100 - /*rightHandlePosition*/ ctx[3] + "%");
			attr$4(button1, "class", "handle right svelte-10c4beq");
			set_style(button1, "left", /*rightHandlePosition*/ ctx[3] + "%");
			attr$4(div1, "id", "timeline");
			attr$4(div1, "class", "thumbnail-wrapper svelte-10c4beq");
		},
		m(target, anchor) {
			insert$5(target, div1, anchor);
			append$4(div1, button0);
			append$4(div1, t0);
			append$4(div1, div0);
			append$4(div1, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div1, null);
				}
			}

			append$4(div1, t2);
			append$4(div1, button1);

			if (!mounted) {
				dispose = [
					listen$2(button0, "mousedown", /*mousedown_handler*/ ctx[10]),
					listen$2(button0, "blur", /*stopDragging*/ ctx[5]),
					listen$2(button0, "keydown", /*keydown_handler*/ ctx[11]),
					listen$2(button1, "mousedown", /*mousedown_handler_1*/ ctx[12]),
					listen$2(button1, "blur", /*stopDragging*/ ctx[5]),
					listen$2(button1, "keydown", /*keydown_handler_1*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*leftHandlePosition*/ 4) {
				set_style(button0, "left", /*leftHandlePosition*/ ctx[2] + "%");
			}

			if (dirty & /*leftHandlePosition*/ 4) {
				set_style(div0, "left", /*leftHandlePosition*/ ctx[2] + "%");
			}

			if (dirty & /*rightHandlePosition*/ 8) {
				set_style(div0, "right", 100 - /*rightHandlePosition*/ ctx[3] + "%");
			}

			if (dirty & /*thumbnails*/ 2) {
				each_value = ensure_array_like(/*thumbnails*/ ctx[1]);
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div1, destroy_block, create_each_block, t2, get_each_context);
			}

			if (dirty & /*rightHandlePosition*/ 8) {
				set_style(button1, "left", /*rightHandlePosition*/ ctx[3] + "%");
			}
		},
		d(detaching) {
			if (detaching) {
				detach$5(div1);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			mounted = false;
			run_all$2(dispose);
		}
	};
}

// (124:1) {#if loadingTimeline}
function create_if_block$5(ctx) {
	let div;

	return {
		c() {
			div = element$4("div");
			div.innerHTML = `<span aria-label="loading timeline" class="loader svelte-10c4beq"></span>`;
			attr$4(div, "class", "load-wrap svelte-10c4beq");
		},
		m(target, anchor) {
			insert$5(target, div, anchor);
		},
		p: noop$3,
		d(detaching) {
			if (detaching) {
				detach$5(div);
			}
		}
	};
}

// (147:3) {#each thumbnails as thumbnail, i (i)}
function create_each_block(key_1, ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	return {
		key: key_1,
		first: null,
		c() {
			img = element$4("img");
			if (!src_url_equal$1(img.src, img_src_value = /*thumbnail*/ ctx[20])) attr$4(img, "src", img_src_value);
			attr$4(img, "alt", img_alt_value = `frame-${/*i*/ ctx[22]}`);
			attr$4(img, "draggable", "false");
			attr$4(img, "class", "svelte-10c4beq");
			this.first = img;
		},
		m(target, anchor) {
			insert$5(target, img, anchor);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*thumbnails*/ 2 && !src_url_equal$1(img.src, img_src_value = /*thumbnail*/ ctx[20])) {
				attr$4(img, "src", img_src_value);
			}

			if (dirty & /*thumbnails*/ 2 && img_alt_value !== (img_alt_value = `frame-${/*i*/ ctx[22]}`)) {
				attr$4(img, "alt", img_alt_value);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$5(img);
			}
		}
	};
}

function create_fragment$5(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*loadingTimeline*/ ctx[0]) return create_if_block$5;
		return create_else_block$5;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element$4("div");
			if_block.c();
			attr$4(div, "class", "container svelte-10c4beq");
		},
		m(target, anchor) {
			insert$5(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		i: noop$3,
		o: noop$3,
		d(detaching) {
			if (detaching) {
				detach$5(div);
			}

			if_block.d();
		}
	};
}

let numberOfThumbnails = 10;

function instance$5($$self, $$props, $$invalidate) {
	let { videoElement } = $$props;
	let { trimmedDuration } = $$props;
	let { dragStart } = $$props;
	let { dragEnd } = $$props;
	let { loadingTimeline } = $$props;
	let thumbnails = [];
	let videoDuration;
	let leftHandlePosition = 0;
	let rightHandlePosition = 100;
	let dragging = null;

	const startDragging = side => {
		dragging = side;
	};

	const stopDragging = () => {
		dragging = null;
	};

	const drag = (event, distance) => {
		if (dragging) {
			const timeline = document.getElementById("timeline");
			if (!timeline) return;
			const rect = timeline.getBoundingClientRect();
			let newPercentage = (event.clientX - rect.left) / rect.width * 100;

			if (distance) {
				// Move handle based on arrow key press
				newPercentage = dragging === "left"
				? leftHandlePosition + distance
				: rightHandlePosition + distance;
			} else {
				// Move handle based on mouse drag
				newPercentage = (event.clientX - rect.left) / rect.width * 100;
			}

			newPercentage = Math.max(0, Math.min(newPercentage, 100)); // Keep within 0 and 100

			if (dragging === "left") {
				$$invalidate(2, leftHandlePosition = Math.min(newPercentage, rightHandlePosition));

				// Calculate the new time and set it for the videoElement
				const newTimeLeft = leftHandlePosition / 100 * videoDuration;

				$$invalidate(6, videoElement.currentTime = newTimeLeft, videoElement);
				$$invalidate(8, dragStart = newTimeLeft);
			} else if (dragging === "right") {
				$$invalidate(3, rightHandlePosition = Math.max(newPercentage, leftHandlePosition));
				const newTimeRight = rightHandlePosition / 100 * videoDuration;
				$$invalidate(6, videoElement.currentTime = newTimeRight, videoElement);
				$$invalidate(9, dragEnd = newTimeRight);
			}

			const startTime = leftHandlePosition / 100 * videoDuration;
			const endTime = rightHandlePosition / 100 * videoDuration;
			$$invalidate(7, trimmedDuration = endTime - startTime);
			$$invalidate(2, leftHandlePosition);
			$$invalidate(3, rightHandlePosition);
		}
	};

	const moveHandle = e => {
		if (dragging) {
			// Calculate the movement distance as a percentage of the video duration
			const distance = 1 / videoDuration * 100;

			if (e.key === "ArrowLeft") {
				drag({ clientX: 0 }, -distance);
			} else if (e.key === "ArrowRight") {
				drag({ clientX: 0 }, distance);
			}
		}
	};

	const generateThumbnail = () => {
		const canvas = document.createElement("canvas");
		const ctx = canvas.getContext("2d");
		if (!ctx) return;
		canvas.width = videoElement.videoWidth;
		canvas.height = videoElement.videoHeight;
		ctx.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
		const thumbnail = canvas.toDataURL("image/jpeg", 0.7);
		$$invalidate(1, thumbnails = [...thumbnails, thumbnail]);
	};

	onMount$1(() => {
		const loadMetadata = () => {
			videoDuration = videoElement.duration;
			const interval = videoDuration / numberOfThumbnails;
			let captures = 0;

			const onSeeked = () => {
				generateThumbnail();
				captures++;

				if (captures < numberOfThumbnails) {
					$$invalidate(6, videoElement.currentTime += interval, videoElement);
				} else {
					videoElement.removeEventListener("seeked", onSeeked);
				}
			};

			videoElement.addEventListener("seeked", onSeeked);
			$$invalidate(6, videoElement.currentTime = 0, videoElement);
		};

		if (videoElement.readyState >= 1) {
			loadMetadata();
		} else {
			videoElement.addEventListener("loadedmetadata", loadMetadata);
		}
	});

	onDestroy(() => {
		window.removeEventListener("mousemove", drag);
		window.removeEventListener("mouseup", stopDragging);
		window.removeEventListener("keydown", moveHandle);
	});

	onMount$1(() => {
		window.addEventListener("mousemove", drag);
		window.addEventListener("mouseup", stopDragging);
		window.addEventListener("keydown", moveHandle);
	});

	const mousedown_handler = () => startDragging("left");

	const keydown_handler = e => {
		if (e.key === "ArrowLeft" || e.key == "ArrowRight") {
			startDragging("left");
		}
	};

	const mousedown_handler_1 = () => startDragging("right");

	const keydown_handler_1 = e => {
		if (e.key === "ArrowLeft" || e.key == "ArrowRight") {
			startDragging("right");
		}
	};

	$$self.$$set = $$props => {
		if ('videoElement' in $$props) $$invalidate(6, videoElement = $$props.videoElement);
		if ('trimmedDuration' in $$props) $$invalidate(7, trimmedDuration = $$props.trimmedDuration);
		if ('dragStart' in $$props) $$invalidate(8, dragStart = $$props.dragStart);
		if ('dragEnd' in $$props) $$invalidate(9, dragEnd = $$props.dragEnd);
		if ('loadingTimeline' in $$props) $$invalidate(0, loadingTimeline = $$props.loadingTimeline);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*thumbnails*/ 2) {
			$$invalidate(0, loadingTimeline = thumbnails.length !== numberOfThumbnails);
		}
	};

	return [
		loadingTimeline,
		thumbnails,
		leftHandlePosition,
		rightHandlePosition,
		startDragging,
		stopDragging,
		videoElement,
		trimmedDuration,
		dragStart,
		dragEnd,
		mousedown_handler,
		keydown_handler,
		mousedown_handler_1,
		keydown_handler_1
	];
}

class VideoTimeline extends SvelteComponent$5 {
	constructor(options) {
		super();

		init$5(this, options, instance$5, create_fragment$5, safe_not_equal$5, {
			videoElement: 6,
			trimmedDuration: 7,
			dragStart: 8,
			dragEnd: 9,
			loadingTimeline: 0
		});
	}
}

const VideoControls_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/shared/VideoControls.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$4,
	add_flush_callback: add_flush_callback$2,
	append: append$3,
	attr: attr$3,
	bind: bind$2,
	binding_callbacks: binding_callbacks$2,
	check_outros: check_outros$4,
	create_component: create_component$4,
	destroy_component: destroy_component$4,
	detach: detach$4,
	element: element$3,
	empty: empty$4,
	group_outros: group_outros$4,
	init: init$4,
	insert: insert$4,
	listen: listen$1,
	mount_component: mount_component$4,
	noop: noop$2,
	run_all: run_all$1,
	safe_not_equal: safe_not_equal$4,
	set_data: set_data$2,
	space: space$4,
	text: text$2,
	toggle_class: toggle_class$1,
	transition_in: transition_in$4,
	transition_out: transition_out$4
} = window.__gradio__svelte__internal;const { onMount } = window.__gradio__svelte__internal;
function create_if_block_4$1(ctx) {
	let div;
	let videotimeline;
	let updating_dragStart;
	let updating_dragEnd;
	let updating_trimmedDuration;
	let updating_loadingTimeline;
	let current;

	function videotimeline_dragStart_binding(value) {
		/*videotimeline_dragStart_binding*/ ctx[14](value);
	}

	function videotimeline_dragEnd_binding(value) {
		/*videotimeline_dragEnd_binding*/ ctx[15](value);
	}

	function videotimeline_trimmedDuration_binding(value) {
		/*videotimeline_trimmedDuration_binding*/ ctx[16](value);
	}

	function videotimeline_loadingTimeline_binding(value) {
		/*videotimeline_loadingTimeline_binding*/ ctx[17](value);
	}

	let videotimeline_props = { videoElement: /*videoElement*/ ctx[2] };

	if (/*dragStart*/ ctx[9] !== void 0) {
		videotimeline_props.dragStart = /*dragStart*/ ctx[9];
	}

	if (/*dragEnd*/ ctx[10] !== void 0) {
		videotimeline_props.dragEnd = /*dragEnd*/ ctx[10];
	}

	if (/*trimmedDuration*/ ctx[7] !== void 0) {
		videotimeline_props.trimmedDuration = /*trimmedDuration*/ ctx[7];
	}

	if (/*loadingTimeline*/ ctx[11] !== void 0) {
		videotimeline_props.loadingTimeline = /*loadingTimeline*/ ctx[11];
	}

	videotimeline = new VideoTimeline({ props: videotimeline_props });
	binding_callbacks$2.push(() => bind$2(videotimeline, 'dragStart', videotimeline_dragStart_binding));
	binding_callbacks$2.push(() => bind$2(videotimeline, 'dragEnd', videotimeline_dragEnd_binding));
	binding_callbacks$2.push(() => bind$2(videotimeline, 'trimmedDuration', videotimeline_trimmedDuration_binding));
	binding_callbacks$2.push(() => bind$2(videotimeline, 'loadingTimeline', videotimeline_loadingTimeline_binding));

	return {
		c() {
			div = element$3("div");
			create_component$4(videotimeline.$$.fragment);
			attr$3(div, "class", "timeline-wrapper svelte-sxyn79");
		},
		m(target, anchor) {
			insert$4(target, div, anchor);
			mount_component$4(videotimeline, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const videotimeline_changes = {};
			if (dirty & /*videoElement*/ 4) videotimeline_changes.videoElement = /*videoElement*/ ctx[2];

			if (!updating_dragStart && dirty & /*dragStart*/ 512) {
				updating_dragStart = true;
				videotimeline_changes.dragStart = /*dragStart*/ ctx[9];
				add_flush_callback$2(() => updating_dragStart = false);
			}

			if (!updating_dragEnd && dirty & /*dragEnd*/ 1024) {
				updating_dragEnd = true;
				videotimeline_changes.dragEnd = /*dragEnd*/ ctx[10];
				add_flush_callback$2(() => updating_dragEnd = false);
			}

			if (!updating_trimmedDuration && dirty & /*trimmedDuration*/ 128) {
				updating_trimmedDuration = true;
				videotimeline_changes.trimmedDuration = /*trimmedDuration*/ ctx[7];
				add_flush_callback$2(() => updating_trimmedDuration = false);
			}

			if (!updating_loadingTimeline && dirty & /*loadingTimeline*/ 2048) {
				updating_loadingTimeline = true;
				videotimeline_changes.loadingTimeline = /*loadingTimeline*/ ctx[11];
				add_flush_callback$2(() => updating_loadingTimeline = false);
			}

			videotimeline.$set(videotimeline_changes);
		},
		i(local) {
			if (current) return;
			transition_in$4(videotimeline.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$4(videotimeline.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$4(div);
			}

			destroy_component$4(videotimeline);
		}
	};
}

// (60:2) {:else}
function create_else_block_1(ctx) {
	let div;

	return {
		c() {
			div = element$3("div");
			attr$3(div, "class", "svelte-sxyn79");
		},
		m(target, anchor) {
			insert$4(target, div, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) {
				detach$4(div);
			}
		}
	};
}

// (55:2) {#if mode === "edit" && trimmedDuration !== null}
function create_if_block_3$1(ctx) {
	let time;
	let t_value = /*formatTime*/ ctx[12](/*trimmedDuration*/ ctx[7]) + "";
	let t;

	return {
		c() {
			time = element$3("time");
			t = text$2(t_value);
			attr$3(time, "aria-label", "duration of selected region in seconds");
			attr$3(time, "class", "svelte-sxyn79");
			toggle_class$1(time, "hidden", /*loadingTimeline*/ ctx[11]);
		},
		m(target, anchor) {
			insert$4(target, time, anchor);
			append$3(time, t);
		},
		p(ctx, dirty) {
			if (dirty & /*trimmedDuration*/ 128 && t_value !== (t_value = /*formatTime*/ ctx[12](/*trimmedDuration*/ ctx[7]) + "")) set_data$2(t, t_value);

			if (dirty & /*loadingTimeline*/ 2048) {
				toggle_class$1(time, "hidden", /*loadingTimeline*/ ctx[11]);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$4(time);
			}
		}
	};
}

// (65:3) {#if showRedo && mode === ""}
function create_if_block_2$3(ctx) {
	let button;
	let undo;
	let current;
	let mounted;
	let dispose;
	undo = new Undo({});

	return {
		c() {
			button = element$3("button");
			create_component$4(undo.$$.fragment);
			attr$3(button, "class", "action icon svelte-sxyn79");
			button.disabled = /*processingVideo*/ ctx[1];
			attr$3(button, "aria-label", "Reset video to initial value");
		},
		m(target, anchor) {
			insert$4(target, button, anchor);
			mount_component$4(undo, button, null);
			current = true;

			if (!mounted) {
				dispose = listen$1(button, "click", /*click_handler*/ ctx[18]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*processingVideo*/ 2) {
				button.disabled = /*processingVideo*/ ctx[1];
			}
		},
		i(local) {
			if (current) return;
			transition_in$4(undo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$4(undo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$4(button);
			}

			destroy_component$4(undo);
			mounted = false;
			dispose();
		}
	};
}

// (79:3) {#if interactive}
function create_if_block$4(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$3, create_else_block$4];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*mode*/ ctx[0] === "") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty$4();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert$4(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$4();

				transition_out$4(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$4();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$4(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in$4(if_block);
			current = true;
		},
		o(local) {
			transition_out$4(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$4(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

// (89:4) {:else}
function create_else_block$4(ctx) {
	let button0;
	let t1;
	let button1;
	let mounted;
	let dispose;

	return {
		c() {
			button0 = element$3("button");
			button0.textContent = "Trim";
			t1 = space$4();
			button1 = element$3("button");
			button1.textContent = "Cancel";
			attr$3(button0, "class", "text-button svelte-sxyn79");
			toggle_class$1(button0, "hidden", /*loadingTimeline*/ ctx[11]);
			attr$3(button1, "class", "text-button svelte-sxyn79");
			toggle_class$1(button1, "hidden", /*loadingTimeline*/ ctx[11]);
		},
		m(target, anchor) {
			insert$4(target, button0, anchor);
			insert$4(target, t1, anchor);
			insert$4(target, button1, anchor);

			if (!mounted) {
				dispose = [
					listen$1(button0, "click", /*click_handler_1*/ ctx[19]),
					listen$1(button1, "click", /*toggleTrimmingMode*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*loadingTimeline*/ 2048) {
				toggle_class$1(button0, "hidden", /*loadingTimeline*/ ctx[11]);
			}

			if (dirty & /*loadingTimeline*/ 2048) {
				toggle_class$1(button1, "hidden", /*loadingTimeline*/ ctx[11]);
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) {
				detach$4(button0);
				detach$4(t1);
				detach$4(button1);
			}

			mounted = false;
			run_all$1(dispose);
		}
	};
}

// (80:4) {#if mode === ""}
function create_if_block_1$3(ctx) {
	let button;
	let trim;
	let current;
	let mounted;
	let dispose;
	trim = new Trim({});

	return {
		c() {
			button = element$3("button");
			create_component$4(trim.$$.fragment);
			button.disabled = /*processingVideo*/ ctx[1];
			attr$3(button, "class", "action icon svelte-sxyn79");
			attr$3(button, "aria-label", "Trim video to selection");
		},
		m(target, anchor) {
			insert$4(target, button, anchor);
			mount_component$4(trim, button, null);
			current = true;

			if (!mounted) {
				dispose = listen$1(button, "click", /*toggleTrimmingMode*/ ctx[13]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*processingVideo*/ 2) {
				button.disabled = /*processingVideo*/ ctx[1];
			}
		},
		i(local) {
			if (current) return;
			transition_in$4(trim.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$4(trim.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$4(button);
			}

			destroy_component$4(trim);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$4(ctx) {
	let div2;
	let t0;
	let div1;
	let t1;
	let div0;
	let t2;
	let current;
	let if_block0 = /*mode*/ ctx[0] === "edit" && create_if_block_4$1(ctx);

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[0] === "edit" && /*trimmedDuration*/ ctx[7] !== null) return create_if_block_3$1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block1 = current_block_type(ctx);
	let if_block2 = /*showRedo*/ ctx[3] && /*mode*/ ctx[0] === "" && create_if_block_2$3(ctx);
	let if_block3 = /*interactive*/ ctx[4] && create_if_block$4(ctx);

	return {
		c() {
			div2 = element$3("div");
			if (if_block0) if_block0.c();
			t0 = space$4();
			div1 = element$3("div");
			if_block1.c();
			t1 = space$4();
			div0 = element$3("div");
			if (if_block2) if_block2.c();
			t2 = space$4();
			if (if_block3) if_block3.c();
			attr$3(div0, "class", "settings-wrapper svelte-sxyn79");
			attr$3(div1, "class", "controls svelte-sxyn79");
			attr$3(div1, "data-testid", "waveform-controls");
			attr$3(div2, "class", "container svelte-sxyn79");
		},
		m(target, anchor) {
			insert$4(target, div2, anchor);
			if (if_block0) if_block0.m(div2, null);
			append$3(div2, t0);
			append$3(div2, div1);
			if_block1.m(div1, null);
			append$3(div1, t1);
			append$3(div1, div0);
			if (if_block2) if_block2.m(div0, null);
			append$3(div0, t2);
			if (if_block3) if_block3.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*mode*/ ctx[0] === "edit") {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*mode*/ 1) {
						transition_in$4(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4$1(ctx);
					if_block0.c();
					transition_in$4(if_block0, 1);
					if_block0.m(div2, t0);
				}
			} else if (if_block0) {
				group_outros$4();

				transition_out$4(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros$4();
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div1, t1);
				}
			}

			if (/*showRedo*/ ctx[3] && /*mode*/ ctx[0] === "") {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*showRedo, mode*/ 9) {
						transition_in$4(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_2$3(ctx);
					if_block2.c();
					transition_in$4(if_block2, 1);
					if_block2.m(div0, t2);
				}
			} else if (if_block2) {
				group_outros$4();

				transition_out$4(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros$4();
			}

			if (/*interactive*/ ctx[4]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty & /*interactive*/ 16) {
						transition_in$4(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block$4(ctx);
					if_block3.c();
					transition_in$4(if_block3, 1);
					if_block3.m(div0, null);
				}
			} else if (if_block3) {
				group_outros$4();

				transition_out$4(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros$4();
			}
		},
		i(local) {
			if (current) return;
			transition_in$4(if_block0);
			transition_in$4(if_block2);
			transition_in$4(if_block3);
			current = true;
		},
		o(local) {
			transition_out$4(if_block0);
			transition_out$4(if_block2);
			transition_out$4(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$4(div2);
			}

			if (if_block0) if_block0.d();
			if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let { videoElement } = $$props;
	let { showRedo = false } = $$props;
	let { interactive = true } = $$props;
	let { mode = "" } = $$props;
	let { handle_reset_value } = $$props;
	let { handle_trim_video } = $$props;
	let { processingVideo = false } = $$props;
	let ffmpeg;

	onMount(async () => {
		$$invalidate(8, ffmpeg = await loadFfmpeg());
	});

	const formatTime = seconds => {
		const minutes = Math.floor(seconds / 60);
		const secondsRemainder = Math.round(seconds) % 60;
		const paddedSeconds = `0${secondsRemainder}`.slice(-2);
		return `${minutes}:${paddedSeconds}`;
	};

	let trimmedDuration = null;
	let dragStart = 0;
	let dragEnd = 0;
	let loadingTimeline = false;

	const toggleTrimmingMode = () => {
		if (mode === "edit") {
			$$invalidate(0, mode = "");
			$$invalidate(7, trimmedDuration = videoElement.duration);
		} else {
			$$invalidate(0, mode = "edit");
		}
	};

	function videotimeline_dragStart_binding(value) {
		dragStart = value;
		$$invalidate(9, dragStart);
	}

	function videotimeline_dragEnd_binding(value) {
		dragEnd = value;
		$$invalidate(10, dragEnd);
	}

	function videotimeline_trimmedDuration_binding(value) {
		trimmedDuration = value;
		(($$invalidate(7, trimmedDuration), $$invalidate(0, mode)), $$invalidate(2, videoElement));
	}

	function videotimeline_loadingTimeline_binding(value) {
		loadingTimeline = value;
		$$invalidate(11, loadingTimeline);
	}

	const click_handler = () => {
		handle_reset_value();
		$$invalidate(0, mode = "");
	};

	const click_handler_1 = () => {
		$$invalidate(0, mode = "");
		$$invalidate(1, processingVideo = true);

		trimVideo(ffmpeg, dragStart, dragEnd, videoElement).then(videoBlob => {
			handle_trim_video(videoBlob);
		}).then(() => {
			$$invalidate(1, processingVideo = false);
		});
	};

	$$self.$$set = $$props => {
		if ('videoElement' in $$props) $$invalidate(2, videoElement = $$props.videoElement);
		if ('showRedo' in $$props) $$invalidate(3, showRedo = $$props.showRedo);
		if ('interactive' in $$props) $$invalidate(4, interactive = $$props.interactive);
		if ('mode' in $$props) $$invalidate(0, mode = $$props.mode);
		if ('handle_reset_value' in $$props) $$invalidate(5, handle_reset_value = $$props.handle_reset_value);
		if ('handle_trim_video' in $$props) $$invalidate(6, handle_trim_video = $$props.handle_trim_video);
		if ('processingVideo' in $$props) $$invalidate(1, processingVideo = $$props.processingVideo);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*mode, trimmedDuration, videoElement*/ 133) {
			if (mode === "edit" && trimmedDuration === null && videoElement) $$invalidate(7, trimmedDuration = videoElement.duration);
		}
	};

	return [
		mode,
		processingVideo,
		videoElement,
		showRedo,
		interactive,
		handle_reset_value,
		handle_trim_video,
		trimmedDuration,
		ffmpeg,
		dragStart,
		dragEnd,
		loadingTimeline,
		formatTime,
		toggleTrimmingMode,
		videotimeline_dragStart_binding,
		videotimeline_dragEnd_binding,
		videotimeline_trimmedDuration_binding,
		videotimeline_loadingTimeline_binding,
		click_handler,
		click_handler_1
	];
}

class VideoControls extends SvelteComponent$4 {
	constructor(options) {
		super();

		init$4(this, options, instance$4, create_fragment$4, safe_not_equal$4, {
			videoElement: 2,
			showRedo: 3,
			interactive: 4,
			mode: 0,
			handle_reset_value: 5,
			handle_trim_video: 6,
			processingVideo: 1
		});
	}
}

const Player_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/shared/Player.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$3,
	add_flush_callback: add_flush_callback$1,
	append: append$2,
	attr: attr$2,
	bind: bind$1,
	binding_callbacks: binding_callbacks$1,
	bubble: bubble$2,
	check_outros: check_outros$3,
	create_component: create_component$3,
	destroy_component: destroy_component$3,
	detach: detach$3,
	element: element$2,
	empty: empty$3,
	group_outros: group_outros$3,
	init: init$3,
	insert: insert$3,
	listen,
	mount_component: mount_component$3,
	prevent_default,
	run_all,
	safe_not_equal: safe_not_equal$3,
	set_data: set_data$1,
	space: space$3,
	src_url_equal,
	stop_propagation,
	text: text$1,
	toggle_class,
	transition_in: transition_in$3,
	transition_out: transition_out$3
} = window.__gradio__svelte__internal;
const { createEventDispatcher: createEventDispatcher$2 } = window.__gradio__svelte__internal;
function create_default_slot$3(ctx) {
	let track;
	let track_src_value;

	return {
		c() {
			track = element$2("track");
			attr$2(track, "kind", "captions");
			if (!src_url_equal(track.src, track_src_value = /*subtitle*/ ctx[1])) attr$2(track, "src", track_src_value);
			track.default = true;
		},
		m(target, anchor) {
			insert$3(target, track, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*subtitle*/ 2 && !src_url_equal(track.src, track_src_value = /*subtitle*/ ctx[1])) {
				attr$2(track, "src", track_src_value);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$3(track);
			}
		}
	};
}

// (112:4) {:else}
function create_else_block$3(ctx) {
	let pause;
	let current;
	pause = new Pause({});

	return {
		c() {
			create_component$3(pause.$$.fragment);
		},
		m(target, anchor) {
			mount_component$3(pause, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$3(pause.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$3(pause.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$3(pause, detaching);
		}
	};
}

// (110:21) 
function create_if_block_2$2(ctx) {
	let play;
	let current;
	play = new Play({});

	return {
		c() {
			create_component$3(play.$$.fragment);
		},
		m(target, anchor) {
			mount_component$3(play, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$3(play.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$3(play.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$3(play, detaching);
		}
	};
}

// (108:4) {#if time === duration}
function create_if_block_1$2(ctx) {
	let undo;
	let current;
	undo = new Undo({});

	return {
		c() {
			create_component$3(undo.$$.fragment);
		},
		m(target, anchor) {
			mount_component$3(undo, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$3(undo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$3(undo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$3(undo, detaching);
		}
	};
}

// (142:0) {#if interactive}
function create_if_block$3(ctx) {
	let videocontrols;
	let updating_processingVideo;
	let current;

	function videocontrols_processingVideo_binding(value) {
		/*videocontrols_processingVideo_binding*/ ctx[26](value);
	}

	let videocontrols_props = {
		videoElement: /*video*/ ctx[10],
		showRedo: true,
		handle_trim_video: /*handle_trim_video*/ ctx[16],
		handle_reset_value: /*handle_reset_value*/ ctx[6]
	};

	if (/*processingVideo*/ ctx[11] !== void 0) {
		videocontrols_props.processingVideo = /*processingVideo*/ ctx[11];
	}

	videocontrols = new VideoControls({ props: videocontrols_props });
	binding_callbacks$1.push(() => bind$1(videocontrols, 'processingVideo', videocontrols_processingVideo_binding));

	return {
		c() {
			create_component$3(videocontrols.$$.fragment);
		},
		m(target, anchor) {
			mount_component$3(videocontrols, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const videocontrols_changes = {};
			if (dirty & /*video*/ 1024) videocontrols_changes.videoElement = /*video*/ ctx[10];
			if (dirty & /*handle_reset_value*/ 64) videocontrols_changes.handle_reset_value = /*handle_reset_value*/ ctx[6];

			if (!updating_processingVideo && dirty & /*processingVideo*/ 2048) {
				updating_processingVideo = true;
				videocontrols_changes.processingVideo = /*processingVideo*/ ctx[11];
				add_flush_callback$1(() => updating_processingVideo = false);
			}

			videocontrols.$set(videocontrols_changes);
		},
		i(local) {
			if (current) return;
			transition_in$3(videocontrols.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$3(videocontrols.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$3(videocontrols, detaching);
		}
	};
}

function create_fragment$3(ctx) {
	let div4;
	let div0;
	let video_1;
	let updating_currentTime;
	let updating_duration;
	let updating_paused;
	let updating_node;
	let t0;
	let div3;
	let div2;
	let span0;
	let current_block_type_index;
	let if_block0;
	let t1;
	let span1;
	let t2_value = format(/*time*/ ctx[7]) + "";
	let t2;
	let t3;
	let t4_value = format(/*duration*/ ctx[8]) + "";
	let t4;
	let t5;
	let progress;
	let progress_value_value;
	let t6;
	let div1;
	let maximise;
	let t7;
	let if_block1_anchor;
	let current;
	let mounted;
	let dispose;

	function video_1_currentTime_binding(value) {
		/*video_1_currentTime_binding*/ ctx[20](value);
	}

	function video_1_duration_binding(value) {
		/*video_1_duration_binding*/ ctx[21](value);
	}

	function video_1_paused_binding(value) {
		/*video_1_paused_binding*/ ctx[22](value);
	}

	function video_1_node_binding(value) {
		/*video_1_node_binding*/ ctx[23](value);
	}

	let video_1_props = {
		src: /*src*/ ctx[0],
		preload: "auto",
		autoplay: /*autoplay*/ ctx[3],
		"data-testid": `${/*label*/ ctx[4]}-player`,
		processingVideo: /*processingVideo*/ ctx[11],
		$$slots: { default: [create_default_slot$3] },
		$$scope: { ctx }
	};

	if (/*time*/ ctx[7] !== void 0) {
		video_1_props.currentTime = /*time*/ ctx[7];
	}

	if (/*duration*/ ctx[8] !== void 0) {
		video_1_props.duration = /*duration*/ ctx[8];
	}

	if (/*paused*/ ctx[9] !== void 0) {
		video_1_props.paused = /*paused*/ ctx[9];
	}

	if (/*video*/ ctx[10] !== void 0) {
		video_1_props.node = /*video*/ ctx[10];
	}

	video_1 = new Video$1({ props: video_1_props });
	binding_callbacks$1.push(() => bind$1(video_1, 'currentTime', video_1_currentTime_binding));
	binding_callbacks$1.push(() => bind$1(video_1, 'duration', video_1_duration_binding));
	binding_callbacks$1.push(() => bind$1(video_1, 'paused', video_1_paused_binding));
	binding_callbacks$1.push(() => bind$1(video_1, 'node', video_1_node_binding));
	video_1.$on("click", /*play_pause*/ ctx[13]);
	video_1.$on("play", /*play_handler*/ ctx[24]);
	video_1.$on("pause", /*pause_handler*/ ctx[25]);
	video_1.$on("ended", /*handle_end*/ ctx[15]);
	const if_block_creators = [create_if_block_1$2, create_if_block_2$2, create_else_block$3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*time*/ ctx[7] === /*duration*/ ctx[8]) return 0;
		if (/*paused*/ ctx[9]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	maximise = new Maximise({});
	let if_block1 = /*interactive*/ ctx[5] && create_if_block$3(ctx);

	return {
		c() {
			div4 = element$2("div");
			div0 = element$2("div");
			create_component$3(video_1.$$.fragment);
			t0 = space$3();
			div3 = element$2("div");
			div2 = element$2("div");
			span0 = element$2("span");
			if_block0.c();
			t1 = space$3();
			span1 = element$2("span");
			t2 = text$1(t2_value);
			t3 = text$1(" / ");
			t4 = text$1(t4_value);
			t5 = space$3();
			progress = element$2("progress");
			t6 = space$3();
			div1 = element$2("div");
			create_component$3(maximise.$$.fragment);
			t7 = space$3();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty$3();
			attr$2(div0, "class", "svelte-1i3qraf");
			toggle_class(div0, "mirror", /*mirror*/ ctx[2]);
			attr$2(span0, "role", "button");
			attr$2(span0, "tabindex", "0");
			attr$2(span0, "class", "icon svelte-1i3qraf");
			attr$2(span0, "aria-label", "play-pause-replay-button");
			attr$2(span1, "class", "time svelte-1i3qraf");
			progress.value = progress_value_value = /*time*/ ctx[7] / /*duration*/ ctx[8] || 0;
			attr$2(progress, "class", "svelte-1i3qraf");
			attr$2(div1, "role", "button");
			attr$2(div1, "tabindex", "0");
			attr$2(div1, "class", "icon svelte-1i3qraf");
			attr$2(div1, "aria-label", "full-screen");
			attr$2(div2, "class", "inner svelte-1i3qraf");
			attr$2(div3, "class", "controls svelte-1i3qraf");
			attr$2(div4, "class", "wrap svelte-1i3qraf");
		},
		m(target, anchor) {
			insert$3(target, div4, anchor);
			append$2(div4, div0);
			mount_component$3(video_1, div0, null);
			append$2(div4, t0);
			append$2(div4, div3);
			append$2(div3, div2);
			append$2(div2, span0);
			if_blocks[current_block_type_index].m(span0, null);
			append$2(div2, t1);
			append$2(div2, span1);
			append$2(span1, t2);
			append$2(span1, t3);
			append$2(span1, t4);
			append$2(div2, t5);
			append$2(div2, progress);
			append$2(div2, t6);
			append$2(div2, div1);
			mount_component$3(maximise, div1, null);
			insert$3(target, t7, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert$3(target, if_block1_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span0, "click", /*play_pause*/ ctx[13]),
					listen(span0, "keydown", /*play_pause*/ ctx[13]),
					listen(progress, "mousemove", /*handleMove*/ ctx[12]),
					listen(progress, "touchmove", prevent_default(/*handleMove*/ ctx[12])),
					listen(progress, "click", stop_propagation(prevent_default(/*handle_click*/ ctx[14]))),
					listen(div1, "click", /*open_full_screen*/ ctx[17]),
					listen(div1, "keypress", /*open_full_screen*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const video_1_changes = {};
			if (dirty & /*src*/ 1) video_1_changes.src = /*src*/ ctx[0];
			if (dirty & /*autoplay*/ 8) video_1_changes.autoplay = /*autoplay*/ ctx[3];
			if (dirty & /*label*/ 16) video_1_changes["data-testid"] = `${/*label*/ ctx[4]}-player`;
			if (dirty & /*processingVideo*/ 2048) video_1_changes.processingVideo = /*processingVideo*/ ctx[11];

			if (dirty & /*$$scope, subtitle*/ 268435458) {
				video_1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_currentTime && dirty & /*time*/ 128) {
				updating_currentTime = true;
				video_1_changes.currentTime = /*time*/ ctx[7];
				add_flush_callback$1(() => updating_currentTime = false);
			}

			if (!updating_duration && dirty & /*duration*/ 256) {
				updating_duration = true;
				video_1_changes.duration = /*duration*/ ctx[8];
				add_flush_callback$1(() => updating_duration = false);
			}

			if (!updating_paused && dirty & /*paused*/ 512) {
				updating_paused = true;
				video_1_changes.paused = /*paused*/ ctx[9];
				add_flush_callback$1(() => updating_paused = false);
			}

			if (!updating_node && dirty & /*video*/ 1024) {
				updating_node = true;
				video_1_changes.node = /*video*/ ctx[10];
				add_flush_callback$1(() => updating_node = false);
			}

			video_1.$set(video_1_changes);

			if (!current || dirty & /*mirror*/ 4) {
				toggle_class(div0, "mirror", /*mirror*/ ctx[2]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros$3();

				transition_out$3(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$3();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in$3(if_block0, 1);
				if_block0.m(span0, null);
			}

			if ((!current || dirty & /*time*/ 128) && t2_value !== (t2_value = format(/*time*/ ctx[7]) + "")) set_data$1(t2, t2_value);
			if ((!current || dirty & /*duration*/ 256) && t4_value !== (t4_value = format(/*duration*/ ctx[8]) + "")) set_data$1(t4, t4_value);

			if (!current || dirty & /*time, duration*/ 384 && progress_value_value !== (progress_value_value = /*time*/ ctx[7] / /*duration*/ ctx[8] || 0)) {
				progress.value = progress_value_value;
			}

			if (/*interactive*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*interactive*/ 32) {
						transition_in$3(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$3(ctx);
					if_block1.c();
					transition_in$3(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros$3();

				transition_out$3(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros$3();
			}
		},
		i(local) {
			if (current) return;
			transition_in$3(video_1.$$.fragment, local);
			transition_in$3(if_block0);
			transition_in$3(maximise.$$.fragment, local);
			transition_in$3(if_block1);
			current = true;
		},
		o(local) {
			transition_out$3(video_1.$$.fragment, local);
			transition_out$3(if_block0);
			transition_out$3(maximise.$$.fragment, local);
			transition_out$3(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$3(div4);
				detach$3(t7);
				detach$3(if_block1_anchor);
			}

			destroy_component$3(video_1);
			if_blocks[current_block_type_index].d();
			destroy_component$3(maximise);
			if (if_block1) if_block1.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function format(seconds) {
	if (isNaN(seconds) || !isFinite(seconds)) return "...";
	const minutes = Math.floor(seconds / 60);
	let _seconds = Math.floor(seconds % 60);
	if (_seconds < 10) _seconds = `0${_seconds}`;
	return `${minutes}:${_seconds}`;
}

function instance$3($$self, $$props, $$invalidate) {
	let { root = "" } = $$props;
	let { src } = $$props;
	let { subtitle = null } = $$props;
	let { mirror } = $$props;
	let { autoplay } = $$props;
	let { label = "test" } = $$props;
	let { interactive = false } = $$props;

	let { handle_change = () => {
		
	} } = $$props;

	let { handle_reset_value = () => {
		
	} } = $$props;

	const dispatch = createEventDispatcher$2();
	let time = 0;
	let duration;
	let paused = true;
	let video;
	let processingVideo = false;

	function handleMove(e) {
		if (!duration) return;

		if (e.type === "click") {
			handle_click(e);
			return;
		}

		if (e.type !== "touchmove" && !(e.buttons & 1)) return;

		const clientX = e.type === "touchmove"
		? e.touches[0].clientX
		: e.clientX;

		const { left, right } = e.currentTarget.getBoundingClientRect();
		$$invalidate(7, time = duration * (clientX - left) / (right - left));
	}

	async function play_pause() {
		if (document.fullscreenElement != video) {
			const isPlaying = video.currentTime > 0 && !video.paused && !video.ended && video.readyState > video.HAVE_CURRENT_DATA;

			if (!isPlaying) {
				await video.play();
			} else video.pause();
		}
	}

	function handle_click(e) {
		const { left, right } = e.currentTarget.getBoundingClientRect();
		$$invalidate(7, time = duration * (e.clientX - left) / (right - left));
	}

	function handle_end() {
		dispatch("stop");
		dispatch("end");
	}

	const handle_trim_video = async videoBlob => {
		let _video_blob = new File([videoBlob], "video.mp4");
		const val = await prepare_files([_video_blob]);
		let value = (await upload(val, root))?.filter(Boolean)[0];
		handle_change(value);
	};

	function open_full_screen() {
		video.requestFullscreen();
	}

	function video_1_currentTime_binding(value) {
		time = value;
		$$invalidate(7, time);
	}

	function video_1_duration_binding(value) {
		duration = value;
		$$invalidate(8, duration);
	}

	function video_1_paused_binding(value) {
		paused = value;
		$$invalidate(9, paused);
	}

	function video_1_node_binding(value) {
		video = value;
		$$invalidate(10, video);
	}

	function play_handler(event) {
		bubble$2.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble$2.call(this, $$self, event);
	}

	function videocontrols_processingVideo_binding(value) {
		processingVideo = value;
		$$invalidate(11, processingVideo);
	}

	$$self.$$set = $$props => {
		if ('root' in $$props) $$invalidate(18, root = $$props.root);
		if ('src' in $$props) $$invalidate(0, src = $$props.src);
		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ('mirror' in $$props) $$invalidate(2, mirror = $$props.mirror);
		if ('autoplay' in $$props) $$invalidate(3, autoplay = $$props.autoplay);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('interactive' in $$props) $$invalidate(5, interactive = $$props.interactive);
		if ('handle_change' in $$props) $$invalidate(19, handle_change = $$props.handle_change);
		if ('handle_reset_value' in $$props) $$invalidate(6, handle_reset_value = $$props.handle_reset_value);
	};

	return [
		src,
		subtitle,
		mirror,
		autoplay,
		label,
		interactive,
		handle_reset_value,
		time,
		duration,
		paused,
		video,
		processingVideo,
		handleMove,
		play_pause,
		handle_click,
		handle_end,
		handle_trim_video,
		open_full_screen,
		root,
		handle_change,
		video_1_currentTime_binding,
		video_1_duration_binding,
		video_1_paused_binding,
		video_1_node_binding,
		play_handler,
		pause_handler,
		videocontrols_processingVideo_binding
	];
}

class Player extends SvelteComponent$3 {
	constructor(options) {
		super();

		init$3(this, options, instance$3, create_fragment$3, safe_not_equal$3, {
			root: 18,
			src: 0,
			subtitle: 1,
			mirror: 2,
			autoplay: 3,
			label: 4,
			interactive: 5,
			handle_change: 19,
			handle_reset_value: 6
		});
	}
}

const Player$1 = Player;

const InteractiveVideo_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/shared/InteractiveVideo.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$2,
	add_flush_callback,
	append: append$1,
	attr: attr$1,
	bind,
	binding_callbacks,
	bubble: bubble$1,
	check_outros: check_outros$2,
	create_component: create_component$2,
	create_slot,
	destroy_component: destroy_component$2,
	detach: detach$2,
	element: element$1,
	empty: empty$2,
	get_all_dirty_from_scope,
	get_slot_changes,
	group_outros: group_outros$2,
	init: init$2,
	insert: insert$2,
	mount_component: mount_component$2,
	noop: noop$1,
	safe_not_equal: safe_not_equal$2,
	set_data,
	space: space$2,
	text,
	transition_in: transition_in$2,
	transition_out: transition_out$2,
	update_slot_base
} = window.__gradio__svelte__internal;
const { createEventDispatcher: createEventDispatcher$1 } = window.__gradio__svelte__internal;
function create_else_block$2(ctx) {
	let modifyupload;
	let t;
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	modifyupload = new ModifyUpload({ props: { i18n: /*i18n*/ ctx[10] } });
	modifyupload.$on("clear", /*handle_clear*/ ctx[15]);
	const if_block_creators = [create_if_block_3, create_if_block_4];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (show_if == null) show_if = !!playable();
		if (show_if) return 0;
		if (/*value*/ ctx[0].size) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_2(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			create_component$2(modifyupload.$$.fragment);
			t = space$2();
			if (if_block) if_block.c();
			if_block_anchor = empty$2();
		},
		m(target, anchor) {
			mount_component$2(modifyupload, target, anchor);
			insert$2(target, t, anchor);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert$2(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modifyupload_changes = {};
			if (dirty & /*i18n*/ 1024) modifyupload_changes.i18n = /*i18n*/ ctx[10];
			modifyupload.$set(modifyupload_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros$2();

					transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros$2();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in$2(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(modifyupload.$$.fragment, local);
			transition_in$2(if_block);
			current = true;
		},
		o(local) {
			transition_out$2(modifyupload.$$.fragment, local);
			transition_out$2(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(t);
				detach$2(if_block_anchor);
			}

			destroy_component$2(modifyupload, detaching);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}
		}
	};
}

// (40:0) {#if value === null || value.url === undefined}
function create_if_block$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$1, create_if_block_2$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*active_source*/ ctx[1] === "upload") return 0;
		if (/*active_source*/ ctx[1] === "webcam") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty$2();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert$2(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros$2();

					transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros$2();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in$2(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(if_block);
			current = true;
		},
		o(local) {
			transition_out$2(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(if_block_anchor);
			}

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}
		}
	};
}

// (84:22) 
function create_if_block_4(ctx) {
	let div0;
	let t0_value = (/*value*/ ctx[0].orig_name || /*value*/ ctx[0].url) + "";
	let t0;
	let t1;
	let div1;
	let t2_value = prettyBytes(/*value*/ ctx[0].size) + "";
	let t2;

	return {
		c() {
			div0 = element$1("div");
			t0 = text(t0_value);
			t1 = space$2();
			div1 = element$1("div");
			t2 = text(t2_value);
			attr$1(div0, "class", "file-name svelte-a6ruol");
			attr$1(div1, "class", "file-size svelte-a6ruol");
		},
		m(target, anchor) {
			insert$2(target, div0, anchor);
			append$1(div0, t0);
			insert$2(target, t1, anchor);
			insert$2(target, div1, anchor);
			append$1(div1, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = (/*value*/ ctx[0].orig_name || /*value*/ ctx[0].url) + "")) set_data(t0, t0_value);
			if (dirty & /*value*/ 1 && t2_value !== (t2_value = prettyBytes(/*value*/ ctx[0].size) + "")) set_data(t2, t2_value);
		},
		i: noop$1,
		o: noop$1,
		d(detaching) {
			if (detaching) {
				detach$2(div0);
				detach$2(t1);
				detach$2(div1);
			}
		}
	};
}

// (66:1) {#if playable()}
function create_if_block_3(ctx) {
	let previous_key = /*value*/ ctx[0]?.url;
	let key_block_anchor;
	let current;
	let key_block = create_key_block$1(ctx);

	return {
		c() {
			key_block.c();
			key_block_anchor = empty$2();
		},
		m(target, anchor) {
			key_block.m(target, anchor);
			insert$2(target, key_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1 && safe_not_equal$2(previous_key, previous_key = /*value*/ ctx[0]?.url)) {
				group_outros$2();
				transition_out$2(key_block, 1, 1, noop$1);
				check_outros$2();
				key_block = create_key_block$1(ctx);
				key_block.c();
				transition_in$2(key_block, 1);
				key_block.m(key_block_anchor.parentNode, key_block_anchor);
			} else {
				key_block.p(ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(key_block);
			current = true;
		},
		o(local) {
			transition_out$2(key_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(key_block_anchor);
			}

			key_block.d(detaching);
		}
	};
}

// (67:2) {#key value?.url}
function create_key_block$1(ctx) {
	let player;
	let current;

	player = new Player$1({
			props: {
				root: /*root*/ ctx[9],
				interactive: true,
				autoplay: /*autoplay*/ ctx[8],
				src: /*value*/ ctx[0].url,
				subtitle: /*subtitle*/ ctx[2]?.url,
				mirror: /*mirror_webcam*/ ctx[6] && /*active_source*/ ctx[1] === "webcam",
				label: /*label*/ ctx[4],
				handle_change: /*handle_change*/ ctx[16],
				handle_reset_value: /*handle_reset_value*/ ctx[11]
			}
		});

	player.$on("play", /*play_handler*/ ctx[24]);
	player.$on("pause", /*pause_handler*/ ctx[25]);
	player.$on("stop", /*stop_handler*/ ctx[26]);
	player.$on("end", /*end_handler*/ ctx[27]);

	return {
		c() {
			create_component$2(player.$$.fragment);
		},
		m(target, anchor) {
			mount_component$2(player, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const player_changes = {};
			if (dirty & /*root*/ 512) player_changes.root = /*root*/ ctx[9];
			if (dirty & /*autoplay*/ 256) player_changes.autoplay = /*autoplay*/ ctx[8];
			if (dirty & /*value*/ 1) player_changes.src = /*value*/ ctx[0].url;
			if (dirty & /*subtitle*/ 4) player_changes.subtitle = /*subtitle*/ ctx[2]?.url;
			if (dirty & /*mirror_webcam, active_source*/ 66) player_changes.mirror = /*mirror_webcam*/ ctx[6] && /*active_source*/ ctx[1] === "webcam";
			if (dirty & /*label*/ 16) player_changes.label = /*label*/ ctx[4];
			if (dirty & /*handle_reset_value*/ 2048) player_changes.handle_reset_value = /*handle_reset_value*/ ctx[11];
			player.$set(player_changes);
		},
		i(local) {
			if (current) return;
			transition_in$2(player.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(player.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$2(player, detaching);
		}
	};
}

// (52:38) 
function create_if_block_2$1(ctx) {
	let webcam;
	let current;

	webcam = new Webcam({
			props: {
				mirror_webcam: /*mirror_webcam*/ ctx[6],
				include_audio: /*include_audio*/ ctx[7],
				mode: "video",
				i18n: /*i18n*/ ctx[10]
			}
		});

	webcam.$on("error", /*error_handler*/ ctx[20]);
	webcam.$on("capture", /*capture_handler*/ ctx[21]);
	webcam.$on("start_recording", /*start_recording_handler*/ ctx[22]);
	webcam.$on("stop_recording", /*stop_recording_handler*/ ctx[23]);

	return {
		c() {
			create_component$2(webcam.$$.fragment);
		},
		m(target, anchor) {
			mount_component$2(webcam, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const webcam_changes = {};
			if (dirty & /*mirror_webcam*/ 64) webcam_changes.mirror_webcam = /*mirror_webcam*/ ctx[6];
			if (dirty & /*include_audio*/ 128) webcam_changes.include_audio = /*include_audio*/ ctx[7];
			if (dirty & /*i18n*/ 1024) webcam_changes.i18n = /*i18n*/ ctx[10];
			webcam.$set(webcam_changes);
		},
		i(local) {
			if (current) return;
			transition_in$2(webcam.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(webcam.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$2(webcam, detaching);
		}
	};
}

// (41:1) {#if active_source === "upload"}
function create_if_block_1$1(ctx) {
	let upload;
	let updating_dragging;
	let current;

	function upload_dragging_binding(value) {
		/*upload_dragging_binding*/ ctx[18](value);
	}

	let upload_props = {
		filetype: "video/x-m4v,video/*",
		root: /*root*/ ctx[9],
		include_sources: /*sources*/ ctx[3].length > 1,
		$$slots: { default: [create_default_slot$2] },
		$$scope: { ctx }
	};

	if (/*dragging*/ ctx[12] !== void 0) {
		upload_props.dragging = /*dragging*/ ctx[12];
	}

	upload = new Upload({ props: upload_props });
	binding_callbacks.push(() => bind(upload, 'dragging', upload_dragging_binding));
	upload.$on("load", /*handle_load*/ ctx[14]);
	upload.$on("error", /*error_handler_1*/ ctx[19]);

	return {
		c() {
			create_component$2(upload.$$.fragment);
		},
		m(target, anchor) {
			mount_component$2(upload, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const upload_changes = {};
			if (dirty & /*root*/ 512) upload_changes.root = /*root*/ ctx[9];
			if (dirty & /*sources*/ 8) upload_changes.include_sources = /*sources*/ ctx[3].length > 1;

			if (dirty & /*$$scope*/ 536870912) {
				upload_changes.$$scope = { dirty, ctx };
			}

			if (!updating_dragging && dirty & /*dragging*/ 4096) {
				updating_dragging = true;
				upload_changes.dragging = /*dragging*/ ctx[12];
				add_flush_callback(() => updating_dragging = false);
			}

			upload.$set(upload_changes);
		},
		i(local) {
			if (current) return;
			transition_in$2(upload.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(upload.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$2(upload, detaching);
		}
	};
}

// (42:2) <Upload    bind:dragging    filetype="video/x-m4v,video/*"    on:load={handle_load}    on:error={({ detail }) => dispatch("error", detail)}    {root}    include_sources={sources.length > 1}   >
function create_default_slot$2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[29], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 536870912)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[29],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[29])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[29], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in$2(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out$2(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let blocklabel;
	let t0;
	let current_block_type_index;
	let if_block;
	let t1;
	let selectsource;
	let updating_active_source;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[5],
				Icon: Video$2,
				label: /*label*/ ctx[4] || "Video"
			}
		});

	const if_block_creators = [create_if_block$2, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null || /*value*/ ctx[0].url === undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	function selectsource_active_source_binding(value) {
		/*selectsource_active_source_binding*/ ctx[28](value);
	}

	let selectsource_props = {
		sources: /*sources*/ ctx[3],
		handle_clear: /*handle_clear*/ ctx[15]
	};

	if (/*active_source*/ ctx[1] !== void 0) {
		selectsource_props.active_source = /*active_source*/ ctx[1];
	}

	selectsource = new SelectSource({ props: selectsource_props });
	binding_callbacks.push(() => bind(selectsource, 'active_source', selectsource_active_source_binding));

	return {
		c() {
			create_component$2(blocklabel.$$.fragment);
			t0 = space$2();
			if_block.c();
			t1 = space$2();
			create_component$2(selectsource.$$.fragment);
		},
		m(target, anchor) {
			mount_component$2(blocklabel, target, anchor);
			insert$2(target, t0, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert$2(target, t1, anchor);
			mount_component$2(selectsource, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 32) blocklabel_changes.show_label = /*show_label*/ ctx[5];
			if (dirty & /*label*/ 16) blocklabel_changes.label = /*label*/ ctx[4] || "Video";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$2();

				transition_out$2(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$2();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$2(if_block, 1);
				if_block.m(t1.parentNode, t1);
			}

			const selectsource_changes = {};
			if (dirty & /*sources*/ 8) selectsource_changes.sources = /*sources*/ ctx[3];

			if (!updating_active_source && dirty & /*active_source*/ 2) {
				updating_active_source = true;
				selectsource_changes.active_source = /*active_source*/ ctx[1];
				add_flush_callback(() => updating_active_source = false);
			}

			selectsource.$set(selectsource_changes);
		},
		i(local) {
			if (current) return;
			transition_in$2(blocklabel.$$.fragment, local);
			transition_in$2(if_block);
			transition_in$2(selectsource.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$2(blocklabel.$$.fragment, local);
			transition_out$2(if_block);
			transition_out$2(selectsource.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$2(t0);
				detach$2(t1);
			}

			destroy_component$2(blocklabel, detaching);
			if_blocks[current_block_type_index].d(detaching);
			destroy_component$2(selectsource, detaching);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = null } = $$props;
	let { subtitle = null } = $$props;
	let { sources = ["webcam", "upload"] } = $$props;
	let { label = undefined } = $$props;
	let { show_label = true } = $$props;
	let { mirror_webcam = false } = $$props;
	let { include_audio } = $$props;
	let { autoplay } = $$props;
	let { root } = $$props;
	let { i18n } = $$props;
	let { active_source = "webcam" } = $$props;

	let { handle_reset_value = () => {
		
	} } = $$props;

	const dispatch = createEventDispatcher$1();

	function handle_load({ detail }) {
		$$invalidate(0, value = detail);
		dispatch("change", detail);
		dispatch("upload", detail);
	}

	function handle_clear() {
		$$invalidate(0, value = null);
		dispatch("change", null);
		dispatch("clear");
	}

	function handle_change(video) {
		dispatch("change", video);
	}

	let dragging = false;

	function upload_dragging_binding(value) {
		dragging = value;
		$$invalidate(12, dragging);
	}

	const error_handler_1 = ({ detail }) => dispatch("error", detail);

	function error_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	const capture_handler = () => dispatch("change");

	function start_recording_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	function stop_recording_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	function play_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	function stop_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	function end_handler(event) {
		bubble$1.call(this, $$self, event);
	}

	function selectsource_active_source_binding(value) {
		active_source = value;
		$$invalidate(1, active_source);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('subtitle' in $$props) $$invalidate(2, subtitle = $$props.subtitle);
		if ('sources' in $$props) $$invalidate(3, sources = $$props.sources);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(5, show_label = $$props.show_label);
		if ('mirror_webcam' in $$props) $$invalidate(6, mirror_webcam = $$props.mirror_webcam);
		if ('include_audio' in $$props) $$invalidate(7, include_audio = $$props.include_audio);
		if ('autoplay' in $$props) $$invalidate(8, autoplay = $$props.autoplay);
		if ('root' in $$props) $$invalidate(9, root = $$props.root);
		if ('i18n' in $$props) $$invalidate(10, i18n = $$props.i18n);
		if ('active_source' in $$props) $$invalidate(1, active_source = $$props.active_source);
		if ('handle_reset_value' in $$props) $$invalidate(11, handle_reset_value = $$props.handle_reset_value);
		if ('$$scope' in $$props) $$invalidate(29, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dragging*/ 4096) {
			dispatch("drag", dragging);
		}
	};

	return [
		value,
		active_source,
		subtitle,
		sources,
		label,
		show_label,
		mirror_webcam,
		include_audio,
		autoplay,
		root,
		i18n,
		handle_reset_value,
		dragging,
		dispatch,
		handle_load,
		handle_clear,
		handle_change,
		slots,
		upload_dragging_binding,
		error_handler_1,
		error_handler,
		capture_handler,
		start_recording_handler,
		stop_recording_handler,
		play_handler,
		pause_handler,
		stop_handler,
		end_handler,
		selectsource_active_source_binding,
		$$scope
	];
}

class InteractiveVideo extends SvelteComponent$2 {
	constructor(options) {
		super();

		init$2(this, options, instance$2, create_fragment$2, safe_not_equal$2, {
			value: 0,
			subtitle: 2,
			sources: 3,
			label: 4,
			show_label: 5,
			mirror_webcam: 6,
			include_audio: 7,
			autoplay: 8,
			root: 9,
			i18n: 10,
			active_source: 1,
			handle_reset_value: 11
		});
	}
}

const Video = InteractiveVideo;

const VideoPreview_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/video/shared/VideoPreview.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	append,
	attr,
	bubble,
	check_outros: check_outros$1,
	create_component: create_component$1,
	destroy_component: destroy_component$1,
	detach: detach$1,
	element,
	empty: empty$1,
	group_outros: group_outros$1,
	init: init$1,
	insert: insert$1,
	mount_component: mount_component$1,
	noop,
	safe_not_equal: safe_not_equal$1,
	space: space$1,
	transition_in: transition_in$1,
	transition_out: transition_out$1
} = window.__gradio__svelte__internal;
const { createEventDispatcher, afterUpdate, tick } = window.__gradio__svelte__internal;
function create_else_block$1(ctx) {
	let previous_key = /*value*/ ctx[0].url;
	let t0;
	let div;
	let t1;
	let current;
	let key_block = create_key_block(ctx);
	let if_block0 = /*show_download_button*/ ctx[6] && create_if_block_2(ctx);
	let if_block1 = /*show_share_button*/ ctx[5] && create_if_block_1(ctx);

	return {
		c() {
			key_block.c();
			t0 = space$1();
			div = element("div");
			if (if_block0) if_block0.c();
			t1 = space$1();
			if (if_block1) if_block1.c();
			attr(div, "class", "icon-buttons svelte-rvdo70");
			attr(div, "data-testid", "download-div");
		},
		m(target, anchor) {
			key_block.m(target, anchor);
			insert$1(target, t0, anchor);
			insert$1(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1 && safe_not_equal$1(previous_key, previous_key = /*value*/ ctx[0].url)) {
				group_outros$1();
				transition_out$1(key_block, 1, 1, noop);
				check_outros$1();
				key_block = create_key_block(ctx);
				key_block.c();
				transition_in$1(key_block, 1);
				key_block.m(t0.parentNode, t0);
			} else {
				key_block.p(ctx, dirty);
			}

			if (/*show_download_button*/ ctx[6]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*show_download_button*/ 64) {
						transition_in$1(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in$1(if_block0, 1);
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				group_outros$1();

				transition_out$1(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros$1();
			}

			if (/*show_share_button*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*show_share_button*/ 32) {
						transition_in$1(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in$1(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros$1();

				transition_out$1(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros$1();
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(key_block);
			transition_in$1(if_block0);
			transition_in$1(if_block1);
			current = true;
		},
		o(local) {
			transition_out$1(key_block);
			transition_out$1(if_block0);
			transition_out$1(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t0);
				detach$1(div);
			}

			key_block.d(detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (34:0) {#if value === null || value.url === undefined}
function create_if_block$1(ctx) {
	let empty_1;
	let current;

	empty_1 = new Empty({
			props: {
				unpadded_box: true,
				size: "large",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component$1(empty_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(empty_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const empty_1_changes = {};

			if (dirty & /*$$scope*/ 262144) {
				empty_1_changes.$$scope = { dirty, ctx };
			}

			empty_1.$set(empty_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(empty_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(empty_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(empty_1, detaching);
		}
	};
}

// (37:1) {#key value.url}
function create_key_block(ctx) {
	let player;
	let current;

	player = new Player$1({
			props: {
				src: /*value*/ ctx[0].url,
				subtitle: /*subtitle*/ ctx[1]?.url,
				autoplay: /*autoplay*/ ctx[4],
				mirror: false,
				label: /*label*/ ctx[2],
				interactive: false
			}
		});

	player.$on("play", /*play_handler*/ ctx[8]);
	player.$on("pause", /*pause_handler*/ ctx[9]);
	player.$on("stop", /*stop_handler*/ ctx[10]);
	player.$on("end", /*end_handler*/ ctx[11]);

	return {
		c() {
			create_component$1(player.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(player, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const player_changes = {};
			if (dirty & /*value*/ 1) player_changes.src = /*value*/ ctx[0].url;
			if (dirty & /*subtitle*/ 2) player_changes.subtitle = /*subtitle*/ ctx[1]?.url;
			if (dirty & /*autoplay*/ 16) player_changes.autoplay = /*autoplay*/ ctx[4];
			if (dirty & /*label*/ 4) player_changes.label = /*label*/ ctx[2];
			player.$set(player_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(player.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(player.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(player, detaching);
		}
	};
}

// (52:2) {#if show_download_button}
function create_if_block_2(ctx) {
	let a;
	let iconbutton;
	let a_href_value;
	let a_download_value;
	let current;

	iconbutton = new IconButton({
			props: { Icon: Download, label: "Download" }
		});

	return {
		c() {
			a = element("a");
			create_component$1(iconbutton.$$.fragment);
			attr(a, "href", a_href_value = /*value*/ ctx[0].url);
			attr(a, "target", window.__is_colab__ ? "_blank" : null);
			attr(a, "download", a_download_value = /*value*/ ctx[0].orig_name || /*value*/ ctx[0].path);
		},
		m(target, anchor) {
			insert$1(target, a, anchor);
			mount_component$1(iconbutton, a, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*value*/ 1 && a_href_value !== (a_href_value = /*value*/ ctx[0].url)) {
				attr(a, "href", a_href_value);
			}

			if (!current || dirty & /*value*/ 1 && a_download_value !== (a_download_value = /*value*/ ctx[0].orig_name || /*value*/ ctx[0].path)) {
				attr(a, "download", a_download_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(iconbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(iconbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(a);
			}

			destroy_component$1(iconbutton);
		}
	};
}

// (61:2) {#if show_share_button}
function create_if_block_1(ctx) {
	let sharebutton;
	let current;

	sharebutton = new ShareButton({
			props: {
				i18n: /*i18n*/ ctx[7],
				value: /*value*/ ctx[0],
				formatter: /*func*/ ctx[12]
			}
		});

	sharebutton.$on("error", /*error_handler*/ ctx[13]);
	sharebutton.$on("share", /*share_handler*/ ctx[14]);

	return {
		c() {
			create_component$1(sharebutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(sharebutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const sharebutton_changes = {};
			if (dirty & /*i18n*/ 128) sharebutton_changes.i18n = /*i18n*/ ctx[7];
			if (dirty & /*value*/ 1) sharebutton_changes.value = /*value*/ ctx[0];
			sharebutton.$set(sharebutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(sharebutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(sharebutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(sharebutton, detaching);
		}
	};
}

// (35:1) <Empty unpadded_box={true} size="large">
function create_default_slot$1(ctx) {
	let video;
	let current;
	video = new Video$2({});

	return {
		c() {
			create_component$1(video.$$.fragment);
		},
		m(target, anchor) {
			mount_component$1(video, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in$1(video.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(video.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component$1(video, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[3],
				Icon: Video$2,
				label: /*label*/ ctx[2] || "Video"
			}
		});

	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null || /*value*/ ctx[0].url === undefined) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			create_component$1(blocklabel.$$.fragment);
			t = space$1();
			if_block.c();
			if_block_anchor = empty$1();
		},
		m(target, anchor) {
			mount_component$1(blocklabel, target, anchor);
			insert$1(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert$1(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 8) blocklabel_changes.show_label = /*show_label*/ ctx[3];
			if (dirty & /*label*/ 4) blocklabel_changes.label = /*label*/ ctx[2] || "Video";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros$1();

				transition_out$1(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros$1();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in$1(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(blocklabel.$$.fragment, local);
			transition_in$1(if_block);
			current = true;
		},
		o(local) {
			transition_out$1(blocklabel.$$.fragment, local);
			transition_out$1(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
				detach$1(if_block_anchor);
			}

			destroy_component$1(blocklabel, detaching);
			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { value = null } = $$props;
	let { subtitle = null } = $$props;
	let { label = undefined } = $$props;
	let { show_label = true } = $$props;
	let { autoplay } = $$props;
	let { show_share_button = true } = $$props;
	let { show_download_button = true } = $$props;
	let { i18n } = $$props;
	let old_value = null;
	let old_subtitle = null;
	const dispatch = createEventDispatcher();

	afterUpdate(async () => {
		// needed to bust subtitle caching issues on Chrome
		if (value !== old_value && subtitle !== old_subtitle && old_subtitle !== null) {
			old_value = value;
			$$invalidate(0, value = null);
			await tick();
			$$invalidate(0, value = old_value);
		}

		old_value = value;
		old_subtitle = subtitle;
	});

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	function stop_handler(event) {
		bubble.call(this, $$self, event);
	}

	function end_handler(event) {
		bubble.call(this, $$self, event);
	}

	const func = async value => {
		if (!value) return "";
		let url = await uploadToHuggingFace(value.data, "url");
		return url;
	};

	function error_handler(event) {
		bubble.call(this, $$self, event);
	}

	function share_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('subtitle' in $$props) $$invalidate(1, subtitle = $$props.subtitle);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(3, show_label = $$props.show_label);
		if ('autoplay' in $$props) $$invalidate(4, autoplay = $$props.autoplay);
		if ('show_share_button' in $$props) $$invalidate(5, show_share_button = $$props.show_share_button);
		if ('show_download_button' in $$props) $$invalidate(6, show_download_button = $$props.show_download_button);
		if ('i18n' in $$props) $$invalidate(7, i18n = $$props.i18n);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			value && dispatch("change", value);
		}
	};

	return [
		value,
		subtitle,
		label,
		show_label,
		autoplay,
		show_share_button,
		show_download_button,
		i18n,
		play_handler,
		pause_handler,
		stop_handler,
		end_handler,
		func,
		error_handler,
		share_handler
	];
}

class VideoPreview extends SvelteComponent$1 {
	constructor(options) {
		super();

		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, {
			value: 0,
			subtitle: 1,
			label: 2,
			show_label: 3,
			autoplay: 4,
			show_share_button: 5,
			show_download_button: 6,
			i18n: 7
		});
	}
}

const StaticVideo = VideoPreview;

/* home/runner/work/gradio/gradio/js/video/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	assign,
	check_outros,
	create_component,
	destroy_component,
	detach,
	empty,
	flush,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_else_block(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				variant: /*value*/ ctx[0] === null && /*active_source*/ ctx[22] === "upload"
				? "dashed"
				: "solid",
				border_mode: /*dragging*/ ctx[23] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				height: /*height*/ ctx[9],
				width: /*width*/ ctx[10],
				container: /*container*/ ctx[11],
				scale: /*scale*/ ctx[12],
				min_width: /*min_width*/ ctx[13],
				allow_overflow: false,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];

			if (dirty[0] & /*value, active_source*/ 4194305) block_changes.variant = /*value*/ ctx[0] === null && /*active_source*/ ctx[22] === "upload"
			? "dashed"
			: "solid";

			if (dirty[0] & /*dragging*/ 8388608) block_changes.border_mode = /*dragging*/ ctx[23] ? "focus" : "base";
			if (dirty[0] & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty[0] & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty[0] & /*height*/ 512) block_changes.height = /*height*/ ctx[9];
			if (dirty[0] & /*width*/ 1024) block_changes.width = /*width*/ ctx[10];
			if (dirty[0] & /*container*/ 2048) block_changes.container = /*container*/ ctx[11];
			if (dirty[0] & /*scale*/ 4096) block_changes.scale = /*scale*/ ctx[12];
			if (dirty[0] & /*min_width*/ 8192) block_changes.min_width = /*min_width*/ ctx[13];

			if (dirty[0] & /*_video, _subtitle, label, show_label, sources, active_source, mirror_webcam, include_audio, autoplay, root, gradio, dragging, loading_status*/ 16597474 | dirty[1] & /*$$scope*/ 16384) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

// (87:0) {#if !interactive}
function create_if_block(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				variant: /*value*/ ctx[0] === null && /*active_source*/ ctx[22] === "upload"
				? "dashed"
				: "solid",
				border_mode: /*dragging*/ ctx[23] ? "focus" : "base",
				padding: false,
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				height: /*height*/ ctx[9],
				width: /*width*/ ctx[10],
				container: /*container*/ ctx[11],
				scale: /*scale*/ ctx[12],
				min_width: /*min_width*/ ctx[13],
				allow_overflow: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const block_changes = {};
			if (dirty[0] & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];

			if (dirty[0] & /*value, active_source*/ 4194305) block_changes.variant = /*value*/ ctx[0] === null && /*active_source*/ ctx[22] === "upload"
			? "dashed"
			: "solid";

			if (dirty[0] & /*dragging*/ 8388608) block_changes.border_mode = /*dragging*/ ctx[23] ? "focus" : "base";
			if (dirty[0] & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty[0] & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty[0] & /*height*/ 512) block_changes.height = /*height*/ ctx[9];
			if (dirty[0] & /*width*/ 1024) block_changes.width = /*width*/ ctx[10];
			if (dirty[0] & /*container*/ 2048) block_changes.container = /*container*/ ctx[11];
			if (dirty[0] & /*scale*/ 4096) block_changes.scale = /*scale*/ ctx[12];
			if (dirty[0] & /*min_width*/ 8192) block_changes.min_width = /*min_width*/ ctx[13];

			if (dirty[0] & /*_video, _subtitle, label, show_label, autoplay, show_share_button, gradio, loading_status*/ 3260706 | dirty[1] & /*$$scope*/ 16384) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

// (146:2) <Video    value={_video}    subtitle={_subtitle}    on:change={handle_change}    on:drag={({ detail }) => (dragging = detail)}    on:error={handle_error}    {label}    {show_label}    {sources}    {active_source}    {mirror_webcam}    {include_audio}    {autoplay}    {root}    {handle_reset_value}    on:clear={() => gradio.dispatch("clear")}    on:play={() => gradio.dispatch("play")}    on:pause={() => gradio.dispatch("pause")}    on:upload={() => gradio.dispatch("upload")}    on:stop={() => gradio.dispatch("stop")}    on:end={() => gradio.dispatch("end")}    on:start_recording={() => gradio.dispatch("start_recording")}    on:stop_recording={() => gradio.dispatch("stop_recording")}    i18n={gradio.i18n}   >
function create_default_slot_2(ctx) {
	let uploadtext;
	let current;

	uploadtext = new UploadText({
			props: {
				i18n: /*gradio*/ ctx[16].i18n,
				type: "video"
			}
		});

	return {
		c() {
			create_component(uploadtext.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uploadtext, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const uploadtext_changes = {};
			if (dirty[0] & /*gradio*/ 65536) uploadtext_changes.i18n = /*gradio*/ ctx[16].i18n;
			uploadtext.$set(uploadtext_changes);
		},
		i(local) {
			if (current) return;
			transition_in(uploadtext.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadtext.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uploadtext, detaching);
		}
	};
}

// (126:1) <Block   {visible}   variant={value === null && active_source === "upload" ? "dashed" : "solid"}   border_mode={dragging ? "focus" : "base"}   padding={false}   {elem_id}   {elem_classes}   {height}   {width}   {container}   {scale}   {min_width}   allow_overflow={false}  >
function create_default_slot_1(ctx) {
	let statustracker;
	let t;
	let video;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[16].autoscroll
		},
		{ i18n: /*gradio*/ ctx[16].i18n },
		/*loading_status*/ ctx[1]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	video = new Video({
			props: {
				value: /*_video*/ ctx[20],
				subtitle: /*_subtitle*/ ctx[21],
				label: /*label*/ ctx[5],
				show_label: /*show_label*/ ctx[8],
				sources: /*sources*/ ctx[6],
				active_source: /*active_source*/ ctx[22],
				mirror_webcam: /*mirror_webcam*/ ctx[18],
				include_audio: /*include_audio*/ ctx[19],
				autoplay: /*autoplay*/ ctx[14],
				root: /*root*/ ctx[7],
				handle_reset_value: /*handle_reset_value*/ ctx[24],
				i18n: /*gradio*/ ctx[16].i18n,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	video.$on("change", /*handle_change*/ ctx[25]);
	video.$on("drag", /*drag_handler*/ ctx[36]);
	video.$on("error", /*handle_error*/ ctx[26]);
	video.$on("clear", /*clear_handler*/ ctx[37]);
	video.$on("play", /*play_handler_1*/ ctx[38]);
	video.$on("pause", /*pause_handler_1*/ ctx[39]);
	video.$on("upload", /*upload_handler*/ ctx[40]);
	video.$on("stop", /*stop_handler_1*/ ctx[41]);
	video.$on("end", /*end_handler_1*/ ctx[42]);
	video.$on("start_recording", /*start_recording_handler*/ ctx[43]);
	video.$on("stop_recording", /*stop_recording_handler*/ ctx[44]);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(video.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			mount_component(video, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 65538)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 65536 && {
						autoscroll: /*gradio*/ ctx[16].autoscroll
					},
					dirty[0] & /*gradio*/ 65536 && { i18n: /*gradio*/ ctx[16].i18n },
					dirty[0] & /*loading_status*/ 2 && get_spread_object(/*loading_status*/ ctx[1])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const video_changes = {};
			if (dirty[0] & /*_video*/ 1048576) video_changes.value = /*_video*/ ctx[20];
			if (dirty[0] & /*_subtitle*/ 2097152) video_changes.subtitle = /*_subtitle*/ ctx[21];
			if (dirty[0] & /*label*/ 32) video_changes.label = /*label*/ ctx[5];
			if (dirty[0] & /*show_label*/ 256) video_changes.show_label = /*show_label*/ ctx[8];
			if (dirty[0] & /*sources*/ 64) video_changes.sources = /*sources*/ ctx[6];
			if (dirty[0] & /*active_source*/ 4194304) video_changes.active_source = /*active_source*/ ctx[22];
			if (dirty[0] & /*mirror_webcam*/ 262144) video_changes.mirror_webcam = /*mirror_webcam*/ ctx[18];
			if (dirty[0] & /*include_audio*/ 524288) video_changes.include_audio = /*include_audio*/ ctx[19];
			if (dirty[0] & /*autoplay*/ 16384) video_changes.autoplay = /*autoplay*/ ctx[14];
			if (dirty[0] & /*root*/ 128) video_changes.root = /*root*/ ctx[7];
			if (dirty[0] & /*gradio*/ 65536) video_changes.i18n = /*gradio*/ ctx[16].i18n;

			if (dirty[0] & /*gradio*/ 65536 | dirty[1] & /*$$scope*/ 16384) {
				video_changes.$$scope = { dirty, ctx };
			}

			video.$set(video_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(video.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(video.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(video, detaching);
		}
	};
}

// (88:1) <Block   {visible}   variant={value === null && active_source === "upload" ? "dashed" : "solid"}   border_mode={dragging ? "focus" : "base"}   padding={false}   {elem_id}   {elem_classes}   {height}   {width}   {container}   {scale}   {min_width}   allow_overflow={false}  >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let staticvideo;
	let current;

	const statustracker_spread_levels = [
		{
			autoscroll: /*gradio*/ ctx[16].autoscroll
		},
		{ i18n: /*gradio*/ ctx[16].i18n },
		/*loading_status*/ ctx[1]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	staticvideo = new StaticVideo({
			props: {
				value: /*_video*/ ctx[20],
				subtitle: /*_subtitle*/ ctx[21],
				label: /*label*/ ctx[5],
				show_label: /*show_label*/ ctx[8],
				autoplay: /*autoplay*/ ctx[14],
				show_share_button: /*show_share_button*/ ctx[15],
				show_download_button: true,
				i18n: /*gradio*/ ctx[16].i18n
			}
		});

	staticvideo.$on("play", /*play_handler*/ ctx[30]);
	staticvideo.$on("pause", /*pause_handler*/ ctx[31]);
	staticvideo.$on("stop", /*stop_handler*/ ctx[32]);
	staticvideo.$on("end", /*end_handler*/ ctx[33]);
	staticvideo.$on("share", /*share_handler*/ ctx[34]);
	staticvideo.$on("error", /*error_handler*/ ctx[35]);

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(staticvideo.$$.fragment);
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t, anchor);
			mount_component(staticvideo, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty[0] & /*gradio, loading_status*/ 65538)
			? get_spread_update(statustracker_spread_levels, [
					dirty[0] & /*gradio*/ 65536 && {
						autoscroll: /*gradio*/ ctx[16].autoscroll
					},
					dirty[0] & /*gradio*/ 65536 && { i18n: /*gradio*/ ctx[16].i18n },
					dirty[0] & /*loading_status*/ 2 && get_spread_object(/*loading_status*/ ctx[1])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const staticvideo_changes = {};
			if (dirty[0] & /*_video*/ 1048576) staticvideo_changes.value = /*_video*/ ctx[20];
			if (dirty[0] & /*_subtitle*/ 2097152) staticvideo_changes.subtitle = /*_subtitle*/ ctx[21];
			if (dirty[0] & /*label*/ 32) staticvideo_changes.label = /*label*/ ctx[5];
			if (dirty[0] & /*show_label*/ 256) staticvideo_changes.show_label = /*show_label*/ ctx[8];
			if (dirty[0] & /*autoplay*/ 16384) staticvideo_changes.autoplay = /*autoplay*/ ctx[14];
			if (dirty[0] & /*show_share_button*/ 32768) staticvideo_changes.show_share_button = /*show_share_button*/ ctx[15];
			if (dirty[0] & /*gradio*/ 65536) staticvideo_changes.i18n = /*gradio*/ ctx[16].i18n;
			staticvideo.$set(staticvideo_changes);
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(staticvideo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(staticvideo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}

			destroy_component(statustracker, detaching);
			destroy_component(staticvideo, detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*interactive*/ ctx[17]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(if_block_anchor);
			}

			if_blocks[current_block_type_index].d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = null } = $$props;
	let old_value = null;
	let { label } = $$props;
	let { sources } = $$props;
	let { root } = $$props;
	let { proxy_url } = $$props;
	let { show_label } = $$props;
	let { loading_status } = $$props;
	let { height } = $$props;
	let { width } = $$props;
	let { container = false } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { autoplay = false } = $$props;
	let { show_share_button = true } = $$props;
	let { gradio } = $$props;
	let { interactive } = $$props;
	let { mirror_webcam } = $$props;
	let { include_audio } = $$props;
	let _video = null;
	let _subtitle = null;
	let active_source;
	let initial_value = value;

	const handle_reset_value = () => {
		if (initial_value === null || value === initial_value) {
			return;
		}

		$$invalidate(0, value = initial_value);
	};

	let dragging = false;

	function handle_change({ detail }) {
		if (detail != null) {
			$$invalidate(0, value = { video: detail, subtitles: null });
		} else {
			$$invalidate(0, value = null);
		}
	}

	function handle_error({ detail }) {
		const [level, status] = detail.includes("Invalid file type")
		? ["warning", "complete"]
		: ["error", "error"];

		$$invalidate(1, loading_status = loading_status || {});
		$$invalidate(1, loading_status.status = status, loading_status);
		$$invalidate(1, loading_status.message = detail, loading_status);
		gradio.dispatch(level, detail);
	}

	const play_handler = () => gradio.dispatch("play");
	const pause_handler = () => gradio.dispatch("pause");
	const stop_handler = () => gradio.dispatch("stop");
	const end_handler = () => gradio.dispatch("end");
	const share_handler = ({ detail }) => gradio.dispatch("share", detail);
	const error_handler = ({ detail }) => gradio.dispatch("error", detail);
	const drag_handler = ({ detail }) => $$invalidate(23, dragging = detail);
	const clear_handler = () => gradio.dispatch("clear");
	const play_handler_1 = () => gradio.dispatch("play");
	const pause_handler_1 = () => gradio.dispatch("pause");
	const upload_handler = () => gradio.dispatch("upload");
	const stop_handler_1 = () => gradio.dispatch("stop");
	const end_handler_1 = () => gradio.dispatch("end");
	const start_recording_handler = () => gradio.dispatch("start_recording");
	const stop_recording_handler = () => gradio.dispatch("stop_recording");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(5, label = $$props.label);
		if ('sources' in $$props) $$invalidate(6, sources = $$props.sources);
		if ('root' in $$props) $$invalidate(7, root = $$props.root);
		if ('proxy_url' in $$props) $$invalidate(27, proxy_url = $$props.proxy_url);
		if ('show_label' in $$props) $$invalidate(8, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(1, loading_status = $$props.loading_status);
		if ('height' in $$props) $$invalidate(9, height = $$props.height);
		if ('width' in $$props) $$invalidate(10, width = $$props.width);
		if ('container' in $$props) $$invalidate(11, container = $$props.container);
		if ('scale' in $$props) $$invalidate(12, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(13, min_width = $$props.min_width);
		if ('autoplay' in $$props) $$invalidate(14, autoplay = $$props.autoplay);
		if ('show_share_button' in $$props) $$invalidate(15, show_share_button = $$props.show_share_button);
		if ('gradio' in $$props) $$invalidate(16, gradio = $$props.gradio);
		if ('interactive' in $$props) $$invalidate(17, interactive = $$props.interactive);
		if ('mirror_webcam' in $$props) $$invalidate(18, mirror_webcam = $$props.mirror_webcam);
		if ('include_audio' in $$props) $$invalidate(19, include_audio = $$props.include_audio);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*value, initial_value*/ 536870913) {
			if (value && initial_value === null) {
				$$invalidate(29, initial_value = value);
			}
		}

		if ($$self.$$.dirty[0] & /*sources*/ 64) {
			if (sources) {
				if (sources.length > 1) {
					$$invalidate(22, active_source = "upload");
				} else {
					$$invalidate(22, active_source = sources[0]);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*value, root, proxy_url*/ 134217857) {
			{
				if (value != null) {
					$$invalidate(20, _video = normalise_file(value.video, root, proxy_url));
					$$invalidate(21, _subtitle = normalise_file(value.subtitles, root, proxy_url));
				} else {
					$$invalidate(20, _video = null);
					$$invalidate(21, _subtitle = null);
				}
			}
		}

		if ($$self.$$.dirty[0] & /*value, old_value, gradio*/ 268500993) {
			{
				if (JSON.stringify(value) !== JSON.stringify(old_value)) {
					$$invalidate(28, old_value = value);
					gradio.dispatch("change");
				}
			}
		}
	};

	return [
		value,
		loading_status,
		elem_id,
		elem_classes,
		visible,
		label,
		sources,
		root,
		show_label,
		height,
		width,
		container,
		scale,
		min_width,
		autoplay,
		show_share_button,
		gradio,
		interactive,
		mirror_webcam,
		include_audio,
		_video,
		_subtitle,
		active_source,
		dragging,
		handle_reset_value,
		handle_change,
		handle_error,
		proxy_url,
		old_value,
		initial_value,
		play_handler,
		pause_handler,
		stop_handler,
		end_handler,
		share_handler,
		error_handler,
		drag_handler,
		clear_handler,
		play_handler_1,
		pause_handler_1,
		upload_handler,
		stop_handler_1,
		end_handler_1,
		start_recording_handler,
		stop_recording_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				elem_id: 2,
				elem_classes: 3,
				visible: 4,
				value: 0,
				label: 5,
				sources: 6,
				root: 7,
				proxy_url: 27,
				show_label: 8,
				loading_status: 1,
				height: 9,
				width: 10,
				container: 11,
				scale: 12,
				min_width: 13,
				autoplay: 14,
				show_share_button: 15,
				gradio: 16,
				interactive: 17,
				mirror_webcam: 18,
				include_audio: 19
			},
			null,
			[-1, -1]
		);
	}

	get elem_id() {
		return this.$$.ctx[2];
	}

	set elem_id(elem_id) {
		this.$$set({ elem_id });
		flush();
	}

	get elem_classes() {
		return this.$$.ctx[3];
	}

	set elem_classes(elem_classes) {
		this.$$set({ elem_classes });
		flush();
	}

	get visible() {
		return this.$$.ctx[4];
	}

	set visible(visible) {
		this.$$set({ visible });
		flush();
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get label() {
		return this.$$.ctx[5];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get sources() {
		return this.$$.ctx[6];
	}

	set sources(sources) {
		this.$$set({ sources });
		flush();
	}

	get root() {
		return this.$$.ctx[7];
	}

	set root(root) {
		this.$$set({ root });
		flush();
	}

	get proxy_url() {
		return this.$$.ctx[27];
	}

	set proxy_url(proxy_url) {
		this.$$set({ proxy_url });
		flush();
	}

	get show_label() {
		return this.$$.ctx[8];
	}

	set show_label(show_label) {
		this.$$set({ show_label });
		flush();
	}

	get loading_status() {
		return this.$$.ctx[1];
	}

	set loading_status(loading_status) {
		this.$$set({ loading_status });
		flush();
	}

	get height() {
		return this.$$.ctx[9];
	}

	set height(height) {
		this.$$set({ height });
		flush();
	}

	get width() {
		return this.$$.ctx[10];
	}

	set width(width) {
		this.$$set({ width });
		flush();
	}

	get container() {
		return this.$$.ctx[11];
	}

	set container(container) {
		this.$$set({ container });
		flush();
	}

	get scale() {
		return this.$$.ctx[12];
	}

	set scale(scale) {
		this.$$set({ scale });
		flush();
	}

	get min_width() {
		return this.$$.ctx[13];
	}

	set min_width(min_width) {
		this.$$set({ min_width });
		flush();
	}

	get autoplay() {
		return this.$$.ctx[14];
	}

	set autoplay(autoplay) {
		this.$$set({ autoplay });
		flush();
	}

	get show_share_button() {
		return this.$$.ctx[15];
	}

	set show_share_button(show_share_button) {
		this.$$set({ show_share_button });
		flush();
	}

	get gradio() {
		return this.$$.ctx[16];
	}

	set gradio(gradio) {
		this.$$set({ gradio });
		flush();
	}

	get interactive() {
		return this.$$.ctx[17];
	}

	set interactive(interactive) {
		this.$$set({ interactive });
		flush();
	}

	get mirror_webcam() {
		return this.$$.ctx[18];
	}

	set mirror_webcam(mirror_webcam) {
		this.$$set({ mirror_webcam });
		flush();
	}

	get include_audio() {
		return this.$$.ctx[19];
	}

	set include_audio(include_audio) {
		this.$$set({ include_audio });
		flush();
	}
}

const Index$1 = Index;

export { Video as BaseInteractiveVideo, Player$1 as BasePlayer, StaticVideo as BaseStaticVideo, Index$1 as default, playable, prettyBytes };
//# sourceMappingURL=index-31b8cb92.js.map
