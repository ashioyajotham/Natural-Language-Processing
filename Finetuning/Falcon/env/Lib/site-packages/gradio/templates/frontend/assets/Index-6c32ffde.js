import { B as Block } from './Button-05bf7cea.js';
import { B as BlockTitle } from './BlockTitle-2fcd9935.js';
import { S as Static } from './Index-2cec2c56.js';
import './index-5550136d.js';
import './svelte/svelte.js';
import './Info-8a698008.js';

const Index_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/checkboxgroup/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	assign,
	attr,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	ensure_array_like,
	get_spread_object,
	get_spread_update,
	init,
	insert,
	listen,
	mount_component,
	not_equal,
	run_all,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i][0];
	child_ctx[20] = list[i][1];
	child_ctx[22] = i;
	return child_ctx;
}

// (46:1) <BlockTitle {show_label} {info}>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*label*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 512) set_data(t, /*label*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

// (49:2) {#each choices as [display_value, internal_value], i}
function create_each_block(ctx) {
	let label_1;
	let input;
	let input_checked_value;
	let input_name_value;
	let input_title_value;
	let t0;
	let span;
	let t1_value = /*display_value*/ ctx[19] + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	function change_handler() {
		return /*change_handler*/ ctx[16](/*internal_value*/ ctx[20]);
	}

	function input_handler(...args) {
		return /*input_handler*/ ctx[17](/*i*/ ctx[22], /*internal_value*/ ctx[20], ...args);
	}

	function keydown_handler(...args) {
		return /*keydown_handler*/ ctx[18](/*internal_value*/ ctx[20], /*i*/ ctx[22], ...args);
	}

	return {
		c() {
			label_1 = element("label");
			input = element("input");
			t0 = space();
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			input.disabled = /*disabled*/ ctx[13];
			input.checked = input_checked_value = /*value*/ ctx[0].includes(/*internal_value*/ ctx[20]);
			attr(input, "type", "checkbox");
			attr(input, "name", input_name_value = /*internal_value*/ ctx[20]?.toString());
			attr(input, "title", input_title_value = /*internal_value*/ ctx[20]?.toString());
			attr(input, "class", "svelte-1k4wjf2");
			attr(span, "class", "ml-2 svelte-1k4wjf2");
			attr(label_1, "class", "svelte-1k4wjf2");
			toggle_class(label_1, "disabled", /*disabled*/ ctx[13]);
			toggle_class(label_1, "selected", /*value*/ ctx[0].includes(/*internal_value*/ ctx[20]));
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, input);
			append(label_1, t0);
			append(label_1, span);
			append(span, t1);
			append(label_1, t2);

			if (!mounted) {
				dispose = [
					listen(input, "change", change_handler),
					listen(input, "input", input_handler),
					listen(input, "keydown", keydown_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*disabled*/ 8192) {
				input.disabled = /*disabled*/ ctx[13];
			}

			if (dirty & /*value, choices*/ 33 && input_checked_value !== (input_checked_value = /*value*/ ctx[0].includes(/*internal_value*/ ctx[20]))) {
				input.checked = input_checked_value;
			}

			if (dirty & /*choices*/ 32 && input_name_value !== (input_name_value = /*internal_value*/ ctx[20]?.toString())) {
				attr(input, "name", input_name_value);
			}

			if (dirty & /*choices*/ 32 && input_title_value !== (input_title_value = /*internal_value*/ ctx[20]?.toString())) {
				attr(input, "title", input_title_value);
			}

			if (dirty & /*choices*/ 32 && t1_value !== (t1_value = /*display_value*/ ctx[19] + "")) set_data(t1, t1_value);

			if (dirty & /*disabled*/ 8192) {
				toggle_class(label_1, "disabled", /*disabled*/ ctx[13]);
			}

			if (dirty & /*value, choices*/ 33) {
				toggle_class(label_1, "selected", /*value*/ ctx[0].includes(/*internal_value*/ ctx[20]));
			}
		},
		d(detaching) {
			if (detaching) {
				detach(label_1);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

// (32:0) <Block  {visible}  {elem_id}  {elem_classes}  type="fieldset"  {container}  {scale}  {min_width} >
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let blocktitle;
	let t1;
	let div;
	let current;

	const statustracker_spread_levels = [
		{ autoscroll: /*gradio*/ ctx[1].autoscroll },
		{ i18n: /*gradio*/ ctx[1].i18n },
		/*loading_status*/ ctx[12]
	];

	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new Static({ props: statustracker_props });

	blocktitle = new BlockTitle({
			props: {
				show_label: /*show_label*/ ctx[11],
				info: /*info*/ ctx[10],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	let each_value = ensure_array_like(/*choices*/ ctx[5]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			create_component(blocktitle.$$.fragment);
			t1 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrap svelte-1k4wjf2");
			attr(div, "data-testid", "checkbox-group");
		},
		m(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert(target, t0, anchor);
			mount_component(blocktitle, target, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			const statustracker_changes = (dirty & /*gradio, loading_status*/ 4098)
			? get_spread_update(statustracker_spread_levels, [
					dirty & /*gradio*/ 2 && { autoscroll: /*gradio*/ ctx[1].autoscroll },
					dirty & /*gradio*/ 2 && { i18n: /*gradio*/ ctx[1].i18n },
					dirty & /*loading_status*/ 4096 && get_spread_object(/*loading_status*/ ctx[12])
				])
			: {};

			statustracker.$set(statustracker_changes);
			const blocktitle_changes = {};
			if (dirty & /*show_label*/ 2048) blocktitle_changes.show_label = /*show_label*/ ctx[11];
			if (dirty & /*info*/ 1024) blocktitle_changes.info = /*info*/ ctx[10];

			if (dirty & /*$$scope, label*/ 8389120) {
				blocktitle_changes.$$scope = { dirty, ctx };
			}

			blocktitle.$set(blocktitle_changes);

			if (dirty & /*disabled, value, choices, toggle_choice, gradio*/ 24611) {
				each_value = ensure_array_like(/*choices*/ ctx[5]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocktitle.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocktitle.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t0);
				detach(t1);
				detach(div);
			}

			destroy_component(statustracker, detaching);
			destroy_component(blocktitle, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				visible: /*visible*/ ctx[4],
				elem_id: /*elem_id*/ ctx[2],
				elem_classes: /*elem_classes*/ ctx[3],
				type: "fieldset",
				container: /*container*/ ctx[6],
				scale: /*scale*/ ctx[7],
				min_width: /*min_width*/ ctx[8],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(block.$$.fragment);
		},
		m(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*visible*/ 16) block_changes.visible = /*visible*/ ctx[4];
			if (dirty & /*elem_id*/ 4) block_changes.elem_id = /*elem_id*/ ctx[2];
			if (dirty & /*elem_classes*/ 8) block_changes.elem_classes = /*elem_classes*/ ctx[3];
			if (dirty & /*container*/ 64) block_changes.container = /*container*/ ctx[6];
			if (dirty & /*scale*/ 128) block_changes.scale = /*scale*/ ctx[7];
			if (dirty & /*min_width*/ 256) block_changes.min_width = /*min_width*/ ctx[8];

			if (dirty & /*$$scope, choices, disabled, value, gradio, show_label, info, label, loading_status*/ 8404515) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(block, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let disabled;
	let { gradio } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { value = [] } = $$props;
	let { choices } = $$props;
	let { container = true } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { label = gradio.i18n("checkbox.checkbox_group") } = $$props;
	let { info = undefined } = $$props;
	let { show_label = true } = $$props;
	let { loading_status } = $$props;
	let { interactive = true } = $$props;

	function toggle_choice(choice) {
		if (value.includes(choice)) {
			$$invalidate(0, value = value.filter(v => v !== choice));
		} else {
			$$invalidate(0, value = [...value, choice]);
		}

		gradio.dispatch("input");
	}

	const change_handler = internal_value => toggle_choice(internal_value);

	const input_handler = (i, internal_value, evt) => gradio.dispatch("select", {
		index: i,
		value: internal_value,
		selected: evt.currentTarget.checked
	});

	const keydown_handler = (internal_value, i, event) => {
		if (event.key === "Enter") {
			toggle_choice(internal_value);

			gradio.dispatch("select", {
				index: i,
				value: internal_value,
				selected: !value.includes(internal_value)
			});
		}
	};

	$$self.$$set = $$props => {
		if ('gradio' in $$props) $$invalidate(1, gradio = $$props.gradio);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(3, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(4, visible = $$props.visible);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('choices' in $$props) $$invalidate(5, choices = $$props.choices);
		if ('container' in $$props) $$invalidate(6, container = $$props.container);
		if ('scale' in $$props) $$invalidate(7, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(8, min_width = $$props.min_width);
		if ('label' in $$props) $$invalidate(9, label = $$props.label);
		if ('info' in $$props) $$invalidate(10, info = $$props.info);
		if ('show_label' in $$props) $$invalidate(11, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(12, loading_status = $$props.loading_status);
		if ('interactive' in $$props) $$invalidate(15, interactive = $$props.interactive);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*interactive*/ 32768) {
			$$invalidate(13, disabled = !interactive);
		}

		if ($$self.$$.dirty & /*value, gradio*/ 3) {
			value && gradio.dispatch("change");
		}
	};

	return [
		value,
		gradio,
		elem_id,
		elem_classes,
		visible,
		choices,
		container,
		scale,
		min_width,
		label,
		info,
		show_label,
		loading_status,
		disabled,
		toggle_choice,
		interactive,
		change_handler,
		input_handler,
		keydown_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, not_equal, {
			gradio: 1,
			elem_id: 2,
			elem_classes: 3,
			visible: 4,
			value: 0,
			choices: 5,
			container: 6,
			scale: 7,
			min_width: 8,
			label: 9,
			info: 10,
			show_label: 11,
			loading_status: 12,
			interactive: 15
		});
	}
}

export { Index as default };
//# sourceMappingURL=Index-6c32ffde.js.map
